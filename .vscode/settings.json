{
  "github.copilot.enable": {
    "*": true  
  },
  "github.copilot.chat.codeGeneration.useInstructionFiles": true,  
  "github.copilot.chat.testGeneration.instructions": [
    {
      "file": ".github/instructions/copilot-instructions-testing.md"
    }
  ],
  "github.copilot.chat.codeGeneration.instructions": [
    {
      "file": ".github/copilot-instructions.md"
    },
    {
      "file": ".github/instructions/copilot-instructions-browser-extension.md"
    },
    {
      "file": ".github/instructions/copilot-instructions-service-worker.md"
    },
    {
      "file": ".github/instructions/copilot-instructions-content-script.md"
    },
    {
      "file": ".github/instructions/copilot-instructions-typescript.md"
    },
    {
      "file": ".github/instructions/copilot-instructions-ai-processing.md"
    }
  ],
  
  // Formatting and Code Quality Settings
  "editor.formatOnSave": true,
  "editor.formatOnPaste": true,
  "editor.formatOnType": false,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit",
    "source.organizeImports": "explicit"
  },
  
  // Default formatter settings
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "typescript.format.enable": false,
  "javascript.format.enable": false,
  
  // File-specific formatter settings
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true,
    "editor.codeActionsOnSave": {
      "source.fixAll.eslint": "explicit",
      "source.organizeImports": "explicit"
    }
  },
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "[html]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "[css]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "[markdown]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true,
    "editor.wordWrap": "on"
  },
  
  // Browser extension specific settings
  "typescript.preferences.importModuleSpecifier": "relative",
  "typescript.suggest.autoImports": true,
  "typescript.updateImportsOnFileMove.enabled": "always",
  
  // File associations
  "files.associations": {
    "*.json": "jsonc"
  },
  
  // Prettier integration
  "prettier.requireConfig": true,
  "prettier.useEditorConfig": false,
  
  // ESLint integration
  "eslint.workingDirectories": ["browser-extension"],
  "eslint.validate": [
    "javascript",
    "typescript"
  ],
  
  // Python settings for ai-processing module
  "python.analysis.extraPaths": [
    "./ai-processing/src"
  ],
  "python.defaultInterpreterPath": "./ai-processing/.venv/Scripts/python.exe",
  "python.pythonPath": "./ai-processing/.venv/Scripts/python.exe",
  "python.terminal.activateEnvironment": true,
  "python.testing.pytestEnabled": true,
  "python.testing.unittestEnabled": false,
  "python.testing.pytestArgs": [
    "ai-processing/tests",
    "-v",
    "--tb=short"
  ],
  "python.testing.cwd": "./ai-processing",
  "python.testing.autoTestDiscoverOnSaveEnabled": true,
  "python.analysis.autoImportCompletions": true,
  "python.analysis.typeCheckingMode": "basic",
  
  // Python file formatting
  "[python]": {
    "editor.defaultFormatter": "ms-python.python",
    "editor.formatOnSave": true,
    "editor.codeActionsOnSave": {
      "source.organizeImports": "explicit"
    }
  },
  
  // Jest Test Explorer Configuration
  "jest.runMode": "on-demand",
  "jest.rootPath": "browser-extension",
  "jest.jestCommandLine": "npm test --",
  "jest.outputConfig": {
    "revealOn": "run",
    "revealWithFocus": false,
    "clearOnRun": "terminal"
  },
  
  // Testing API configuration for built-in test explorer
  "testing.automaticallyOpenPeekView": "failureInVisibleDocument",
  "testing.followRunningTest": true,
  "testing.openTesting": "neverOpen"
}
