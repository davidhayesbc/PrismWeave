// Generated by Copilot
// Specialized build script for PrismWeave bookmarklet generation
// Creates highly optimized, minified bookmarklet code for URL embedding

const esbuild = require('esbuild');
const fs = require('fs');
const path = require('path');

async function buildBookmarklet() {
  console.log('🔖 Building PrismWeave Bookmarklet...');

  const isProduction = process.env.NODE_ENV === 'production' || true; // Always optimize bookmarklet
  console.log(`📦 Build mode: ${isProduction ? 'Production' : 'Development'}`);

  // Ensure dist directory exists
  if (!fs.existsSync('./dist/bookmarklet')) {
    fs.mkdirSync('./dist/bookmarklet', { recursive: true });
  }

  const bookmarkletOptions = {
    target: 'es2020',
    platform: 'browser',
    sourcemap: false, // No sourcemaps for bookmarklet (size optimization)
    minify: true, // Always minify for maximum compression
    bundle: true,
    format: 'iife',
    globalName: 'PrismWeaveBookmarklet',
    define: {
      'process.env.NODE_ENV': '"production"',
    },
    // Aggressive optimization for minimal size
    treeShaking: true,
    minifyWhitespace: true,
    minifyIdentifiers: true,
    minifySyntax: true,
  };

  try {
    console.log('  📦 Building standalone bookmarklet...');

    // Build the main bookmarklet runtime
    await esbuild.build({
      entryPoints: ['src/bookmarklet/runtime.ts'],
      outfile: 'dist/bookmarklet/runtime.js',
      ...bookmarkletOptions,
    });

    console.log('  ✅ Bookmarklet runtime built');

    // Generate bookmarklet URL-safe code
    await generateBookmarkletCode();

    // Create bookmarklet template
    await createBookmarkletTemplate();

    console.log('🎉 Bookmarklet build completed successfully!');
    console.log('📄 Files generated:');
    console.log('   - dist/bookmarklet/runtime.js (standalone runtime)');
    console.log('   - dist/bookmarklet/bookmarklet.js (URL-safe code)');
    console.log('   - dist/bookmarklet/template.html (installation template)');
  } catch (error) {
    console.error('❌ Bookmarklet build failed:', error);
    process.exit(1);
  }
}

async function generateBookmarkletCode() {
  console.log('  🔗 Generating URL-safe bookmarklet code...');

  const runtimePath = './dist/bookmarklet/runtime.js';
  if (!fs.existsSync(runtimePath)) {
    throw new Error('Bookmarklet runtime not found. Build failed.');
  }

  // Read the minified runtime code
  const runtimeCode = fs.readFileSync(runtimePath, 'utf8');

  // Create URL-safe bookmarklet code
  const bookmarkletCode = `javascript:(function(){${runtimeCode}})();`;

  // URL encode the bookmarklet
  const urlEncodedBookmarklet = encodeURIComponent(bookmarkletCode);

  // Save the URL-safe version
  const bookmarkletPath = './dist/bookmarklet/bookmarklet.js';
  fs.writeFileSync(bookmarkletPath, urlEncodedBookmarklet);

  // Also save the readable version for debugging
  const readablePath = './dist/bookmarklet/bookmarklet-readable.js';
  fs.writeFileSync(readablePath, bookmarkletCode);

  console.log(`  ✅ Bookmarklet code generated (${urlEncodedBookmarklet.length} characters)`);

  // Warn if bookmarklet is too large
  if (urlEncodedBookmarklet.length > 2000) {
    console.warn(
      `  ⚠️  Warning: Bookmarklet is ${urlEncodedBookmarklet.length} characters. Some browsers may have issues with URLs > 2000 characters.`
    );
  }
}

async function createBookmarkletTemplate() {
  console.log('  📋 Creating bookmarklet installation template...');

  const templateHtml = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PrismWeave Bookmarklet</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
        }
        .bookmarklet-link {
            display: inline-block;
            background: #007acc;
            color: white;
            padding: 12px 24px;
            text-decoration: none;
            border-radius: 6px;
            font-size: 16px;
            margin: 20px 0;
        }
        .bookmarklet-link:hover {
            background: #005a9e;
        }
        .instructions {
            background: #f5f5f5;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
        }
        .code-block {
            background: #2d3748;
            color: #e2e8f0;
            padding: 15px;
            border-radius: 6px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 14px;
            overflow-x: auto;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <h1>🔖 PrismWeave Bookmarklet</h1>
    
    <p>Use this bookmarklet to capture content from any webpage, even without the browser extension installed.</p>
    
    <div class="instructions">
        <h2>Installation Instructions</h2>
        <ol>
            <li><strong>Right-click</strong> on the bookmarklet link below</li>
            <li>Select <strong>"Bookmark This Link"</strong> or <strong>"Add to Bookmarks"</strong></li>
            <li>Save it to your bookmarks toolbar for easy access</li>
            <li>Click the bookmark on any webpage to capture content</li>
        </ol>
    </div>

    <h2>Bookmarklet Link</h2>
    <p>Drag this link to your bookmarks toolbar or right-click to bookmark:</p>
    
    <a href="BOOKMARKLET_CODE_PLACEHOLDER" class="bookmarklet-link">
        📄 PrismWeave Capture
    </a>

    <div class="instructions">
        <h2>How to Use</h2>
        <ol>
            <li>Navigate to any webpage you want to capture</li>
            <li>Click the PrismWeave bookmark in your toolbar</li>
            <li>Configure your GitHub settings in the popup</li>
            <li>Click "Capture" to save the content as markdown</li>
        </ol>
    </div>

    <h2>Manual Installation</h2>
    <p>If you prefer to create the bookmark manually:</p>
    <ol>
        <li>Create a new bookmark in your browser</li>
        <li>Set the name to "PrismWeave Capture"</li>
        <li>Copy and paste the following code as the URL:</li>
    </ol>
    
    <div class="code-block" id="bookmarklet-code">
        BOOKMARKLET_CODE_PLACEHOLDER
    </div>

    <script>
        // Load the actual bookmarklet code
        fetch('./bookmarklet.js')
            .then(response => response.text())
            .then(code => {
                const bookmarkletUrl = 'javascript:' + decodeURIComponent(code);
                
                // Update the bookmarklet link
                const link = document.querySelector('.bookmarklet-link');
                link.href = bookmarkletUrl;
                
                // Update the manual code block
                const codeBlock = document.getElementById('bookmarklet-code');
                codeBlock.textContent = bookmarkletUrl;
                
                // Replace placeholder text
                document.body.innerHTML = document.body.innerHTML.replace(
                    /BOOKMARKLET_CODE_PLACEHOLDER/g, 
                    bookmarkletUrl
                );
            })
            .catch(error => {
                console.error('Failed to load bookmarklet code:', error);
                document.querySelector('.bookmarklet-link').style.display = 'none';
                document.getElementById('bookmarklet-code').textContent = 'Error loading bookmarklet code';
            });
    </script>
</body>
</html>`;

  const templatePath = './dist/bookmarklet/template.html';
  fs.writeFileSync(templatePath, templateHtml);

  console.log('  ✅ Installation template created');
}

// Run the build
buildBookmarklet().catch(console.error);
