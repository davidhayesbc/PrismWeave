#!/usr/bin/env node

// Personal Bookmarklet Build Script for PrismWeave
// Generated by Copilot
// Builds the personal bookmarklet generator interface

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

class PersonalBookmarkletBuilder {
  constructor() {
    this.scriptDir = __dirname;
    this.projectRoot = path.resolve(this.scriptDir, '..');
    this.srcDir = path.join(this.projectRoot, 'src', 'bookmarklet');
    this.distDir = path.resolve(this.scriptDir, '..', '..', 'dist', 'bookmarklet');
    this.isProduction = process.env.NODE_ENV === 'production';
  }

  async build() {
    console.log('🔗 Building Personal Bookmarklet Generator...');
    console.log(`📦 Mode: ${this.isProduction ? 'Production' : 'Development'}`);

    try {
      this.ensureDirectories();
      await this.buildGenerator();
      await this.copyStaticFiles();
      this.reportResults();

      console.log('\n✅ Personal bookmarklet generator built successfully!');
      console.log(`📁 Output: ${this.distDir}`);
      console.log('\n🚀 To test locally:');
      console.log('   npm run dev');
      console.log('   Open http://localhost:3000/generator.html');
    } catch (error) {
      console.error('❌ Build failed:', error.message);
      process.exit(1);
    }
  }

  ensureDirectories() {
    console.log('📁 Setting up directories...');

    if (!fs.existsSync(this.distDir)) {
      fs.mkdirSync(this.distDir, { recursive: true });
    }

    // Clean up any existing config.js from previous builds
    const configPath = path.join(this.distDir, 'config.js');
    if (fs.existsSync(configPath)) {
      fs.unlinkSync(configPath);
      console.log('🧹 Cleaned up existing config.js');
    }
  }

  async buildGenerator() {
    console.log('🔧 Compiling generator TypeScript...');

    const generatorSource = path.join(this.srcDir, 'generator.ts');
    const generatorOutput = path.join(this.distDir, 'generator.js');

    // Check if source exists
    if (!fs.existsSync(generatorSource)) {
      throw new Error(`Generator source not found: ${generatorSource}`);
    }

    // Use esbuild for bundled compilation (preferred approach)
    try {
      console.log('🔧 Using esbuild to create bundled generator...');
      execSync(
        `npx esbuild ${generatorSource} --bundle --outfile=${generatorOutput} --format=iife --target=es2020 --minify=${this.isProduction}`,
        {
          cwd: this.projectRoot,
          stdio: 'inherit',
        }
      );
      console.log('✅ Generator compiled successfully with esbuild (bundled)');
    } catch (esbuildError) {
      console.warn('⚠️ esbuild compilation failed, trying TypeScript...');

      // Fallback to TypeScript compilation
      try {
        const tsconfigPath = path.join(this.projectRoot, 'tsconfig.bookmarklet.json');
        execSync(`npx tsc --project ${tsconfigPath} --outDir ${this.distDir}`, {
          cwd: this.projectRoot,
          stdio: 'inherit',
        });

        // Move the compiled generator.js from subdirectory to dist root
        const compiledGeneratorPath = path.join(this.distDir, 'bookmarklet', 'generator.js');
        if (fs.existsSync(compiledGeneratorPath)) {
          fs.copyFileSync(compiledGeneratorPath, generatorOutput);
          // Clean up the subdirectory structure
          this.cleanupCompiledSubdirs();

          // Since TypeScript creates ES6 modules, create config.js file
          this.createConfigFile();

          // Fix import paths for ES6 modules
          this.fixModuleImports();
        }
        console.log('✅ Generator compiled successfully with TypeScript (modules)');
      } catch (tscError) {
        throw new Error(`Both esbuild and TypeScript compilation failed: ${tscError.message}`);
      }
    }
  }

  cleanupCompiledSubdirs() {
    // Remove the subdirectory structure created by TypeScript compilation
    const subdirs = ['bookmarklet', 'utils', 'types'];

    subdirs.forEach(subdir => {
      const subdirPath = path.join(this.distDir, subdir);
      if (fs.existsSync(subdirPath)) {
        try {
          fs.rmSync(subdirPath, { recursive: true, force: true });
        } catch (error) {
          console.warn(`⚠️ Could not remove ${subdir}: ${error.message}`);
        }
      }
    });
  }

  createConfigFile() {
    console.log('📄 Creating config.js for ES6 module support...');

    const configContent = `// Bookmarklet Configuration Constants
// Consolidated configuration for bookmarklet components

export const BOOKMARKLET_CONFIG = {
  DEFAULT_INJECTABLE_BASE: 'https://davidhayesbc.github.io/PrismWeave/injectable',
  LOCAL_INJECTABLE_BASE: 'http://localhost:3000/injectable',
  DEFAULT_BRANCH: 'main',
  DEFAULT_FOLDER: 'documents',
  DEFAULT_COMMIT_TEMPLATE: 'PrismWeave: Add {title}',
  UI_Z_INDEX: 999999,
  MAX_CONTENT_LENGTH: 1000000,
  API_TIMEOUT: 30000,
};`;

    const configPath = path.join(this.distDir, 'config.js');
    fs.writeFileSync(configPath, configContent);
    console.log('✅ config.js created');
  }

  fixModuleImports() {
    console.log('🔧 Fixing ES6 module import paths...');

    const generatorPath = path.join(this.distDir, 'generator.js');
    if (fs.existsSync(generatorPath)) {
      let content = fs.readFileSync(generatorPath, 'utf8');

      // Fix import paths to include .js extension
      content = content.replace(
        /import\s+{([^}]+)}\s+from\s+['"]\.\/config['"]/g,
        "import { $1 } from './config.js'"
      );

      fs.writeFileSync(generatorPath, content);
      console.log('✅ Import paths fixed');
    }
  }

  async copyStaticFiles() {
    console.log('📄 Copying static files...');

    // Check if we have a bundled generator.js (no imports) or ES6 modules
    // If config.js exists, we're using ES6 modules
    const configPath = path.join(this.distDir, 'config.js');
    const isUsingModules = fs.existsSync(configPath);

    console.log(`   🔍 Module detection: ${isUsingModules ? 'ES6 modules' : 'bundled'}`);

    // Copy and fix CSS paths for all HTML files in the bookmarklet directory
    const htmlFiles = ['generator.html', 'help.html', 'index.html', 'install.html'];

    htmlFiles.forEach(htmlFile => {
      const srcPath = path.join(this.srcDir, htmlFile);
      if (fs.existsSync(srcPath)) {
        console.log(`   📋 Copying and fixing paths in ${htmlFile}`);

        // Read and update the HTML to fix CSS paths
        let htmlContent = fs.readFileSync(srcPath, 'utf8');

        // Fix paths for all CSS files - convert ../styles/*.css to *.css
        htmlContent = htmlContent.replace(/href="\.\.\/styles\/([\w-]+\.css)"/g, 'href="$1"');

        // Fix script loading for ES6 modules if needed
        if (isUsingModules && htmlFile === 'generator.html') {
          console.log('   🔧 Adding module support to generator.html');
          htmlContent = htmlContent.replace(
            /<script src="generator\.js"><\/script>/g,
            '<script type="module" src="generator.js"></script>'
          );
        } else if (!isUsingModules && htmlFile === 'generator.html') {
          console.log('   🔧 Using regular script loading for bundled generator.html');
          // Ensure regular script loading (no type="module")
          htmlContent = htmlContent.replace(
            /<script type="module" src="generator\.js"><\/script>/g,
            '<script src="generator.js"></script>'
          );
        }

        fs.writeFileSync(path.join(this.distDir, htmlFile), htmlContent);
      } else {
        console.log(`   ⚠️  ${htmlFile} not found, skipping`);
      }
    });

    // Copy all CSS files from styles directory
    const stylesDir = path.join(this.projectRoot, 'src', 'styles');
    if (fs.existsSync(stylesDir)) {
      console.log('   🎨 Copying CSS files...');
      const cssFiles = fs.readdirSync(stylesDir).filter(file => file.endsWith('.css'));

      cssFiles.forEach(cssFile => {
        const srcPath = path.join(stylesDir, cssFile);
        const destPath = path.join(this.distDir, cssFile);
        fs.copyFileSync(srcPath, destPath);
        console.log(`      ✅ ${cssFile}`);
      });
    }

    // Copy README if it exists
    const readmePath = path.join(this.srcDir, 'README.md');
    if (fs.existsSync(readmePath)) {
      fs.copyFileSync(readmePath, path.join(this.distDir, 'README.md'));
    }

    console.log('✅ Static files created');
  }

  createGeneratorHtml() {
    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PrismWeave Personal Bookmarklet Generator</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; margin-bottom: 40px; }
        .form-group { margin-bottom: 20px; }
        label { display: block; margin-bottom: 5px; font-weight: 500; }
        input, textarea, select { width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px; }
        button { background: #007cba; color: white; padding: 12px 24px; border: none; border-radius: 4px; cursor: pointer; font-size: 16px; }
        button:hover { background: #005a87; }
        .result-section { margin-top: 30px; padding: 20px; background: #f5f5f5; border-radius: 4px; display: none; }
        .bookmarklet-link { background: #28a745; color: white; padding: 8px 16px; text-decoration: none; border-radius: 4px; display: inline-block; margin: 10px 0; }
        .status-message { padding: 10px; margin: 10px 0; border-radius: 4px; }
        .status-success { background: #d4edda; border: 1px solid #c3e6cb; color: #155724; }
        .status-error { background: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; }
        .code-display { background: #f8f9fa; border: 1px solid #e9ecef; border-radius: 4px; padding: 15px; margin: 10px 0; font-family: monospace; word-break: break-all; max-height: 200px; overflow-y: auto; }
    </style>
</head>
<body>
    <div class="header">
        <h1>🔗 PrismWeave Personal Bookmarklet Generator</h1>
        <p>Generate a self-contained bookmarklet for capturing web content to your GitHub repository</p>
    </div>

    <form id="generator-form">
        <div class="form-group">
            <label for="github-token">GitHub Personal Access Token:</label>
            <input type="password" id="github-token" name="github-token" required 
                   placeholder="ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx">
            <small>Needs 'repo' scope for repository access</small>
        </div>

        <div class="form-group">
            <label for="github-repo">Repository (owner/repo):</label>
            <input type="text" id="github-repo" name="github-repo" required 
                   placeholder="username/my-repository">
        </div>

        <div class="form-group">
            <label for="default-folder">Default Folder:</label>
            <input type="text" id="default-folder" name="default-folder" 
                   placeholder="documents" value="documents">
        </div>

        <div class="form-group">
            <label for="commit-message">Commit Message Template:</label>
            <input type="text" id="commit-message" name="commit-message" 
                   placeholder="Add captured content: {{title}}" value="Add captured content: {{title}}">
        </div>

        <div class="form-group">
            <label for="file-naming">File Naming Pattern:</label>
            <select id="file-naming" name="file-naming">
                <option value="timestamp-title">Timestamp + Title</option>
                <option value="title-only">Title Only</option>
                <option value="domain-title">Domain + Title</option>
            </select>
        </div>

        <button type="submit">Generate Personal Bookmarklet</button>
    </form>

    <div id="status-message"></div>

    <div id="result-section" class="result-section">
        <h3>Your Personal Bookmarklet</h3>
        <p>Drag this link to your bookmarks bar, or copy the code below:</p>
        <a href="#" id="bookmarklet-link" class="bookmarklet-link">📖 Capture to GitHub</a>
        
        <h4>Bookmarklet Code:</h4>
        <div id="bookmarklet-code-display" class="code-display"></div>
        
        <p><strong>Security Note:</strong> Your GitHub token is embedded in this bookmarklet. Keep it secure!</p>
    </div>

    <script src="generator.js"></script>
    <script>
        // Initialize the generator when page loads
        document.addEventListener('DOMContentLoaded', function() {
            new BookmarkletGeneratorUI();
        });
    </script>
</body>
</html>`;
  }

  createIndexHtml() {
    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PrismWeave Bookmarklet</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; margin-bottom: 40px; }
        .nav { display: flex; gap: 20px; justify-content: center; margin-bottom: 40px; }
        .nav a { background: #007cba; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; }
        .nav a:hover { background: #005a87; }
        .feature { margin-bottom: 30px; }
        .feature h3 { color: #007cba; }
    </style>
</head>
<body>
    <div class="header">
        <h1>🔗 PrismWeave Personal Bookmarklet</h1>
        <p>Self-contained bookmarklet for capturing web content to GitHub</p>
    </div>

    <div class="nav">
        <a href="generator.html">Generate Bookmarklet</a>
        <a href="help.html">Help & Setup</a>
        <a href="README.md">Documentation</a>
    </div>

    <div class="feature">
        <h3>✨ Features</h3>
        <ul>
            <li><strong>Self-Contained:</strong> No external dependencies or services</li>
            <li><strong>Direct GitHub Integration:</strong> Saves content directly to your repository</li>
            <li><strong>Smart Content Extraction:</strong> Automatically detects and extracts main content</li>
            <li><strong>Markdown Conversion:</strong> Converts HTML to clean markdown format</li>
            <li><strong>Privacy-Focused:</strong> All processing happens locally in your browser</li>
        </ul>
    </div>

    <div class="feature">
        <h3>🚀 Quick Start</h3>
        <ol>
            <li>Click "Generate Bookmarklet" above</li>
            <li>Enter your GitHub Personal Access Token</li>
            <li>Enter your repository name (owner/repo format)</li>
            <li>Click "Generate Personal Bookmarklet"</li>
            <li>Drag the generated bookmarklet to your bookmarks bar</li>
            <li>Visit any web page and click your bookmarklet to capture content</li>
        </ol>
    </div>

    <div class="feature">
        <h3>🔒 Security</h3>
        <p>Your GitHub Personal Access Token is embedded directly in the bookmarklet for maximum privacy and reliability. This means:</p>
        <ul>
            <li>No external services have access to your token</li>
            <li>All operations happen directly between your browser and GitHub</li>
            <li>You maintain full control over your credentials and data</li>
        </ul>
        <p><strong>Important:</strong> Treat generated bookmarklets as containing sensitive credentials.</p>
    </div>
</body>
</html>`;
  }

  createHelpHtml() {
    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PrismWeave Bookmarklet Help</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; margin-bottom: 40px; }
        .section { margin-bottom: 40px; }
        .section h2 { color: #007cba; }
        code { background: #f8f9fa; padding: 2px 6px; border-radius: 3px; font-family: monospace; }
        pre { background: #f8f9fa; padding: 15px; border-radius: 4px; overflow-x: auto; }
        .back-link { display: inline-block; margin-bottom: 20px; color: #007cba; text-decoration: none; }
        .back-link:hover { text-decoration: underline; }
    </style>
</head>
<body>
    <a href="index.html" class="back-link">← Back to Main</a>
    
    <div class="header">
        <h1>📚 PrismWeave Bookmarklet Help</h1>
    </div>

    <div class="section">
        <h2>🔧 Setup Requirements</h2>
        <h3>GitHub Personal Access Token</h3>
        <ol>
            <li>Go to GitHub Settings → Developer settings → Personal access tokens</li>
            <li>Click "Generate new token (classic)"</li>
            <li>Select the <code>repo</code> scope for repository access</li>
            <li>Copy the generated token (starts with <code>ghp_</code>)</li>
        </ol>

        <h3>Repository Setup</h3>
        <ul>
            <li>Create a repository for storing captured content</li>
            <li>Ensure your token has write access to the repository</li>
            <li>The repository can be public or private</li>
        </ul>
    </div>

    <div class="section">
        <h2>📖 How to Use</h2>
        <ol>
            <li><strong>Generate:</strong> Create your personal bookmarklet using the generator</li>
            <li><strong>Install:</strong> Drag the generated bookmarklet to your browser's bookmarks bar</li>
            <li><strong>Capture:</strong> Visit any web page and click your bookmarklet</li>
            <li><strong>Verify:</strong> Check your GitHub repository for the captured content</li>
        </ol>
    </div>

    <div class="section">
        <h2>🛠️ Troubleshooting</h2>
        
        <h3>Token Issues</h3>
        <ul>
            <li><strong>Invalid token:</strong> Verify the token is correct and has repo scope</li>
            <li><strong>Access denied:</strong> Ensure you have write access to the repository</li>
            <li><strong>Token expired:</strong> Generate a new token and update your bookmarklet</li>
        </ul>

        <h3>Repository Issues</h3>
        <ul>
            <li><strong>Repository not found:</strong> Check the repository name format (owner/repo)</li>
            <li><strong>Permission denied:</strong> Verify your token has access to the repository</li>
            <li><strong>Branch doesn't exist:</strong> Ensure the target branch exists (default: main)</li>
        </ul>

        <h3>Browser Issues</h3>
        <ul>
            <li><strong>Bookmarklet not working:</strong> Check browser console for error messages</li>
            <li><strong>Content not captured:</strong> Some sites may block content extraction</li>
            <li><strong>Network errors:</strong> Check internet connection and GitHub status</li>
        </ul>
    </div>

    <div class="section">
        <h2>🔒 Security Best Practices</h2>
        <ul>
            <li>Use tokens with minimal required permissions (repo scope only)</li>
            <li>Regularly rotate your GitHub tokens</li>
            <li>Don't share bookmarklets containing your tokens</li>
            <li>Use private repositories for sensitive content</li>
        </ul>
    </div>

    <div class="section">
        <h2>💡 Tips</h2>
        <ul>
            <li>Test your bookmarklet on a simple webpage first</li>
            <li>Use descriptive commit message templates</li>
            <li>Organize content using the folder path setting</li>
            <li>Check your repository's commit history to verify captures</li>
        </ul>
    </div>
</body>
</html>`;
  }

  reportResults() {
    console.log('\n📊 Build Results:');

    // Core files
    const coreFiles = ['generator.html', 'generator.js', 'help.html', 'index.html', 'install.html'];

    coreFiles.forEach(file => {
      const filePath = path.join(this.distDir, file);
      if (fs.existsSync(filePath)) {
        const stats = fs.statSync(filePath);
        const size = this.formatFileSize(stats.size);
        console.log(`   ✅ ${file} ${size}`);
      } else {
        console.log(`   ⚠️  Missing: ${file}`);
      }
    });

    // CSS files
    const stylesDir = path.join(this.projectRoot, 'src', 'styles');
    if (fs.existsSync(stylesDir)) {
      const cssFiles = fs.readdirSync(stylesDir).filter(file => file.endsWith('.css'));

      cssFiles.forEach(cssFile => {
        const filePath = path.join(this.distDir, cssFile);
        if (fs.existsSync(filePath)) {
          const stats = fs.statSync(filePath);
          const size = this.formatFileSize(stats.size);
          console.log(`   ✅ ${cssFile} ${size}`);
        }
      });
    }
  }

  formatFileSize(bytes) {
    if (bytes === 0) return '(0 bytes)';
    const k = 1024;
    const sizes = ['bytes', 'KB', 'MB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return `(${parseFloat((bytes / Math.pow(k, i)).toFixed(1))} ${sizes[i]})`;
  }
}

// Command line interface
async function main() {
  const builder = new PersonalBookmarkletBuilder();
  await builder.build();
}

// Execute if called directly
if (require.main === module) {
  main().catch(error => {
    console.error('❌ Build failed:', error);
    process.exit(1);
  });
}

module.exports = { PersonalBookmarkletBuilder };
