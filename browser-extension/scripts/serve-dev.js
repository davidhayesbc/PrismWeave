#!/usr/bin/env node

// Development Server for PrismWeave Website
// Generated by Copilot for PrismWeave project
// Serves the website with live reloading and automatic rebuilds

const http = require('http');
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const { PersonalBookmarkletBuilder } = require('./build-bookmarklet.js');

class PrismWeaveDevelopmentServer {
  constructor(config = {}) {
    this.config = {
      port: 3000,
      host: 'localhost',
      srcDir: path.join(__dirname, '../src'),
      distDir: path.join(__dirname, '../dist/bookmarklet'),
      watchInterval: 500, // Check for changes every 500ms
      autoReload: true,
      verbose: true,
      ...config,
    };

    this.builder = new PersonalBookmarkletBuilder();
    this.watchedFiles = new Map(); // Track file modification times
    this.clients = new Set(); // WebSocket-like connections for live reload
    this.buildInProgress = false;

    // Initialize watched directories
    this.watchDirs = [
      path.join(this.config.srcDir, 'bookmarklet'),
      path.join(this.config.srcDir, 'styles'),
    ];

    this.log = this.config.verbose ? (...args) => console.log(`üîß [DEV]`, ...args) : () => {};
  }

  getMimeType(filePath) {
    const ext = path.extname(filePath).toLowerCase();
    const mimeTypes = {
      '.html': 'text/html',
      '.js': 'application/javascript',
      '.css': 'text/css',
      '.json': 'application/json',
      '.md': 'text/markdown',
      '.txt': 'text/plain',
      '.png': 'image/png',
      '.jpg': 'image/jpeg',
      '.svg': 'image/svg+xml',
    };
    return mimeTypes[ext] || 'application/octet-stream';
  }

  async start() {
    console.log('üöÄ Starting PrismWeave Development Server...');
    console.log(`üìÅ Source: ${this.config.srcDir}`);
    console.log(`üì¶ Output: ${this.config.distDir}`);

    // Initial build
    await this.performBuild();

    // Start file watcher
    if (this.config.autoReload) {
      this.startFileWatcher();
    }

    // Create HTTP server
    const server = http.createServer((req, res) => {
      this.handleRequest(req, res);
    });

    server.listen(this.config.port, this.config.host, () => {
      console.log(
        `‚úÖ Development server running at http://${this.config.host}:${this.config.port}/`
      );
      console.log('\nüìÇ Available pages:');
      console.log(`   üè† http://${this.config.host}:${this.config.port}/ - File browser`);
      console.log(
        `   üîß http://${this.config.host}:${this.config.port}/generator.html - Bookmarklet Generator`
      );
      console.log(
        `   üîå http://${this.config.host}:${this.config.port}/install.html - Installation Guide`
      );

      console.log('\nüí° Development Features:');
      console.log(`   üîÑ Auto-rebuild: ${this.config.autoReload ? '‚úÖ Enabled' : '‚ùå Disabled'}`);
      console.log(`   üëÄ File watching: ${this.config.autoReload ? '‚úÖ Active' : '‚ùå Disabled'}`);
      console.log(`   üì± Live reload: ${this.config.autoReload ? '‚úÖ Available' : '‚ùå Disabled'}`);
      console.log(`   üïí Watch interval: ${this.config.watchInterval}ms`);

      console.log('\nüéØ Quick Commands:');
      console.log(`   ‚Ä¢ Ctrl+C to stop server`);
      console.log(`   ‚Ä¢ Edit CSS/HTML files and see changes instantly`);
      console.log(`   ‚Ä¢ Check console for rebuild notifications`);
    });

    // Handle graceful shutdown
    process.on('SIGINT', () => {
      console.log('\nüõë Shutting down development server...');
      server.close(() => {
        console.log('‚úÖ Server stopped');
        process.exit(0);
      });
    });

    return server;
  }

  async performBuild() {
    if (this.buildInProgress) {
      this.log('Build already in progress, skipping...');
      return;
    }

    this.buildInProgress = true;
    console.log('üîß Building website...');

    try {
      await this.builder.build();
      console.log('‚úÖ Build completed successfully');
    } catch (error) {
      console.error('‚ùå Build failed:', error.message);
    } finally {
      this.buildInProgress = false;
    }
  }

  startFileWatcher() {
    console.log('üëÄ Starting file watcher...');

    // Initialize file tracking
    this.scanWatchedFiles();

    // Start watching
    setInterval(() => {
      this.checkForChanges();
    }, this.config.watchInterval);

    this.log(`Watching ${this.watchedFiles.size} files for changes`);
  }

  scanWatchedFiles() {
    this.watchedFiles.clear();

    for (const watchDir of this.watchDirs) {
      if (fs.existsSync(watchDir)) {
        this.scanDirectory(watchDir);
      }
    }
  }

  scanDirectory(dir) {
    try {
      const items = fs.readdirSync(dir);

      for (const item of items) {
        const fullPath = path.join(dir, item);
        const stats = fs.statSync(fullPath);

        if (stats.isDirectory()) {
          this.scanDirectory(fullPath); // Recursive
        } else if (this.shouldWatchFile(fullPath)) {
          this.watchedFiles.set(fullPath, stats.mtime.getTime());
        }
      }
    } catch (error) {
      this.log(`Error scanning directory ${dir}:`, error.message);
    }
  }

  shouldWatchFile(filePath) {
    const ext = path.extname(filePath).toLowerCase();
    return ['.html', '.css', '.ts', '.js', '.md'].includes(ext);
  }

  checkForChanges() {
    let hasChanges = false;
    const changedFiles = [];

    for (const [filePath, lastModified] of this.watchedFiles.entries()) {
      try {
        if (fs.existsSync(filePath)) {
          const stats = fs.statSync(filePath);
          const currentModified = stats.mtime.getTime();

          if (currentModified > lastModified) {
            hasChanges = true;
            changedFiles.push(filePath);
            this.watchedFiles.set(filePath, currentModified);
          }
        } else {
          // File was deleted
          this.watchedFiles.delete(filePath);
          hasChanges = true;
          changedFiles.push(`${filePath} (deleted)`);
        }
      } catch (error) {
        this.log(`Error checking file ${filePath}:`, error.message);
      }
    }

    // Check for new files
    this.scanWatchedFiles();

    if (hasChanges) {
      console.log(`\nüìù Changes detected in ${changedFiles.length} file(s):`);
      changedFiles.forEach(file => {
        const relativePath = path.relative(this.config.srcDir, file);
        console.log(`   üîÑ ${relativePath}`);
      });

      console.log('üîß Rebuilding...');
      this.performBuild();
    }
  }

  handleRequest(req, res) {
    const timestamp = new Date().toISOString();
    let urlPath = req.url;

    // Remove query parameters
    const queryIndex = urlPath.indexOf('?');
    if (queryIndex !== -1) {
      urlPath = urlPath.substring(0, queryIndex);
    }

    // Remove leading slash
    urlPath = urlPath.substring(1);

    // Handle root - serve file browser
    if (!urlPath || urlPath === '/') {
      return this.serveFileBrowser(res);
    }

    // Handle live reload endpoint
    if (urlPath === '_dev/reload') {
      return this.handleReloadEndpoint(req, res);
    }

    // Security: prevent directory traversal
    if (urlPath.includes('..') || urlPath.includes('~')) {
      return this.sendError(res, 403, 'Forbidden', req.url);
    }

    const filePath = path.join(this.config.distDir, urlPath);

    // Check if file exists
    if (!fs.existsSync(filePath)) {
      return this.sendError(res, 404, 'File Not Found', req.url);
    }

    // Check if it's a file
    const stats = fs.statSync(filePath);
    if (!stats.isFile()) {
      return this.sendError(res, 404, 'Not a File', req.url);
    }

    try {
      let content = fs.readFileSync(filePath);
      const mimeType = this.getMimeType(filePath);

      // Inject live reload script into HTML files
      if (this.config.autoReload && mimeType === 'text/html') {
        content = this.injectLiveReload(content.toString());
      }

      // Set headers
      res.setHeader('Access-Control-Allow-Origin', '*');
      res.setHeader('Content-Type', mimeType);

      // No caching in development
      res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
      res.setHeader('Pragma', 'no-cache');
      res.setHeader('Expires', '0');

      res.statusCode = 200;
      res.end(content);

      console.log(`üìÑ ${req.method} ${req.url} - 200 (${this.formatFileSize(content.length)})`);
    } catch (error) {
      console.error(`‚ùå Error serving ${urlPath}:`, error.message);
      this.sendError(res, 500, 'Internal Server Error', req.url);
    }
  }

  injectLiveReload(htmlContent) {
    const liveReloadScript = `
    <script>
      // PrismWeave Development Live Reload
      (function() {
        let lastCheck = Date.now();
        
        function checkForUpdates() {
          fetch('/_dev/reload?t=' + Date.now())
            .then(response => response.json())
            .then(data => {
              if (data.lastBuild > lastCheck) {
                console.log('üîÑ Changes detected, reloading page...');
                setTimeout(() => location.reload(), 100);
              }
              lastCheck = Date.now();
            })
            .catch(() => {
              // Server might be restarting, try again
            });
        }
        
        // Check every 2 seconds
        setInterval(checkForUpdates, 2000);
        
        console.log('üîß PrismWeave Development Mode - Live reload active');
        
        // Add visual indicator
        const indicator = document.createElement('div');
        indicator.style.cssText = \`
          position: fixed; top: 10px; right: 10px; 
          background: #28a745; color: white; 
          padding: 5px 10px; border-radius: 15px; 
          font-size: 12px; font-family: monospace; 
          z-index: 9999; box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        \`;
        indicator.textContent = 'üîß DEV MODE';
        document.body.appendChild(indicator);
      })();
    </script>
    `;

    // Inject before closing body tag
    if (htmlContent.includes('</body>')) {
      return htmlContent.replace('</body>', liveReloadScript + '\n</body>');
    } else {
      // No body tag, append at end
      return htmlContent + liveReloadScript;
    }
  }

  handleReloadEndpoint(req, res) {
    const data = {
      timestamp: Date.now(),
      lastBuild: this.lastBuildTime || Date.now(),
      server: 'PrismWeave Development Server',
    };

    res.setHeader('Content-Type', 'application/json');
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.statusCode = 200;
    res.end(JSON.stringify(data));
  }

  serveFileBrowser(res) {
    // Get list of HTML files
    const htmlFiles = [];

    if (fs.existsSync(this.config.distDir)) {
      const files = fs.readdirSync(this.config.distDir);
      files.forEach(file => {
        if (file.endsWith('.html')) {
          const filePath = path.join(this.config.distDir, file);
          const stats = fs.statSync(filePath);
          htmlFiles.push({
            name: file,
            size: this.formatFileSize(stats.size),
            modified: stats.mtime.toISOString(),
          });
        }
      });
    }

    const browserHtml = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PrismWeave Development Server</title>
    <style>
        body { 
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
          max-width: 1000px; margin: 50px auto; padding: 20px; line-height: 1.6; 
          background: #f8f9fa;
        }
        .header { 
          text-align: center; margin-bottom: 40px; background: white; 
          padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .logo { font-size: 2.5em; margin-bottom: 10px; }
        .status { 
          display: inline-block; padding: 5px 15px; background: #28a745; 
          color: white; border-radius: 15px; font-size: 0.9em; margin-bottom: 10px;
        }
        .grid { 
          display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); 
          gap: 20px; margin: 30px 0; 
        }
        .card { 
          background: white; padding: 25px; border-radius: 8px; 
          box-shadow: 0 2px 10px rgba(0,0,0,0.1); border-left: 4px solid #007bff;
        }
        .card h3 { margin-top: 0; color: #007bff; }
        .file-list { list-style: none; padding: 0; }
        .file-item { 
          margin: 10px 0; padding: 15px; background: #f8f9fa; 
          border-radius: 6px; border-left: 3px solid #28a745;
        }
        .file-link { 
          color: #007bff; text-decoration: none; font-weight: 600; 
          font-size: 1.1em; display: block; margin-bottom: 5px;
        }
        .file-link:hover { text-decoration: underline; }
        .file-meta { font-size: 0.85em; color: #6c757d; }
        .dev-info { 
          background: #fff3cd; border: 1px solid #ffeaa7; 
          padding: 20px; border-radius: 8px; margin: 20px 0; 
        }
        .dev-info h4 { margin-top: 0; color: #856404; }
        .feature-list { 
          display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); 
          gap: 15px; margin: 20px 0; 
        }
        .feature { 
          background: #e7f3ff; padding: 15px; border-radius: 6px; 
          border-left: 3px solid #007bff; 
        }
        .feature strong { color: #0056b3; }
        .logs { 
          background: #f8f9fa; padding: 20px; border-radius: 8px; 
          font-family: monospace; font-size: 0.9em; margin: 20px 0;
          border-left: 4px solid #6c757d; max-height: 200px; overflow-y: auto;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">üîß PrismWeave Development Server</div>
        <div class="status">üî¥ LIVE</div>
        <p>Local development environment with live reloading</p>
        <small>Server: http://${this.config.host}:${this.config.port}/ ‚Ä¢ Auto-rebuild: ${this.config.autoReload ? 'ON' : 'OFF'}</small>
    </div>
    
    <div class="grid">
        <div class="card">
            <h3>üì± Website Pages</h3>
            <ul class="file-list">
                ${htmlFiles
                  .map(
                    file => `
                    <li class="file-item">
                        <a href="/${file.name}" class="file-link">${file.name}</a>
                        <div class="file-meta">
                            Size: ${file.size} ‚Ä¢ Modified: ${new Date(file.modified).toLocaleString()}
                        </div>
                    </li>
                `
                  )
                  .join('')}
                ${htmlFiles.length === 0 ? '<li class="file-item">No HTML files found. Build the project first.</li>' : ''}
            </ul>
        </div>
        
        <div class="card">
            <h3>üõ†Ô∏è Development Features</h3>
            <div class="feature-list">
                <div class="feature">
                    <strong>üîÑ Auto-rebuild</strong><br>
                    Files rebuild automatically when you save changes
                </div>
                <div class="feature">
                    <strong>üì± Live reload</strong><br>
                    Pages refresh automatically after rebuilds
                </div>
                <div class="feature">
                    <strong>üëÄ File watching</strong><br>
                    Monitors HTML, CSS, TypeScript files
                </div>
                <div class="feature">
                    <strong>üö´ No caching</strong><br>
                    Always serves fresh content during development
                </div>
            </div>
        </div>
    </div>
    
    <div class="dev-info">
        <h4>üéØ Development Workflow</h4>
        <ol>
            <li><strong>Edit files:</strong> Modify HTML, CSS, or TypeScript files in the <code>src/</code> directory</li>
            <li><strong>Auto-build:</strong> Server detects changes and rebuilds automatically</li>
            <li><strong>Live reload:</strong> Browser refreshes to show your changes</li>
            <li><strong>Test:</strong> Click on any page above to test your changes</li>
        </ol>
        <p><strong>üí° Tip:</strong> Keep this tab open to monitor build status and navigate between pages</p>
    </div>
    
    <div class="logs">
        <strong>üîç Watch Status:</strong><br>
        Watching: ${this.watchDirs.length} directories<br>
        Files tracked: ${this.watchedFiles.size}<br>
        Check interval: ${this.config.watchInterval}ms<br>
        Last check: ${new Date().toLocaleTimeString()}
    </div>

    ${this.injectLiveReload('')}
</body>
</html>`;

    res.writeHead(200, { 'Content-Type': 'text/html' });
    res.end(browserHtml);
  }

  sendError(res, statusCode, message, originalUrl = 'Unknown') {
    res.statusCode = statusCode;
    res.setHeader('Content-Type', 'text/html');

    const errorHtml = `<!DOCTYPE html>
<html lang="en">
<head>
    <title>Error ${statusCode}</title>
    <style>
        body { 
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
          text-align: center; padding: 50px; background: #f8f9fa; color: #343a40;
        }
        .container {
          max-width: 600px; margin: 0 auto; background: white; padding: 40px;
          border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 { color: #e74c3c; margin-bottom: 20px; font-size: 3rem; }
        .details { 
          background: #f8f9fa; padding: 20px; border-radius: 4px; margin: 20px 0;
          text-align: left; font-family: monospace; font-size: 0.9rem;
        }
        a { 
          display: inline-block; margin: 10px; padding: 12px 24px; 
          background: #007bff; color: white; border-radius: 4px; 
          text-decoration: none;
        }
        a:hover { background: #0056b3; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Error ${statusCode}</h1>
        <p>${message}</p>
        <div class="details">
            <strong>Requested URL:</strong> ${originalUrl}<br>
            <strong>Timestamp:</strong> ${new Date().toISOString()}<br>
            <strong>Server:</strong> PrismWeave Development Server
        </div>
        <a href="/">‚Üê Back to File Browser</a>
    </div>
</body>
</html>`;

    res.end(errorHtml);
    console.log(`‚ùå ${statusCode} ${message} - ${originalUrl}`);
  }

  formatFileSize(bytes) {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
  }
}

// Command line interface
function main() {
  const args = process.argv.slice(2);
  const config = {};

  // Parse command line arguments
  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    if (arg === '--port' || arg === '-p') {
      config.port = parseInt(args[++i]) || 3000;
    } else if (arg === '--host' || arg === '-h') {
      config.host = args[++i] || 'localhost';
    } else if (arg === '--no-reload') {
      config.autoReload = false;
    } else if (arg === '--watch-interval') {
      config.watchInterval = parseInt(args[++i]) || 500;
    } else if (arg === '--quiet') {
      config.verbose = false;
    } else if (arg === '--help') {
      console.log(`
PrismWeave Development Server

Usage: node serve-dev.js [options]

Options:
  --port, -p <number>      Port to listen on (default: 3000)
  --host, -h <string>      Host to bind to (default: localhost)
  --no-reload              Disable auto-reload and file watching
  --watch-interval <ms>    File watch check interval (default: 500)
  --quiet                  Disable verbose logging
  --help                   Show this help message

Examples:
  node serve-dev.js                      # Start on localhost:3000
  node serve-dev.js -p 8080             # Start on port 8080
  node serve-dev.js --no-reload         # Disable live reload
  node serve-dev.js --watch-interval 1000 # Check for changes every second
  node serve-dev.js --quiet             # Quiet mode
      `);
      process.exit(0);
    }
  }

  const server = new PrismWeaveDevelopmentServer(config);
  server.start().catch(error => {
    console.error('‚ùå Failed to start development server:', error);
    process.exit(1);
  });
}

// Execute if called directly
if (require.main === module) {
  main();
}

module.exports = { PrismWeaveDevelopmentServer };
