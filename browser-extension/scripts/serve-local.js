#!/usr/bin/env node

// Local Testing Server for PrismWeave Bookmarklet
// Generated by Copilot for PrismWeave project
// Serves the bookmarklet files locally for testing

const http = require('http');
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

class LocalTestingServer {
  constructor(config = {}) {
    this.config = {
      port: 8080,
      host: 'localhost',
      distDir: path.join(__dirname, '../dist/bookmarklet'),
      autoRebuild: true,
      debug: true, // Enable debug logging
      ...config,
    };

    // Debug logging helper
    this.debug = (...args) => {
      if (this.config.debug) {
        console.log(`üîç [DEBUG]`, ...args);
      }
    };
  }

  getMimeType(filePath) {
    const ext = path.extname(filePath).toLowerCase();
    const mimeTypes = {
      '.html': 'text/html',
      '.js': 'application/javascript',
      '.css': 'text/css',
      '.json': 'application/json',
      '.md': 'text/markdown',
      '.txt': 'text/plain',
      '.png': 'image/png',
      '.jpg': 'image/jpeg',
      '.svg': 'image/svg+xml',
    };
    return mimeTypes[ext] || 'application/octet-stream';
  }

  async start() {
    console.log('üöÄ Starting PrismWeave Local Testing Server...');
    this.debug(`Server config:`, this.config);
    this.debug(`Distribution directory: ${this.config.distDir}`);

    // Check if dist directory exists
    if (!fs.existsSync(this.config.distDir)) {
      console.error(`‚ùå Distribution directory does not exist: ${this.config.distDir}`);
      console.log('üí° Creating directory and running build...');
      fs.mkdirSync(this.config.distDir, { recursive: true });
    }

    // List available files for debugging
    this.debug('üìÇ Available files in dist directory:');
    try {
      const files = fs.readdirSync(this.config.distDir);
      files.forEach(file => {
        const filePath = path.join(this.config.distDir, file);
        const stats = fs.statSync(filePath);
        const type = stats.isDirectory() ? 'üìÅ' : 'üìÑ';
        const size = stats.isFile() ? ` (${Math.round((stats.size / 1024) * 10) / 10}KB)` : '';
        this.debug(`   ${type} ${file}${size}`);
      });
    } catch (error) {
      console.error('‚ùå Error reading dist directory:', error.message);
    }

    // Build first if needed
    if (this.config.autoRebuild) {
      console.log('üîß Building hybrid bookmarklet for local development...');
      try {
        execSync('npm run build:bookmarklet:local', {
          cwd: path.join(__dirname, '..'),
          stdio: 'inherit',
        });

        // List files again after build
        this.debug('üìÇ Files after build:');
        const files = fs.readdirSync(this.config.distDir);
        files.forEach(file => {
          this.debug(`   üìÑ ${file}`);
        });
      } catch (error) {
        console.error('‚ùå Build failed:', error.message);
        process.exit(1);
      }
    }

    const server = http.createServer((req, res) => {
      this.handleRequest(req, res);
    });

    server.listen(this.config.port, this.config.host, () => {
      console.log(`‚úÖ Server running at http://${this.config.host}:${this.config.port}/`);
      console.log('üìÇ Available endpoints:');
      console.log(`   üè† http://${this.config.host}:${this.config.port}/ - Server root`);
      console.log(
        `   ‚ö° http://${this.config.host}:${this.config.port}/hybrid-loader.js - Loader bookmarklet`
      );
      console.log(
        `   üöÄ http://${this.config.host}:${this.config.port}/enhanced-runtime.js - Runtime script`
      );
      console.log(
        `   üìä http://${this.config.host}:${this.config.port}/build-analytics.json - Build stats`
      );
      console.log('\nüí° Tips:');
      console.log('   ‚Ä¢ Open the installation page to get the bookmarklet');
      console.log('   ‚Ä¢ Use Ctrl+C to stop the server');
      console.log(
        `   ‚Ä¢ Runtime will be served from: http://${this.config.host}:${this.config.port}/enhanced-runtime.js`
      );

      if (this.config.debug) {
        console.log('   ‚Ä¢ Debug logging is enabled');

        // Test file accessibility
        console.log('\nüîç Server startup diagnostics:');
        const testFiles = ['hybrid-loader.js', 'enhanced-runtime.js', 'build-analytics.json'];

        testFiles.forEach(file => {
          const fullPath = path.join(this.config.distDir, file);
          if (fs.existsSync(fullPath)) {
            const stats = fs.statSync(fullPath);
            console.log(`   ‚úÖ ${file} (${Math.round((stats.size / 1024) * 10) / 10}KB)`);
          } else {
            console.log(`   ‚ùå ${file} (missing)`);
          }
        });
      }
    });

    // Handle graceful shutdown
    process.on('SIGINT', () => {
      console.log('\nüõë Shutting down server...');
      server.close(() => {
        console.log('‚úÖ Server stopped');
        process.exit(0);
      });
    });

    return server;
  }

  handleRequest(req, res) {
    const timestamp = new Date().toISOString();
    let filePath = req.url;

    this.debug(`üì• Incoming request: ${req.method} ${req.url}`);
    this.debug(`   User-Agent: ${req.headers['user-agent'] || 'Unknown'}`);
    this.debug(`   Referer: ${req.headers.referer || 'None'}`);

    // Remove query parameters
    const queryIndex = filePath.indexOf('?');
    if (queryIndex !== -1) {
      const queryParams = filePath.substring(queryIndex);
      filePath = filePath.substring(0, queryIndex);
      this.debug(`   Query parameters: ${queryParams}`);
    }

    this.debug(`   Clean path: ${filePath}`);

    // Remove leading slash and handle root
    filePath = filePath.substring(1);
    if (!filePath || filePath === '/') {
      // Serve a simple default page
      this.debug(`   Serving default page for root request`);
      return this.serveDefaultPage(res);
    }

    this.debug(`   Final file path: ${filePath}`);

    // Security: prevent directory traversal
    if (filePath.includes('..') || filePath.includes('~')) {
      this.debug(`   ‚ö†Ô∏è Security violation: directory traversal attempt`);
      this.sendError(res, 403, 'Forbidden', req.url);
      return;
    }

    const fullPath = path.join(this.config.distDir, filePath);
    this.debug(`   Full system path: ${fullPath}`);

    // Check if file exists
    if (!fs.existsSync(fullPath)) {
      this.debug(`   ‚ùå File does not exist: ${fullPath}`);

      // List available files for debugging
      this.debug(`   üìÇ Available files in directory:`);
      try {
        const availableFiles = fs.readdirSync(this.config.distDir);
        availableFiles.forEach(file => {
          this.debug(`      üìÑ ${file}`);
        });
      } catch (error) {
        this.debug(`   ‚ùå Could not list directory: ${error.message}`);
      }

      this.sendError(res, 404, 'Not Found', req.url);
      return;
    }

    // Check if it's a file (not directory)
    const stats = fs.statSync(fullPath);
    if (!stats.isFile()) {
      this.debug(
        `   ‚ùå Path is not a file: ${fullPath} (${stats.isDirectory() ? 'directory' : 'other'})`
      );
      this.sendError(res, 404, 'Not Found', req.url);
      return;
    }

    this.debug(`   ‚úÖ File found: ${fullPath} (${Math.round((stats.size / 1024) * 10) / 10}KB)`);

    try {
      const content = fs.readFileSync(fullPath);
      const mimeType = this.getMimeType(fullPath);

      this.debug(`   üì§ Serving file: ${mimeType}, ${content.length} bytes`);

      // Add CORS headers for cross-origin requests
      res.setHeader('Access-Control-Allow-Origin', '*');
      res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
      res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

      // Add caching headers for static assets
      if (filePath.endsWith('.js') || filePath.endsWith('.css')) {
        res.setHeader('Cache-Control', 'public, max-age=300'); // 5 minutes
        this.debug(`   üïí Cache headers added (5 minutes)`);
      }

      res.setHeader('Content-Type', mimeType);
      res.statusCode = 200;
      res.end(content);

      console.log(
        `üìÑ ${timestamp} - ${req.method} ${req.url} - 200 (${Math.round((content.length / 1024) * 10) / 10}KB)`
      );
    } catch (error) {
      console.error(`‚ùå Error serving ${filePath}:`, error.message);
      this.debug(`   Full error: ${error.stack}`);
      this.sendError(res, 500, 'Internal Server Error', req.url);
    }
  }

  serveDefaultPage(res) {
    // Try to read the bookmarklet code
    let bookmarkletCode = '';
    try {
      const loaderPath = path.join(this.config.distDir, 'hybrid-loader.js');
      if (fs.existsSync(loaderPath)) {
        bookmarkletCode = fs.readFileSync(loaderPath, 'utf8');
      }
    } catch (error) {
      this.debug('Could not read bookmarklet code:', error.message);
    }

    const defaultHtml = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PrismWeave Bookmarklet Server</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
               max-width: 800px; margin: 50px auto; padding: 20px; line-height: 1.6; }
        .header { text-align: center; margin-bottom: 40px; }
        .logo { font-size: 2em; margin-bottom: 10px; }
        .bookmarklet-section { background: #e8f4fd; padding: 20px; border-radius: 8px; margin: 20px 0; 
                              border-left: 4px solid #0066cc; }
        .bookmarklet-link { display: inline-block; padding: 12px 24px; background: #0066cc; 
                           color: white; text-decoration: none; border-radius: 6px; font-weight: bold;
                           margin: 10px 0; cursor: move; }
        .bookmarklet-link:hover { background: #0052a3; }
        .install-instructions { background: #fff9e6; padding: 15px; border-radius: 6px; 
                               border-left: 4px solid #ffa500; margin: 15px 0; }
        .files { background: #f5f5f5; padding: 20px; border-radius: 8px; margin: 20px 0; }
        .file-link { display: block; margin: 10px 0; padding: 10px; background: white; 
                     border-radius: 4px; text-decoration: none; color: #0066cc; }
        .file-link:hover { background: #e6f3ff; }
        .status-indicator { display: inline-block; width: 10px; height: 10px; 
                           background: #4CAF50; border-radius: 50%; margin-right: 8px; }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">üìö PrismWeave Bookmarklet Server</div>
        <div><span class="status-indicator"></span>Server running at http://localhost:${this.config.port}/</div>
        <p>Local development server for PrismWeave hybrid bookmarklet system.</p>
    </div>
    
    ${
      bookmarkletCode
        ? `
    <div class="bookmarklet-section">
        <h3>üîó Install PrismWeave Bookmarklet</h3>
        <p><strong>Drag this link to your bookmarks bar:</strong></p>
        <a href="${bookmarkletCode}" class="bookmarklet-link" draggable="true">üìö PrismWeave</a>
        
        <div class="install-instructions">
            <h4>üìã Installation Instructions:</h4>
            <ol>
                <li><strong>Drag and Drop:</strong> Drag the blue "PrismWeave" button above to your browser's bookmarks bar</li>
                <li><strong>Alternative:</strong> Right-click the button ‚Üí "Bookmark this link" or "Add to bookmarks"</li>
                <li><strong>Usage:</strong> Click the bookmark on any webpage to capture and save content</li>
            </ol>
            <p><strong>üí° Tip:</strong> Make sure your bookmarks bar is visible (Ctrl+Shift+B in most browsers)</p>
        </div>
    </div>
    `
        : '<div class="install-instructions"><p>‚ö†Ô∏è Bookmarklet code not available. Please build the project first.</p></div>'
    }
    
    <div class="files">
        <h3>üìÅ Available Files:</h3>
        <a href="/hybrid-loader.js" class="file-link">üìÑ hybrid-loader.js - Bookmarklet loader</a>
        <a href="/enhanced-runtime.js" class="file-link">‚ö° enhanced-runtime.js - Runtime script</a>
        <a href="/build-analytics.json" class="file-link">üìä build-analytics.json - Build stats</a>
    </div>
    
    <div>
        <h3>üöÄ Development Info:</h3>
        <p>The hybrid bookmarklet system loads a lightweight loader (~1KB) that dynamically fetches the full runtime (~126KB) from this server.</p>
        <p><strong>Runtime served from:</strong> <code>http://localhost:${this.config.port}/enhanced-runtime.js</code></p>
        <p><strong>Auto-rebuild:</strong> ${this.config.autoRebuild ? '‚úÖ Enabled' : '‚ùå Disabled'}</p>
        <p><strong>Debug logging:</strong> ${this.config.debug ? '‚úÖ Enabled' : '‚ùå Disabled'}</p>
    </div>
</body>
</html>`;

    res.writeHead(200, { 'Content-Type': 'text/html' });
    res.end(defaultHtml);
  }

  sendError(res, statusCode, message, originalUrl = 'Unknown') {
    const timestamp = new Date().toISOString();

    this.debug(`   ‚ùå Sending error: ${statusCode} ${message} for ${originalUrl}`);

    res.statusCode = statusCode;
    res.setHeader('Content-Type', 'text/html');
    res.end(`
      <!DOCTYPE html>
      <html>
      <head>
          <title>Error ${statusCode}</title>
          <style>
              body { 
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                text-align: center; 
                padding: 50px; 
                background: #f8f9fa;
                color: #343a40;
              }
              .container {
                max-width: 600px;
                margin: 0 auto;
                background: white;
                padding: 40px;
                border-radius: 8px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
              }
              h1 { 
                color: #e74c3c; 
                margin-bottom: 20px;
                font-size: 3rem;
              }
              p { 
                color: #666; 
                margin-bottom: 15px;
                font-size: 1.1rem;
              }
              .details {
                background: #f8f9fa;
                padding: 20px;
                border-radius: 4px;
                margin: 20px 0;
                text-align: left;
                font-family: monospace;
                font-size: 0.9rem;
              }
              a { 
                color: #3498db; 
                text-decoration: none;
                font-weight: bold;
              }
              a:hover { 
                text-decoration: underline; 
              }
              .links {
                margin-top: 30px;
              }
              .links a {
                display: inline-block;
                margin: 10px;
                padding: 12px 24px;
                background: #3498db;
                color: white;
                border-radius: 4px;
                text-decoration: none;
              }
              .links a:hover {
                background: #2980b9;
                text-decoration: none;
              }
          </style>
      </head>
      <body>
          <div class="container">
              <h1>Error ${statusCode}</h1>
              <p>${message}</p>
              <div class="details">
                  <strong>Requested URL:</strong> ${originalUrl}<br>
                  <strong>Timestamp:</strong> ${timestamp}<br>
                  <strong>Server:</strong> PrismWeave Local Testing Server
              </div>
              <div class="links">
                  <a href="/">‚Üê Installation & Test Page</a>
                  <a href="/build-analytics.json">üìä Build Stats</a>
              </div>
          </div>
          
          <script>
            // Auto-refresh available files for debugging
            if (${statusCode} === 404) {
              console.log('üîç 404 Error Debug Info:');
              console.log('Requested URL:', '${originalUrl}');
              console.log('Timestamp:', '${timestamp}');
              console.log('Available endpoints:');
              console.log('  ‚Ä¢ http://localhost:8080/ (Installation & Test)');
              console.log('  ‚Ä¢ http://localhost:8080/hybrid-loader.js (Loader)');
              console.log('  ‚Ä¢ http://localhost:8080/enhanced-runtime.js (Runtime)');
              console.log('  ‚Ä¢ http://localhost:8080/build-analytics.json (Stats)');
            }
          </script>
      </body>
      </html>
    `);

    console.log(`‚ùå ${timestamp} - ${statusCode} ${message} - ${originalUrl}`);
  }
}

// Command line interface
function main() {
  const args = process.argv.slice(2);
  const config = {};

  // Parse command line arguments
  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    if (arg === '--port' || arg === '-p') {
      config.port = parseInt(args[++i]) || 8080;
    } else if (arg === '--host' || arg === '-h') {
      config.host = args[++i] || 'localhost';
    } else if (arg === '--no-rebuild') {
      config.autoRebuild = false;
    } else if (arg === '--debug') {
      config.debug = true;
    } else if (arg === '--no-debug') {
      config.debug = false;
    } else if (arg === '--help') {
      console.log(`
PrismWeave Local Testing Server

Usage: node serve-local.js [options]

Options:
  --port, -p <number>    Port to listen on (default: 8080)
  --host, -h <string>    Host to bind to (default: localhost)
  --no-rebuild           Skip automatic rebuild before serving
  --debug                Enable verbose debug logging
  --no-debug             Disable debug logging
  --help                 Show this help message

Examples:
  node serve-local.js                     # Start on localhost:8080
  node serve-local.js -p 3000            # Start on port 3000
  node serve-local.js -h 0.0.0.0 -p 8080 # Listen on all interfaces
  node serve-local.js --no-rebuild        # Skip rebuild
  node serve-local.js --debug             # Enable verbose logging
  node serve-local.js --no-debug          # Quiet mode
      `);
      process.exit(0);
    }
  }

  const server = new LocalTestingServer(config);
  server.start().catch(error => {
    console.error('‚ùå Failed to start server:', error);
    process.exit(1);
  });
}

// Execute if called directly
if (require.main === module) {
  main();
}

module.exports = { LocalTestingServer };
