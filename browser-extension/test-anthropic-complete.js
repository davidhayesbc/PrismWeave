// Generated by Copilot
// Comprehensive test for the Anthropic content extraction fix
// Run this in the browser console on https://www.anthropic.com/research/project-vend-1?utm_source=tldrwebdev

console.log('🧪 Testing Complete Anthropic Content Extraction Pipeline...');

async function testCompleteExtractionPipeline() {
  try {
    console.log('1️⃣ Loading ContentExtractor...');

    // Check if our extension is loaded
    if (!window.contentExtractor) {
      console.log('⚠️  ContentExtractor not found in window. Trying to inject...');
      // The content script should have set this up
      return {
        success: false,
        error: 'ContentExtractor not available - extension may not be loaded',
      };
    }

    console.log('2️⃣ Running content extraction...');

    // Extract content using our actual extractor
    const extractionResult = await window.contentExtractor.extractContent({
      domain: window.location.hostname,
      isResearchPage: true,
      removeAds: true,
      removeNavigation: true,
      preserveFormatting: true,
    });

    console.log('✅ Extraction completed!');
    console.log('📊 Results:', {
      contentLength: extractionResult.content?.length || 0,
      wordCount: extractionResult.wordCount || 0,
      readingTime: extractionResult.readingTime || 0,
    });

    // Analyze the results
    const content = extractionResult.content || '';
    const cleanedContent = extractionResult.cleanedContent || '';
    const wordCount = extractionResult.wordCount || 0;

    console.log('\n3️⃣ Analyzing extraction quality...');

    // Check for research content indicators
    const hasProjectVend =
      content.toLowerCase().includes('project vend') || content.toLowerCase().includes('vend');
    const hasResearchTerms =
      content.toLowerCase().includes('research') ||
      content.toLowerCase().includes('evaluation') ||
      content.toLowerCase().includes('model');
    const hasSubstantialContent = wordCount > 1000;
    const hasGoodStructure = content.includes('<h') || content.includes('##');

    console.log(`📋 Content Quality Analysis:`);
    console.log(`   Contains "Project VEND": ${hasProjectVend ? '✅' : '❌'}`);
    console.log(`   Contains research terms: ${hasResearchTerms ? '✅' : '❌'}`);
    console.log(`   Has substantial content (>1000 words): ${hasSubstantialContent ? '✅' : '❌'}`);
    console.log(`   Has good structure: ${hasGoodStructure ? '✅' : '❌'}`);
    console.log(`   Word count: ${wordCount}`);

    // Check metadata
    if (extractionResult.metadata) {
      console.log('\n4️⃣ Metadata analysis...');
      console.log(`   Title: ${extractionResult.metadata.title || 'Not found'}`);
      console.log(`   Description: ${extractionResult.metadata.description || 'Not found'}`);
      console.log(`   URL: ${extractionResult.metadata.url || 'Not found'}`);
    }

    // Success criteria
    const isSuccessful = hasProjectVend && hasResearchTerms && hasSubstantialContent;

    console.log(`\n🎯 Overall Result: ${isSuccessful ? '✅ SUCCESS' : '❌ NEEDS IMPROVEMENT'}`);

    if (isSuccessful) {
      console.log('🎉 The extraction fix is working! Research content is being properly captured.');
      console.log(`📈 Captured ${wordCount} words of research content.`);
    } else {
      console.log('⚠️  The extraction may need further adjustment.');
      if (!hasProjectVend) console.log('   - Missing Project VEND content');
      if (!hasResearchTerms) console.log('   - Missing research terminology');
      if (!hasSubstantialContent) console.log('   - Insufficient content length');
    }

    // Show sample content
    console.log('\n📝 Sample extracted content:');
    const sampleContent = cleanedContent || content;
    console.log(sampleContent.substring(0, 800) + '...');

    return {
      success: isSuccessful,
      wordCount: wordCount,
      hasProjectVend: hasProjectVend,
      hasResearchTerms: hasResearchTerms,
      hasSubstantialContent: hasSubstantialContent,
      hasGoodStructure: hasGoodStructure,
      extractionResult: extractionResult,
    };
  } catch (error) {
    console.error('❌ Extraction test failed:', error);
    return {
      success: false,
      error: error.message,
    };
  }
}

// Also test the content script message system
async function testContentScriptCommunication() {
  console.log('\n🔄 Testing content script communication...');

  try {
    // Test ping
    const pingResponse = await new Promise((resolve, reject) => {
      const timeout = setTimeout(() => reject(new Error('Ping timeout')), 5000);

      chrome.runtime.sendMessage({ type: 'PING' }, response => {
        clearTimeout(timeout);
        if (chrome.runtime.lastError) {
          reject(new Error(chrome.runtime.lastError.message));
        } else {
          resolve(response);
        }
      });
    });

    console.log('✅ Content script communication working:', pingResponse);

    // Test extraction via message
    const extractionResponse = await new Promise((resolve, reject) => {
      const timeout = setTimeout(() => reject(new Error('Extraction timeout')), 15000);

      chrome.runtime.sendMessage(
        {
          type: 'EXTRACT_AND_CONVERT_TO_MARKDOWN',
          data: {
            extractionRules: ['main', 'article', '.content'],
            includeImages: true,
            cleanHtml: true,
            convertToMarkdown: true,
            isResearchPage: true,
            domain: window.location.hostname,
          },
        },
        response => {
          clearTimeout(timeout);
          if (chrome.runtime.lastError) {
            reject(new Error(chrome.runtime.lastError.message));
          } else {
            resolve(response);
          }
        }
      );
    });

    console.log('✅ Extraction via message working');
    console.log('📊 Message extraction results:', {
      success: extractionResponse?.success,
      dataLength: extractionResponse?.data?.markdown?.length || 0,
      wordCount: (extractionResponse?.data?.markdown || '').split(/\s+/).length,
    });

    return {
      communicationWorking: true,
      extractionWorking: extractionResponse?.success || false,
      messageWordCount: (extractionResponse?.data?.markdown || '').split(/\s+/).length,
    };
  } catch (error) {
    console.error('❌ Content script communication failed:', error);
    return {
      communicationWorking: false,
      error: error.message,
    };
  }
}

// Run both tests
async function runAllTests() {
  console.log('🚀 Starting comprehensive Anthropic extraction tests...\n');

  const extractionTest = await testCompleteExtractionPipeline();
  const communicationTest = await testContentScriptCommunication();

  console.log('\n📋 FINAL TEST SUMMARY:');
  console.log('========================');
  console.log(`Content Extraction: ${extractionTest.success ? '✅ PASS' : '❌ FAIL'}`);
  console.log(
    `Content Script Communication: ${communicationTest.communicationWorking ? '✅ PASS' : '❌ FAIL'}`
  );

  if (extractionTest.success && communicationTest.communicationWorking) {
    console.log('\n🎉 ALL TESTS PASSED! The Anthropic extraction fix is working correctly.');
    console.log(`📈 Successfully extracted ${extractionTest.wordCount} words of research content.`);
  } else {
    console.log('\n⚠️  Some tests failed. The fix may need further adjustment.');
  }

  return {
    extractionTest,
    communicationTest,
    allPassed: extractionTest.success && communicationTest.communicationWorking,
  };
}

// Auto-run the tests
runAllTests().catch(error => {
  console.error('❌ Test suite failed:', error);
});
