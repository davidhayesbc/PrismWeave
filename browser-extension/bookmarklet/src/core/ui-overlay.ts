// Generated by Copilot
// PrismWeave Bookmarklet UI Overlay - Provides user interface for bookmarklet functionality

import type { PrismWeaveBookmarklet } from './bookmarklet-main.js';

/**
 * UI overlay for the PrismWeave bookmarklet
 * Provides a non-intrusive interface for content capture and settings
 */
export class PrismWeaveOverlay {
  private container: HTMLElement | null = null;
  private isVisible = false;
  private bookmarklet: PrismWeaveBookmarklet;
  private settingsPanel: HTMLElement | null = null;

  constructor(bookmarklet: PrismWeaveBookmarklet) {
    this.bookmarklet = bookmarklet;
  }

  /**
   * Show the overlay
   */
  async show(): Promise<void> {
    if (this.container && this.isVisible) return;

    this.createOverlay();
    this.injectStyles();
    this.bindEvents();
    
    if (this.container) {
      document.body.appendChild(this.container);
      this.isVisible = true;
      
      // Animate in
      setTimeout(() => {
        if (this.container) {
          this.container.style.opacity = '1';
          this.container.style.transform = 'translateX(0)';
        }
      }, 10);
    }
  }

  /**
   * Hide the overlay
   */
  hide(): void {
    if (!this.container || !this.isVisible) return;

    // Animate out
    this.container.style.opacity = '0';
    this.container.style.transform = 'translateX(100%)';

    setTimeout(() => {
      if (this.container && this.container.parentNode) {
        this.container.parentNode.removeChild(this.container);
        this.isVisible = false;
      }
    }, 300);
  }

  /**
   * Toggle overlay visibility
   */
  toggle(): void {
    if (this.isVisible) {
      this.hide();
    } else {
      this.show();
    }
  }

  /**
   * Show settings panel
   */
  async showSettings(): Promise<void> {
    if (!this.container) return;

    // Hide main panel, show settings
    const mainPanel = this.container.querySelector('.prismweave-main-panel') as HTMLElement;
    if (mainPanel) mainPanel.style.display = 'none';

    if (!this.settingsPanel) {
      this.settingsPanel = this.createSettingsPanel();
      this.container.appendChild(this.settingsPanel);
    }

    this.settingsPanel.style.display = 'block';
  }

  /**
   * Hide settings panel and show main panel
   */
  hideSettings(): void {
    if (!this.container) return;

    const mainPanel = this.container.querySelector('.prismweave-main-panel') as HTMLElement;
    if (mainPanel) mainPanel.style.display = 'block';

    if (this.settingsPanel) {
      this.settingsPanel.style.display = 'none';
    }
  }

  /**
   * Create the overlay container and UI elements
   */
  private createOverlay(): void {
    this.container = document.createElement('div');
    this.container.id = 'prismweave-bookmarklet-overlay';
    this.container.className = 'prismweave-overlay';
    
    this.container.innerHTML = `
      <div class="prismweave-main-panel">
        <div class="prismweave-header">
          <div class="prismweave-logo">üé≠ PrismWeave</div>
          <button class="prismweave-close" title="Close">√ó</button>
        </div>
        
        <div class="prismweave-content">
          <div class="prismweave-page-info">
            <h3>${this.escapeHtml(document.title)}</h3>
            <p class="prismweave-url">${this.escapeHtml(window.location.href)}</p>
          </div>
          
          <div class="prismweave-actions">
            <button class="prismweave-btn prismweave-btn-primary prismweave-capture">
              üìÑ Capture Page
            </button>
            <button class="prismweave-btn prismweave-btn-secondary prismweave-settings">
              ‚öôÔ∏è Settings
            </button>
          </div>
          
          <div class="prismweave-status" style="display: none;">
            <div class="prismweave-status-text">Ready</div>
            <div class="prismweave-progress">
              <div class="prismweave-progress-bar"></div>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  /**
   * Create settings panel
   */
  private createSettingsPanel(): HTMLElement {
    const panel = document.createElement('div');
    panel.className = 'prismweave-settings-panel';
    panel.style.display = 'none';
    
    panel.innerHTML = `
      <div class="prismweave-header">
        <div class="prismweave-logo">‚öôÔ∏è Settings</div>
        <button class="prismweave-settings-back" title="Back">‚Üê</button>
      </div>
      
      <div class="prismweave-content">
        <form class="prismweave-settings-form">
          <div class="prismweave-form-group">
            <label for="github-token">GitHub Token:</label>
            <input type="password" id="github-token" name="github-token" 
                   placeholder="ghp_xxxxxxxxxxxxxxxxxxxx" required>
            <small>Personal Access Token with repo permissions</small>
          </div>
          
          <div class="prismweave-form-group">
            <label for="github-repo">Repository:</label>
            <input type="text" id="github-repo" name="github-repo" 
                   placeholder="username/repository-name" required>
            <small>Format: owner/repo</small>
          </div>
          
          <div class="prismweave-form-group">
            <label for="default-folder">Default Folder:</label>
            <select id="default-folder" name="default-folder">
              <option value="unsorted">Unsorted</option>
              <option value="tech">Tech</option>
              <option value="business">Business</option>
              <option value="news">News</option>
              <option value="research">Research</option>
              <option value="tutorial">Tutorial</option>
              <option value="reference">Reference</option>
            </select>
          </div>
          
          <div class="prismweave-form-actions">
            <button type="button" class="prismweave-btn prismweave-btn-secondary prismweave-test-connection">
              üîó Test Connection
            </button>
            <button type="submit" class="prismweave-btn prismweave-btn-primary">
              üíæ Save Settings
            </button>
          </div>
        </form>
      </div>
    `;

    return panel;
  }

  /**
   * Inject CSS styles for the overlay
   */
  private injectStyles(): void {
    if (document.getElementById('prismweave-bookmarklet-styles')) return;

    const style = document.createElement('style');
    style.id = 'prismweave-bookmarklet-styles';
    style.textContent = `
      .prismweave-overlay {
        position: fixed !important;
        top: 20px !important;
        right: 20px !important;
        z-index: 2147483647 !important;
        width: 320px !important;
        max-height: 600px !important;
        background: #ffffff !important;
        border-radius: 12px !important;
        box-shadow: 0 8px 32px rgba(0,0,0,0.12) !important;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;
        font-size: 14px !important;
        line-height: 1.4 !important;
        color: #333333 !important;
        border: 1px solid #e0e0e0 !important;
        opacity: 0 !important;
        transform: translateX(100%) !important;
        transition: all 0.3s ease !important;
      }

      .prismweave-header {
        display: flex !important;
        align-items: center !important;
        justify-content: space-between !important;
        padding: 16px 20px !important;
        border-bottom: 1px solid #f0f0f0 !important;
        background: #f8f9fa !important;
        border-radius: 12px 12px 0 0 !important;
      }

      .prismweave-logo {
        font-weight: 600 !important;
        font-size: 16px !important;
        color: #2c3e50 !important;
      }

      .prismweave-close,
      .prismweave-settings-back {
        background: none !important;
        border: none !important;
        font-size: 20px !important;
        cursor: pointer !important;
        color: #666666 !important;
        padding: 4px 8px !important;
        border-radius: 6px !important;
        transition: background-color 0.2s ease !important;
      }

      .prismweave-close:hover,
      .prismweave-settings-back:hover {
        background: #e9ecef !important;
      }

      .prismweave-content {
        padding: 20px !important;
      }

      .prismweave-page-info h3 {
        margin: 0 0 8px 0 !important;
        font-size: 16px !important;
        font-weight: 600 !important;
        line-height: 1.3 !important;
        color: #2c3e50 !important;
      }

      .prismweave-url {
        margin: 0 0 20px 0 !important;
        font-size: 12px !important;
        color: #666666 !important;
        word-break: break-all !important;
      }

      .prismweave-actions {
        display: flex !important;
        flex-direction: column !important;
        gap: 12px !important;
        margin-bottom: 20px !important;
      }

      .prismweave-btn {
        padding: 12px 16px !important;
        border: none !important;
        border-radius: 8px !important;
        font-size: 14px !important;
        font-weight: 500 !important;
        cursor: pointer !important;
        transition: all 0.2s ease !important;
        text-align: center !important;
      }

      .prismweave-btn-primary {
        background: #3498db !important;
        color: #ffffff !important;
      }

      .prismweave-btn-primary:hover {
        background: #2980b9 !important;
      }

      .prismweave-btn-secondary {
        background: #ecf0f1 !important;
        color: #2c3e50 !important;
      }

      .prismweave-btn-secondary:hover {
        background: #d5dbdb !important;
      }

      .prismweave-status {
        padding: 12px 16px !important;
        background: #f8f9fa !important;
        border-radius: 8px !important;
        border: 1px solid #e9ecef !important;
      }

      .prismweave-status-text {
        font-size: 13px !important;
        color: #495057 !important;
        margin-bottom: 8px !important;
      }

      .prismweave-progress {
        height: 4px !important;
        background: #e9ecef !important;
        border-radius: 2px !important;
        overflow: hidden !important;
      }

      .prismweave-progress-bar {
        height: 100% !important;
        background: #3498db !important;
        width: 0% !important;
        transition: width 0.3s ease !important;
      }

      .prismweave-form-group {
        margin-bottom: 16px !important;
      }

      .prismweave-form-group label {
        display: block !important;
        margin-bottom: 6px !important;
        font-weight: 500 !important;
        color: #2c3e50 !important;
      }

      .prismweave-form-group input,
      .prismweave-form-group select {
        width: 100% !important;
        padding: 10px 12px !important;
        border: 1px solid #d1d5db !important;
        border-radius: 6px !important;
        font-size: 14px !important;
        box-sizing: border-box !important;
      }

      .prismweave-form-group small {
        display: block !important;
        margin-top: 4px !important;
        font-size: 12px !important;
        color: #6b7280 !important;
      }

      .prismweave-form-actions {
        display: flex !important;
        gap: 12px !important;
        margin-top: 24px !important;
      }

      .prismweave-form-actions .prismweave-btn {
        flex: 1 !important;
      }
    `;

    document.head.appendChild(style);
  }

  /**
   * Bind event handlers
   */
  private bindEvents(): void {
    if (!this.container) return;

    // Close button
    const closeBtn = this.container.querySelector('.prismweave-close');
    closeBtn?.addEventListener('click', () => this.hide());

    // Capture button
    const captureBtn = this.container.querySelector('.prismweave-capture');
    captureBtn?.addEventListener('click', () => this.handleCapture());

    // Settings button
    const settingsBtn = this.container.querySelector('.prismweave-settings');
    settingsBtn?.addEventListener('click', () => this.showSettings());

    // Settings back button
    this.container.addEventListener('click', (e) => {
      if ((e.target as Element)?.classList.contains('prismweave-settings-back')) {
        this.hideSettings();
      }
    });

    // Settings form
    this.container.addEventListener('submit', (e) => this.handleSettingsSubmit(e));

    // Test connection button
    this.container.addEventListener('click', (e) => {
      if ((e.target as Element)?.classList.contains('prismweave-test-connection')) {
        this.handleTestConnection();
      }
    });

    // Prevent clicks from bubbling to page
    this.container.addEventListener('click', (e) => e.stopPropagation());
  }

  /**
   * Handle capture button click
   */
  private async handleCapture(): Promise<void> {
    try {
      this.showStatus('Capturing page content...', 25);
      await this.bookmarklet.captureCurrentPage();
      this.hideStatus();
    } catch (error) {
      this.showStatus(`Error: ${(error as Error).message}`, 0);
    }
  }

  /**
   * Handle settings form submission
   */
  private async handleSettingsSubmit(e: Event): Promise<void> {
    e.preventDefault();
    
    const form = e.target as HTMLFormElement;
    const formData = new FormData(form);
    
    const settings = {
      github: {
        token: formData.get('github-token') as string,
        repository: formData.get('github-repo') as string
      },
      defaultFolder: formData.get('default-folder') as string
    };

    try {
      // Save settings to local storage
      await this.saveSettings(settings);
      this.showStatus('Settings saved successfully!', 100);
      
      setTimeout(() => {
        this.hideStatus();
        this.hideSettings();
      }, 2000);
      
    } catch (error) {
      this.showStatus(`Error saving settings: ${(error as Error).message}`, 0);
    }
  }

  /**
   * Handle test connection
   */
  private async handleTestConnection(): Promise<void> {
    const tokenInput = this.container?.querySelector('#github-token') as HTMLInputElement;
    const repoInput = this.container?.querySelector('#github-repo') as HTMLInputElement;
    
    if (!tokenInput?.value || !repoInput?.value) {
      this.showStatus('Please enter GitHub token and repository', 0);
      return;
    }

    try {
      this.showStatus('Testing connection...', 50);
      // TODO: Implement actual connection test
      // For now, just simulate success
      await new Promise(resolve => setTimeout(resolve, 1000));
      this.showStatus('Connection successful!', 100);
      
      setTimeout(() => this.hideStatus(), 3000);
    } catch (error) {
      this.showStatus(`Connection failed: ${(error as Error).message}`, 0);
    }
  }

  /**
   * Show status with progress
   */
  private showStatus(message: string, progress: number): void {
    const statusEl = this.container?.querySelector('.prismweave-status') as HTMLElement;
    const statusText = this.container?.querySelector('.prismweave-status-text') as HTMLElement;
    const progressBar = this.container?.querySelector('.prismweave-progress-bar') as HTMLElement;
    
    if (statusEl && statusText && progressBar) {
      statusEl.style.display = 'block';
      statusText.textContent = message;
      progressBar.style.width = `${progress}%`;
    }
  }

  /**
   * Hide status
   */
  private hideStatus(): void {
    const statusEl = this.container?.querySelector('.prismweave-status') as HTMLElement;
    if (statusEl) {
      statusEl.style.display = 'none';
    }
  }

  /**
   * Save settings to local storage
   */
  private async saveSettings(settings: any): Promise<void> {
    localStorage.setItem('prismweave_settings', JSON.stringify(settings));
  }

  /**
   * Load settings from local storage
   */
  private async loadSettings(): Promise<any> {
    const stored = localStorage.getItem('prismweave_settings');
    return stored ? JSON.parse(stored) : {};
  }

  /**
   * Escape HTML to prevent XSS
   */
  private escapeHtml(text: string): string {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  /**
   * Destroy the overlay and clean up
   */
  destroy(): void {
    if (this.container && this.container.parentNode) {
      this.container.parentNode.removeChild(this.container);
    }
    
    const styles = document.getElementById('prismweave-bookmarklet-styles');
    if (styles && styles.parentNode) {
      styles.parentNode.removeChild(styles);
    }
    
    this.container = null;
    this.settingsPanel = null;
    this.isVisible = false;
  }
}
