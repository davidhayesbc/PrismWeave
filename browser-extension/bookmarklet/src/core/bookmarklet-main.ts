// Generated by Copilot
// PrismWeave Bookmarklet - Main entry point for web page capture functionality
// Self-contained script that reuses PrismWeave shared utilities

import { BookmarkletContentExtractor } from '../adapters/bookmarklet-content-extractor.js';
import { BookmarkletGitHubClient } from '../adapters/bookmarklet-github-client.js';
import { LocalStorageProvider } from '../adapters/local-storage-provider.js';
import { OverlayNotificationProvider } from '../adapters/overlay-notification-provider.js';
import { PrismWeaveOverlay } from './ui-overlay.js';

// Global namespace to prevent conflicts
declare global {
  interface Window {
    PrismWeaveBookmarklet?: PrismWeaveBookmarklet;
  }
}

/**
 * Main bookmarklet class that coordinates all functionality
 */
export class PrismWeaveBookmarklet {
  private overlay: PrismWeaveOverlay | null = null;
  private contentExtractor: BookmarkletContentExtractor;
  private githubClient: BookmarkletGitHubClient;
  private storageProvider: LocalStorageProvider;
  private notificationProvider: OverlayNotificationProvider;
  private isInitialized = false;

  constructor() {
    // Initialize providers using dependency injection pattern
    this.storageProvider = new LocalStorageProvider();
    this.notificationProvider = new OverlayNotificationProvider();
    this.contentExtractor = new BookmarkletContentExtractor();
    this.githubClient = new BookmarkletGitHubClient();
  }

  /**
   * Initialize the bookmarklet and show the overlay
   */
  async activate(): Promise<void> {
    try {
      if (!this.isInitialized) {
        await this.initialize();
      }

      if (this.overlay) {
        this.overlay.toggle();
      } else {
        this.overlay = new PrismWeaveOverlay(this);
        await this.overlay.show();
      }
    } catch (error) {
      console.error('PrismWeave Bookmarklet activation failed:', error);
      alert(`PrismWeave Error: ${(error as Error).message}`);
    }
  }

  /**
   * Initialize the bookmarklet components
   */
  private async initialize(): Promise<void> {
    try {
      // Initialize all components
      await Promise.all([
        this.contentExtractor.initialize(),
        this.githubClient.initialize(),
        this.storageProvider.initialize?.(),
        this.notificationProvider.initialize?.()
      ]);

      this.isInitialized = true;
      console.log('PrismWeave Bookmarklet initialized successfully');
    } catch (error) {
      console.error('PrismWeave Bookmarklet initialization failed:', error);
      throw error;
    }
  }

  /**
   * Capture the current page content
   */
  async captureCurrentPage(): Promise<void> {
    try {
      if (!this.isInitialized) {
        throw new Error('Bookmarklet not initialized');
      }

      await this.notificationProvider.show('Starting content capture...');

      // Extract content from current page
      const extractionResult = await this.contentExtractor.extractContent({
        includeImages: true,
        cleanHtml: true,
        preserveFormatting: true
      });

      if (!extractionResult.success) {
        throw new Error(extractionResult.error || 'Content extraction failed');
      }

      // Get settings from storage
      const settings = await this.storageProvider.get('prismweave_settings');
      if (!settings || !settings.github?.token || !settings.github?.repository) {
        throw new Error('GitHub settings not configured. Please configure in settings.');
      }

      await this.notificationProvider.show('Converting to markdown...');

      // Save to GitHub
      const commitResult = await this.githubClient.commitToGitHub({
        token: settings.github.token,
        repo: settings.github.repository,
        filePath: this.generateFilePath(extractionResult.data!),
        content: extractionResult.data!.content,
        message: `Add captured content: ${extractionResult.data!.metadata.title}`,
        url: window.location.href
      });

      if (commitResult.success) {
        await this.notificationProvider.show(
          `Successfully saved to GitHub: ${extractionResult.data!.metadata.title}`,
          { type: 'success', duration: 5000 }
        );
      } else {
        throw new Error(commitResult.error || 'Failed to save to GitHub');
      }

    } catch (error) {
      console.error('Content capture failed:', error);
      await this.notificationProvider.show(
        `Capture failed: ${(error as Error).message}`,
        { type: 'error', duration: 10000 }
      );
      throw error;
    }
  }

  /**
   * Generate file path for captured content
   */
  private generateFilePath(data: any): string {
    const now = new Date();
    const dateStr = now.toISOString().split('T')[0];
    const domain = window.location.hostname.replace(/[^a-z0-9]/gi, '-');
    const title = data.metadata.title
      .toLowerCase()
      .replace(/[^a-z0-9\s]/gi, '')
      .replace(/\s+/g, '-')
      .substring(0, 50);

    return `documents/unsorted/${dateStr}-${domain}-${title}.md`;
  }

  /**
   * Toggle overlay visibility
   */
  toggle(): void {
    if (this.overlay) {
      this.overlay.toggle();
    }
  }

  /**
   * Show settings panel
   */
  async showSettings(): Promise<void> {
    if (this.overlay) {
      await this.overlay.showSettings();
    }
  }

  /**
   * Clean up resources
   */
  cleanup(): void {
    if (this.overlay) {
      this.overlay.destroy();
      this.overlay = null;
    }
    this.isInitialized = false;
  }
}

/**
 * Bookmarklet initialization function
 * This is the entry point called by the bookmarklet script
 */
export function initializePrismWeaveBookmarklet(): void {
  // Check if already loaded
  if (window.PrismWeaveBookmarklet) {
    window.PrismWeaveBookmarklet.toggle();
    return;
  }

  // Create and activate new instance
  const bookmarklet = new PrismWeaveBookmarklet();
  window.PrismWeaveBookmarklet = bookmarklet;
  
  bookmarklet.activate().catch(error => {
    console.error('Failed to activate PrismWeave Bookmarklet:', error);
  });
}

// Self-executing function for direct bookmarklet use
(function() {
  'use strict';
  
  // Avoid conflicts with existing instances
  if (typeof window !== 'undefined') {
    initializePrismWeaveBookmarklet();
  }
})();
