// Generated by Copilot
// Overlay Notification Provider for PrismWeave Bookmarklet
// Implements INotificationProvider using UI overlay notifications

import type { INotificationOptions, INotificationProvider } from '../../shared/interfaces/notification-provider.js';

/**
 * Overlay notification provider for bookmarklet environments
 * Shows notifications within the bookmarklet UI overlay
 */
export class OverlayNotificationProvider implements INotificationProvider {
  private notifications = new Map<string, HTMLElement>();
  private container: HTMLElement | null = null;

  async initialize?(): Promise<void> {
    this.createNotificationContainer();
  }

  async show(message: string, options?: INotificationOptions): Promise<string> {
    const notificationId = `notification-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    
    const notification = this.createNotificationElement(message, options);
    this.notifications.set(notificationId, notification);
    
    if (!this.container) {
      this.createNotificationContainer();
    }
    
    if (this.container) {
      this.container.appendChild(notification);
      
      // Animate in
      setTimeout(() => {
        notification.style.opacity = '1';
        notification.style.transform = 'translateX(0)';
      }, 10);
      
      // Auto-hide after duration
      const duration = options?.duration || 5000;
      if (duration > 0) {
        setTimeout(() => {
          this.hide(notificationId);
        }, duration);
      }
    }
    
    return notificationId;
  }

  async hide(notificationId: string): Promise<void> {
    const notification = this.notifications.get(notificationId);
    if (!notification) return;

    // Animate out
    notification.style.opacity = '0';
    notification.style.transform = 'translateX(100%)';
    
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
      this.notifications.delete(notificationId);
    }, 300);
  }

  async clear(): Promise<void> {
    const notificationIds = Array.from(this.notifications.keys());
    await Promise.all(notificationIds.map(id => this.hide(id)));
  }

  onClicked(callback: (notificationId: string, actionId?: string) => void): void {
    // Store callback for future notifications
    this.clickCallback = callback;
  }

  onClosed(callback: (notificationId: string) => void): void {
    // Store callback for future notifications  
    this.closedCallback = callback;
  }

  private clickCallback?: (notificationId: string, actionId?: string) => void;
  private closedCallback?: (notificationId: string) => void;

  /**
   * Create the notification container
   */
  private createNotificationContainer(): void {
    if (this.container) return;

    this.container = document.createElement('div');
    this.container.id = 'prismweave-notification-container';
    this.container.className = 'prismweave-notifications';
    
    // Inject notification styles
    this.injectNotificationStyles();
    
    document.body.appendChild(this.container);
  }

  /**
   * Create a notification element
   */
  private createNotificationElement(message: string, options?: INotificationOptions): HTMLElement {
    const notification = document.createElement('div');
    const notificationId = `notification-${Date.now()}`;
    
    notification.className = `prismweave-notification ${this.getTypeClass(options?.type)}`;
    notification.dataset.notificationId = notificationId;
    
    const iconMap = {
      success: '✓',
      error: '✗',
      warning: '⚠',
      info: 'ℹ'
    };
    
    const icon = iconMap[options?.type || 'info'];
    
    notification.innerHTML = `
      <div class="prismweave-notification-icon">${icon}</div>
      <div class="prismweave-notification-content">
        <div class="prismweave-notification-message">${this.escapeHtml(message)}</div>
        ${options?.title ? `<div class="prismweave-notification-title">${this.escapeHtml(options.title)}</div>` : ''}
      </div>
      <button class="prismweave-notification-close" title="Close">×</button>
    `;
    
    // Add click handler
    notification.addEventListener('click', (e) => {
      if (!(e.target as Element).classList.contains('prismweave-notification-close')) {
        this.clickCallback?.(notificationId);
      }
    });
    
    // Add close handler
    const closeBtn = notification.querySelector('.prismweave-notification-close');
    closeBtn?.addEventListener('click', (e) => {
      e.stopPropagation();
      this.hide(notificationId);
      this.closedCallback?.(notificationId);
    });
    
    return notification;
  }

  /**
   * Get CSS class for notification type
   */
  private getTypeClass(type?: string): string {
    const typeMap = {
      success: 'prismweave-notification-success',
      error: 'prismweave-notification-error',
      warning: 'prismweave-notification-warning',
      info: 'prismweave-notification-info'
    };
    
    return typeMap[type as keyof typeof typeMap] || typeMap.info;
  }

  /**
   * Inject CSS styles for notifications
   */
  private injectNotificationStyles(): void {
    if (document.getElementById('prismweave-notification-styles')) return;

    const style = document.createElement('style');
    style.id = 'prismweave-notification-styles';
    style.textContent = `
      .prismweave-notifications {
        position: fixed !important;
        top: 20px !important;
        right: 360px !important;
        z-index: 2147483646 !important;
        width: 300px !important;
        pointer-events: none !important;
      }

      .prismweave-notification {
        display: flex !important;
        align-items: flex-start !important;
        padding: 12px 16px !important;
        margin-bottom: 12px !important;
        background: #ffffff !important;
        border-radius: 8px !important;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15) !important;
        border-left: 4px solid #3498db !important;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;
        font-size: 14px !important;
        line-height: 1.4 !important;
        color: #333333 !important;
        opacity: 0 !important;
        transform: translateX(100%) !important;
        transition: all 0.3s ease !important;
        pointer-events: auto !important;
        cursor: pointer !important;
      }

      .prismweave-notification-success {
        border-left-color: #27ae60 !important;
        background: #d5f4e6 !important;
      }

      .prismweave-notification-error {
        border-left-color: #e74c3c !important;
        background: #fadbd8 !important;
      }

      .prismweave-notification-warning {
        border-left-color: #f39c12 !important;
        background: #fdeaa7 !important;
      }

      .prismweave-notification-info {
        border-left-color: #3498db !important;
        background: #d6eaf8 !important;
      }

      .prismweave-notification-icon {
        flex-shrink: 0 !important;
        width: 20px !important;
        height: 20px !important;
        margin-right: 12px !important;
        font-size: 16px !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        font-weight: bold !important;
      }

      .prismweave-notification-content {
        flex: 1 !important;
        min-width: 0 !important;
      }

      .prismweave-notification-title {
        font-weight: 600 !important;
        margin-bottom: 4px !important;
        color: #2c3e50 !important;
      }

      .prismweave-notification-message {
        color: #34495e !important;
        word-wrap: break-word !important;
      }

      .prismweave-notification-close {
        flex-shrink: 0 !important;
        background: none !important;
        border: none !important;
        font-size: 18px !important;
        cursor: pointer !important;
        color: #666666 !important;
        padding: 0 !important;
        margin-left: 8px !important;
        width: 20px !important;
        height: 20px !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        border-radius: 4px !important;
        transition: background-color 0.2s ease !important;
      }

      .prismweave-notification-close:hover {
        background: rgba(0,0,0,0.1) !important;
      }
    `;

    document.head.appendChild(style);
  }

  /**
   * Escape HTML to prevent XSS
   */
  private escapeHtml(text: string): string {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  /**
   * Cleanup notifications and container
   */
  destroy(): void {
    this.clear();
    
    if (this.container && this.container.parentNode) {
      this.container.parentNode.removeChild(this.container);
    }
    
    const styles = document.getElementById('prismweave-notification-styles');
    if (styles && styles.parentNode) {
      styles.parentNode.removeChild(styles);
    }
    
    this.container = null;
    this.notifications.clear();
  }
}
