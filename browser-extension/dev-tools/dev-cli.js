#!/usr/bin/env node

// Generated by Copilot
// Simple CLI wrapper for testing markdown conversion

import chalk from 'chalk';
import fs from 'fs-extra';
import path from 'path';
import { UniversalMarkdownConverter } from './src/universal-markdown-converter.js';

// Simple command line argument parsing
const args = process.argv.slice(2);
const command = args[0];

async function main() {
  console.log(chalk.blue('üöÄ PrismWeave Markdown Development Tools\n'));

  switch (command) {
    case 'test':
      await testFile();
      break;
    case 'help':
    case '--help':
    case '-h':
      showHelp();
      break;
    default:
      if (args.length === 0) {
        showHelp();
      } else {
        console.error(chalk.red(`Unknown command: ${command}`));
        showHelp();
        process.exit(1);
      }
  }
}

async function testFile() {
  const filePath = args[1];
  if (!filePath) {
    console.error(chalk.red('Error: Please provide an HTML file path'));
    console.log('Usage: npm run test <html-file-path>');
    process.exit(1);
  }

  try {
    console.log(chalk.blue(`üìÑ Testing file: ${filePath}`));

    // Read HTML file
    const html = await fs.readFile(filePath, 'utf8');
    console.log(chalk.green(`‚úì Loaded ${html.length} characters`));

    // Initialize converter
    const converter = new UniversalMarkdownConverter();

    if (!converter.isInitialized) {
      console.error(chalk.red('‚ùå Failed to initialize converter'));
      process.exit(1);
    }

    // Basic metadata
    const metadata = {
      title: path.basename(filePath, '.html'),
      url: `file://${path.resolve(filePath)}`,
      description: 'Test conversion from local file',
      language: 'en',
    };

    // Convert
    console.log(chalk.blue('üîÑ Converting to markdown...'));
    const startTime = Date.now();

    const result = await converter.convertToMarkdown(html, metadata, {
      generateFrontmatter: true,
      preserveFormatting: true,
      includeMetadata: true,
    });

    const conversionTime = Date.now() - startTime;
    console.log(chalk.green(`‚úì Conversion completed in ${conversionTime}ms`));

    // Save results
    const outputDir = './test-outputs';
    await fs.ensureDir(outputDir);

    const baseName = path.basename(filePath, '.html');
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');

    // Save markdown
    const markdownPath = path.join(outputDir, `${baseName}-${timestamp}.md`);
    const fullMarkdown = result.frontmatter + result.markdown;
    await fs.writeFile(markdownPath, fullMarkdown, 'utf8');

    // Save test metadata
    const metadataPath = path.join(outputDir, `${baseName}-${timestamp}.json`);
    const testResult = {
      originalFile: filePath,
      timestamp: new Date().toISOString(),
      conversionTime,
      stats: converter.getMarkdownStats(result.markdown),
      metadata: result.metadata,
      images: result.images,
    };
    await fs.writeFile(metadataPath, JSON.stringify(testResult, null, 2), 'utf8');

    console.log(chalk.green(`\nüíæ Results saved:`));
    console.log(chalk.gray(`   Markdown: ${markdownPath}`));
    console.log(chalk.gray(`   Metadata: ${metadataPath}`));

    // Display stats
    const stats = converter.getMarkdownStats(result.markdown);
    console.log(chalk.yellow('\nüìä Conversion Statistics:'));
    console.log(`   Words: ${stats.words}`);
    console.log(`   Characters: ${stats.characters}`);
    console.log(`   Headings: ${stats.headings}`);
    console.log(`   Links: ${stats.links}`);
    console.log(`   Images: ${stats.images}`);
    console.log(`   Code blocks: ${stats.codeBlocks}`);

    console.log(chalk.green('\n‚úÖ Test completed successfully!'));
  } catch (error) {
    console.error(chalk.red('‚ùå Test failed:'), error);
    process.exit(1);
  }
}

function showHelp() {
  console.log('Usage: npm run dev <command> [options]');
  console.log('');
  console.log('Commands:');
  console.log('  test <file>     Test conversion on an HTML file');
  console.log('  help           Show this help message');
  console.log('');
  console.log('Examples:');
  console.log('  npm run dev test ./sample.html');
  console.log('  npm run dev help');
  console.log('');
  console.log('For URL testing, use:');
  console.log('  npm run test-url <url>');
}

main().catch(console.error);
