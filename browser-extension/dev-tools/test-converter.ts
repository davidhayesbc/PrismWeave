// Generated by Copilot
// Quick test of the NodeMarkdownConverter

import { NodeMarkdownConverter } from './node-markdown-converter.ts';

console.log('Creating NodeMarkdownConverter...');

try {
  const converter = new NodeMarkdownConverter();
  console.log('✅ Converter created successfully');
  console.log('Is initialized:', converter.isInitialized);

  // Test simple HTML conversion
  const simpleHtml = '<h1>Test</h1><p>This is a test paragraph.</p>';
  console.log('Testing simple HTML conversion...');

  const result = await converter.convertHtmlWithDOM(simpleHtml, {
    generateFrontmatter: true,
    includeMetadata: true,
  });

  console.log('✅ Conversion successful!');
  console.log('Result type:', typeof result);
  console.log('Result keys:', result ? Object.keys(result) : 'result is null/undefined');

  if (result) {
    console.log('Markdown length:', result.markdown?.length || 'markdown undefined');
    console.log('Word count:', result.wordCount);
    console.log('First 100 chars:', result.markdown?.substring(0, 100) || 'no markdown content');
  } else {
    console.log('❌ Result is null or undefined');
  }
} catch (error) {
  console.error('❌ Test failed:', error);
  console.error('Stack:', error instanceof Error ? error.stack : String(error));
}
