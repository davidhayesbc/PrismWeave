#!/usr/bin/env node

// Generated by Copilot
// Simple URL testing tool for PrismWeave markdown conversion
// Uses the exact same core logic as the browser extension

import chalk from 'chalk';
import fs from 'fs-extra';
import path from 'path';
import { NodeMarkdownConverter } from './src/node-markdown-converter.js';

class SimpleUrlTester {
  constructor(outputDir = './test-outputs') {
    this.outputDir = path.resolve(outputDir);
    this.converter = new NodeMarkdownConverter();
  }

  async testUrl(url, options = {}) {
    const startTime = Date.now();

    try {
      console.log(chalk.blue(`\nüîÑ Testing URL: ${url}`));

      // Ensure output directory exists
      await fs.ensureDir(this.outputDir);

      // Use the NodeMarkdownConverter's convertUrl method (which uses the core logic)
      const result = await this.converter.convertUrl(url, {
        generateFrontmatter: true,
        includeMetadata: true,
        preserveFormatting: true,
        ...options,
      });

      const conversionTime = Date.now() - startTime;

      // Generate filename
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const urlSlug = url
        .replace(/[^a-zA-Z0-9]/g, '-')
        .replace(/-+/g, '-')
        .slice(0, 50);
      const baseFilename = `${urlSlug}--${timestamp}`;

      // Save results
      await this.saveResults(result, baseFilename, url, conversionTime);

      console.log(chalk.green('‚úÖ Conversion completed successfully!'));
      console.log(chalk.cyan(`‚è±Ô∏è  Conversion time: ${conversionTime}ms`));
      console.log(chalk.cyan(`üìù Word count: ${result.wordCount}`));
      console.log(chalk.cyan(`üñºÔ∏è  Images found: ${result.images.length}`));

      return result;
    } catch (error) {
      console.error(chalk.red('‚ùå Conversion failed:'), error.message);
      throw error;
    }
  }

  async saveResults(result, baseFilename, url, conversionTime) {
    // Save HTML
    const htmlPath = path.join(this.outputDir, `${baseFilename}.html`);
    await fs.writeFile(htmlPath, result.originalHtml, 'utf8');
    console.log(chalk.gray(`üíæ Saved HTML: ${htmlPath}`));

    // Save Markdown
    const mdPath = path.join(this.outputDir, `${baseFilename}.md`);
    const fullMarkdown = result.frontmatter + result.markdown;
    await fs.writeFile(mdPath, fullMarkdown, 'utf8');
    console.log(chalk.gray(`üíæ Saved Markdown: ${mdPath}`));

    // Save metadata as JSON
    const jsonPath = path.join(this.outputDir, `${baseFilename}.json`);
    const metadata = {
      url,
      timestamp: new Date().toISOString(),
      conversionTime,
      metadata: result.metadata,
      images: result.images,
      stats: {
        wordCount: result.wordCount,
        htmlLength: result.originalHtml.length,
        markdownLength: result.markdown.length,
      },
    };
    await fs.writeFile(jsonPath, JSON.stringify(metadata, null, 2), 'utf8');
    console.log(chalk.gray(`üíæ Saved metadata: ${jsonPath}`));
  }
}

// CLI interface
async function main() {
  const url = process.argv[2];

  if (!url) {
    console.error(chalk.red('‚ùå Please provide a URL to test'));
    console.log(chalk.yellow('Usage: npm run test-url <url>'));
    process.exit(1);
  }

  try {
    const tester = new SimpleUrlTester();
    await tester.testUrl(url);
  } catch (error) {
    console.error(chalk.red('‚ùå Test failed:'), error.message);
    process.exit(1);
  }
}

// Run if this file is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}
