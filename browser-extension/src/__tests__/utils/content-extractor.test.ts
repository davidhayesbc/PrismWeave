// Generated by Copilot
// Content Extractor Tests - Simplified JSDOM-based approach

import { ContentExtractor } from '../../utils/content-extractor';
import { setupDOM, createTestHTML, cleanupTest } from '../test-helpers';

describe('ContentExtractor - Core Functionality', () => {
  let extractor: ContentExtractor;

  beforeEach(() => {
    extractor = new ContentExtractor();
    cleanupTest();
  });

  describe('Content Identification', () => {
    test('C.1.1 - Extract main content from article pages', async () => {
      setupDOM(createTestHTML('article'));

      const result = await extractor.extractContent();

      expect(result).toBeDefined();
      expect(result.content).toContain('Main Article Title');
      expect(result.content).toContain('main article content');
      expect(result.metadata).toBeDefined();
      expect(result.metadata.title).toBe('OpenGraph Title'); // Prefers og:title
      expect(result.metadata.author).toBe('Test Author');
      expect(result.wordCount).toBeGreaterThan(5);
    });

    test('C.1.2 - Extract content from blog posts', async () => {
      setupDOM(createTestHTML('blog'));

      const result = await extractor.extractContent();

      expect(result).toBeDefined();
      expect(result.content).toContain('Build Amazing Apps');
      expect(result.content).toContain('careful planning');
      expect(result.wordCount).toBeGreaterThan(10);
      expect(result.readingTime).toBeGreaterThan(0);
    });

    test('C.1.3 - Handle pages with no clear main content', async () => {
      setupDOM(createTestHTML('generic'));

      const result = await extractor.extractContent();

      expect(result).toBeDefined();
      expect(result.content).toContain('scattered content');
      expect(result.content.length).toBeGreaterThan(0);
      expect(result.wordCount).toBeGreaterThan(0);
    });
  });

  describe('Content Quality Assessment', () => {
    test('C.4.1 - Calculate word count accurately', async () => {
      const contentHtml = `
        <head><title>Word Count Test</title></head>
        <body>
          <div class="content-text">
            <p>This is a test article with exactly twelve words in this sentence.</p>
          </div>
        </body>
      `;

      setupDOM(contentHtml);

      const result = await extractor.extractContent();

      expect(result.wordCount).toBe(12);
      expect(typeof result.wordCount).toBe('number');
    });

    test('C.4.2 - Estimate reading time', async () => {
      // Create content with approximately 300 words
      const longContent =
        'This is a comprehensive article with substantial content that demonstrates proper reading time estimation. '.repeat(
          30
        );
      const contentHtml = `
        <head><title>Reading Time Test</title></head>
        <body>
          <div class="content-text">
            <p>${longContent}</p>
          </div>
        </body>
      `;

      setupDOM(contentHtml);

      const result = await extractor.extractContent();

      expect(result.readingTime).toBeGreaterThan(0);
      expect(result.readingTime).toBeLessThan(10);
      expect(typeof result.readingTime).toBe('number');
    });
  });

  describe('Metadata Extraction', () => {
    test('M.1.1 - Extract title from various sources', async () => {
      const htmlWithMetadata = `
        <head>
          <title>Document Title</title>
          <meta property="og:title" content="OpenGraph Title">
          <meta name="twitter:title" content="Twitter Title">
        </head>
        <body>
          <h1>Header Title</h1>
          <div class="entry-content">
            <p>Some content here with enough text to be meaningful for extraction purposes.</p>
          </div>
        </body>
      `;

      setupDOM(htmlWithMetadata);

      const result = await extractor.extractContent();

      // Should prefer og:title over document.title
      expect(result.metadata.title).toBe('OpenGraph Title');
      expect(result.metadata.url).toBe('https://example.com/test-article');
      expect(result.metadata.captureDate).toBeDefined();
    });

    test('M.1.2 - Extract author information', async () => {
      const htmlWithAuthor = `
        <head>
          <meta name="author" content="Jane Smith">
        </head>
        <body>
          <article>
            <h1>Article with Author</h1>
            <p>Content written by an identified author with sufficient text for proper extraction.</p>
          </article>
        </body>
      `;

      setupDOM(htmlWithAuthor);

      const result = await extractor.extractContent();

      expect(result.metadata.author).toBe('Jane Smith');
    });

    test('M.1.3 - Extract and process tags', async () => {
      const htmlWithTags = `
        <head>
          <meta name="keywords" content="javascript, typescript, testing">
        </head>
        <body>
          <div class="entry-content">
            <h1>Tagged Article</h1>
            <p>This article has tags and categories for organization purposes and content management.</p>
            <div class="tag">programming</div>
            <div class="category">web-development</div>
          </div>
        </body>
      `;

      setupDOM(htmlWithTags);

      const result = await extractor.extractContent();

      expect(result.metadata.tags).toContain('javascript');
      expect(result.metadata.tags).toContain('typescript');
      expect(result.metadata.tags).toContain('programming');
      expect(result.metadata.tags.length).toBeGreaterThan(0);
    });
  });

  describe('Utility Methods', () => {
    test('U.1.1 - Extract images with metadata', () => {
      const htmlWithImages = `
        <body>
          <img src="https://example.com/image1.jpg" alt="Test Image 1" title="Image Title">
          <img src="https://example.com/image2.png" alt="Test Image 2">
          <img src="data:image/gif;base64,..." alt="Base64 Image">
        </body>
      `;

      setupDOM(htmlWithImages);

      const images = extractor.extractImages();

      expect(images).toHaveLength(2); // Should exclude data: images
      expect(images[0]).toEqual({
        src: 'https://example.com/image1.jpg',
        alt: 'Test Image 1',
        title: 'Image Title',
      });
      expect(images[1]).toEqual({
        src: 'https://example.com/image2.png',
        alt: 'Test Image 2',
        title: '',
      });
    });

    test('U.1.2 - Extract links with metadata', () => {
      const htmlWithLinks = `
        <body>
          <a href="https://example.com/link1" title="Link Title">Link Text 1</a>
          <a href="https://example.com/link2">Link Text 2</a>
          <a href="javascript:void(0)">JavaScript Link</a>
        </body>
      `;

      setupDOM(htmlWithLinks);

      const links = extractor.extractLinks();

      expect(links).toHaveLength(2); // Should exclude javascript: links
      expect(links[0]).toEqual({
        href: 'https://example.com/link1',
        text: 'Link Text 1',
        title: 'Link Title',
      });
      expect(links[1]).toEqual({
        href: 'https://example.com/link2',
        text: 'Link Text 2',
        title: '',
      });
    });

    test('U.1.3 - Analyze page structure', () => {
      const htmlWithStructure = `
        <body>
          <h1>Main Heading</h1>
          <h2>Sub Heading 1</h2>
          <h3>Sub Heading 2</h3>
          <section>Section 1</section>
          <article>Article 1</article>
          <p>Paragraph 1</p>
          <p>Paragraph 2</p>
          <p>Paragraph 3</p>
        </body>
      `;

      setupDOM(htmlWithStructure);

      const structure = extractor.getPageStructure();

      expect(structure.headings).toHaveLength(3);
      expect(structure.headings).toContain('Main Heading');
      expect(structure.headings).toContain('Sub Heading 1');
      expect(structure.sections).toBe(2); // section + article
      expect(structure.paragraphs).toBe(3);
    });

    test('U.1.4 - Calculate content quality score', () => {
      const qualityHtml = `
        <body>
          <article>
            <h1>High Quality Article</h1>
            <h2>Introduction</h2>
            <p>This is a comprehensive article with substantial content that demonstrates high quality standards.</p>
            <p>It contains multiple paragraphs with meaningful information and proper structural organization.</p>
            <p>The content is well-organized and provides significant value to readers through detailed explanations.</p>
            <img src="https://example.com/diagram.jpg" alt="Helpful diagram">
            <h2>Main Content</h2>
            <p>Additional detailed content continues here with more valuable information for readers and comprehensive coverage.</p>
            <a href="https://example.com/reference">Relevant reference link</a>
          </article>
        </body>
      `;

      setupDOM(qualityHtml);

      const score = extractor.getContentQualityScore();

      expect(score).toBeGreaterThan(50); // Should be reasonably high quality
      expect(score).toBeLessThanOrEqual(100);
      expect(typeof score).toBe('number');
    });
  });

  describe('Edge Cases and Error Handling', () => {
    test('E.1.1 - Handle empty document', async () => {
      setupDOM('<body></body>');

      const result = await extractor.extractContent();

      expect(result).toBeDefined();
      expect(result.content).toBeDefined();
      expect(result.wordCount).toBe(0);
      expect(result.readingTime).toBe(0);
    });

    test('E.1.2 - Handle malformed HTML', async () => {
      setupDOM(createTestHTML('malformed'));

      const result = await extractor.extractContent();

      expect(result).toBeDefined();
      expect(result.content).toContain('Content with unclosed');
      expect(result.wordCount).toBeGreaterThan(0);
    });

    test('E.1.3 - Handle content with only whitespace', async () => {
      const whitespaceHtml = `
        <body>
          <div class="content">
            <p>   </p>
            <div>
              
            </div>
            <span>	</span>
          </div>
        </body>
      `;

      setupDOM(whitespaceHtml);

      const result = await extractor.extractContent();

      expect(result).toBeDefined();
      expect(result.wordCount).toBe(0);
    });
  });
});
