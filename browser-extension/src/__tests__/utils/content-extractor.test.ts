// Generated by Copilot
// Content Extractor Tests - Test Case C.1.1: Extract main content from article pages

import { ContentExtractor } from '../../utils/content-extractor';

// Mock DOM environment for testing
const mockDOM = () => {
  // Create a minimal DOM-like environment
  const createElement = (tagName: string) => {
    const element = {
      tagName: tagName.toUpperCase(),
      textContent: '',
      innerHTML: '',
      id: '',
      className: '',
      children: [] as any[],
      querySelectorAll: jest.fn().mockReturnValue([]),
      querySelector: jest.fn().mockReturnValue(null),
      cloneNode: jest.fn().mockReturnValue({}),
      remove: jest.fn(),
      getAttribute: jest.fn().mockReturnValue(null),
      setAttribute: jest.fn(),
    };
    return element;
  };

  return {
    createElement,
    body: createElement('body'),
    title: 'Test Article Title',
    location: { href: 'https://example.com/article/test' },
    querySelector: jest.fn(),
    querySelectorAll: jest.fn().mockReturnValue([]),
    createTreeWalker: jest.fn().mockReturnValue({
      nextNode: jest.fn().mockReturnValue(null)
    })
  };
};

// Mock the global document and window objects
(global as any).document = mockDOM();
(global as any).window = {
  location: { 
    href: 'https://example.com/article/test',
    pathname: '/article/test-article'
  }
};

// Mock NodeFilter for tree walker
(global as any).NodeFilter = {
  SHOW_TEXT: 4
};

describe('ContentExtractor - Core Functionality', () => {
  let extractor: ContentExtractor;
  beforeEach(() => {
    extractor = new ContentExtractor();
    jest.clearAllMocks();
    
    // Mock window.location properly
    Object.defineProperty(window, 'location', {
      value: {
        href: 'https://example.com/article/test',
        pathname: '/article/test-article',
        hostname: 'example.com'
      },
      writable: true
    });
    
    // Reset DOM mocks
    (global as any).document = mockDOM();
    (global as any).window = {
      location: { 
        href: 'https://example.com/article/test',
        pathname: '/article/test-article',
        hostname: 'example.com'
      }
    };

    // Suppress console.log output during tests
    jest.spyOn(console, 'log').mockImplementation();
    jest.spyOn(console, 'error').mockImplementation();
  });

  afterEach(() => {
    jest.restoreAllMocks();
  });

  describe('Content Identification', () => {
    test('C.1.1 - Extract main content from article pages', async () => {
      // Setup: Create a realistic article page structure
      const mockArticleHTML = `
        <h1>Test Article Title</h1>
        <div class="article-meta">
          <span class="author">John Doe</span>
          <span class="date">2024-01-15</span>
        </div>
        <div class="article-content">
          <p>This is the first paragraph of the article content. It contains substantial text that should be extracted.</p>
          <p>This is the second paragraph with more detailed information about the topic being discussed.</p>
          <h2>Subsection Title</h2>
          <p>This paragraph is under a subsection and contains more valuable content.</p>
        </div>
      `;

      // Mock article element - main content container
      const mockArticle = {
        tagName: 'ARTICLE',
        textContent: 'Test Article Title John Doe 2024-01-15 This is the first paragraph of the article content. It contains substantial text that should be extracted. This is the second paragraph with more detailed information about the topic being discussed. Subsection Title This paragraph is under a subsection and contains more valuable content.',
        innerHTML: mockArticleHTML,
        id: '',
        className: '',
        children: [],
        querySelectorAll: jest.fn().mockImplementation((selector: string) => {
          if (selector.includes('script') || selector.includes('style')) {
            return []; // No unwanted elements
          }
          if (selector === 'a') {
            return []; // No links for link ratio test
          }
          if (selector === 'p') {
            return [{}, {}, {}]; // 3 paragraphs
          }
          return [];
        }),
        querySelector: jest.fn().mockReturnValue(null),
        cloneNode: jest.fn().mockReturnValue({
          innerHTML: mockArticleHTML,
          querySelectorAll: jest.fn().mockReturnValue([]),
          textContent: 'Test Article Title John Doe...'
        }),
        remove: jest.fn(),
        getAttribute: jest.fn().mockReturnValue(null),
        setAttribute: jest.fn(),
      };

      // Mock document.querySelector to return the article element
      (global as any).document.querySelector = jest.fn().mockImplementation((selector: string) => {
        if (selector === 'article') {
          return mockArticle;
        }
        if (selector === 'meta[property="og:title"]') {
          return { getAttribute: () => 'Test Article Title' };
        }
        if (selector === 'meta[name="author"]') {
          return { getAttribute: () => 'John Doe' };
        }
        if (selector === 'meta[name="keywords"]') {
          return { getAttribute: () => 'test, article, content, extraction' };
        }
        return null;
      });

      // Mock document.querySelectorAll for tag extraction
      (global as any).document.querySelectorAll = jest.fn().mockImplementation((selector: string) => {
        if (selector.includes('.tag') || selector.includes('.category')) {
          return [
            { textContent: 'Technology' },
            { textContent: 'Testing' }
          ];
        }
        return [];
      });

      // Mock document.title
      (global as any).document.title = 'Test Article Title - Example Site';

      // Act: Extract content
      const result = await extractor.extractContent();

      // Assert: Verify main content extraction
      expect(result).toBeDefined();
      expect(result.content).toContain('This is the first paragraph');
      expect(result.content).toContain('This is the second paragraph');
      expect(result.content).toContain('Subsection Title');
      
      // Verify metadata extraction
      expect(result.metadata).toBeDefined();
      expect(result.metadata.title).toBe('Test Article Title');
      expect(result.metadata.url).toBe('https://example.com/article/test');
      expect(result.metadata.author).toBe('John Doe');
      expect(result.metadata.tags).toContain('test');
      expect(result.metadata.tags).toContain('article');
      
      // Verify content quality metrics
      expect(result.wordCount).toBeGreaterThan(0);
      expect(result.readingTime).toBeGreaterThan(0);
      expect(result.cleanedContent).toBeDefined();

      // Verify that document.querySelector was called with article selector
      expect((global as any).document.querySelector).toHaveBeenCalledWith('article');
    });

    test('C.1.1a - Extract content from article with multiple content selectors', async () => {
      // Setup: Test different content selectors priority
      const mockMainContent = `
        <h1>Main Content Title</h1>
        <p>This is content in a main element instead of article.</p>
        <p>It should still be extracted properly.</p>
      `;

      const mockMain = {
        tagName: 'MAIN',
        textContent: 'Main Content Title This is content in a main element instead of article. It should still be extracted properly.',
        innerHTML: mockMainContent,
        id: '',
        className: '',
        children: [],
        querySelectorAll: jest.fn().mockImplementation((selector: string) => {
          if (selector.includes('script') || selector.includes('style')) {
            return [];
          }
          if (selector === 'a') {
            return [];
          }
          if (selector === 'p') {
            return [{}, {}]; // 2 paragraphs
          }
          return [];
        }),
        querySelector: jest.fn().mockReturnValue(null),
        cloneNode: jest.fn().mockReturnValue({
          innerHTML: mockMainContent,
          querySelectorAll: jest.fn().mockReturnValue([])
        }),
        remove: jest.fn(),
        getAttribute: jest.fn().mockReturnValue(null),
        setAttribute: jest.fn(),
      };

      // Mock querySelector to return null for article, but main for main selector
      (global as any).document.querySelector = jest.fn().mockImplementation((selector: string) => {
        if (selector === 'article') {
          return null; // No article element
        }
        if (selector === 'main') {
          return mockMain;
        }
        if (selector === 'meta[property="og:title"]') {
          return { getAttribute: () => 'Main Content Title' };
        }
        return null;
      });

      (global as any).document.querySelectorAll = jest.fn().mockReturnValue([]);
      (global as any).document.title = 'Main Content Title';

      // Act
      const result = await extractor.extractContent();

      // Assert
      expect(result.content).toContain('This is content in a main element');
      expect(result.metadata.title).toBe('Main Content Title');
      
      // Verify fallback selector was used
      expect((global as any).document.querySelector).toHaveBeenCalledWith('article');
      expect((global as any).document.querySelector).toHaveBeenCalledWith('main');
    });

    test('C.1.1b - Extract content with custom selectors', async () => {
      // Setup: Test custom selector functionality
      const mockCustomContent = `
        <h2>Custom Content Area</h2>
        <p>This content is in a custom selector area.</p>
        <p>It should be extracted when custom selectors are provided.</p>
      `;

      const mockCustomElement = {
        tagName: 'DIV',
        textContent: 'Custom Content Area This content is in a custom selector area. It should be extracted when custom selectors are provided.',
        innerHTML: mockCustomContent,
        id: 'custom-content',
        className: 'content-area',
        children: [],
        querySelectorAll: jest.fn().mockImplementation((selector: string) => {
          if (selector.includes('script') || selector.includes('style')) {
            return [];
          }
          return [];
        }),
        querySelector: jest.fn().mockReturnValue(null),
        cloneNode: jest.fn().mockReturnValue({
          innerHTML: mockCustomContent,
          querySelectorAll: jest.fn().mockReturnValue([])
        }),
        remove: jest.fn(),
        getAttribute: jest.fn().mockReturnValue(null),
        setAttribute: jest.fn(),
      };

      (global as any).document.querySelector = jest.fn().mockImplementation((selector: string) => {
        if (selector === '#custom-content') {
          return mockCustomElement;
        }
        if (selector === 'meta[property="og:title"]') {
          return { getAttribute: () => 'Custom Content Title' };
        }
        return null;
      });

      (global as any).document.querySelectorAll = jest.fn().mockReturnValue([]);
      (global as any).document.title = 'Custom Content Title';

      // Act: Extract with custom selectors
      const result = await extractor.extractContent({
        customSelectors: ['#custom-content']
      });

      // Assert
      expect(result.content).toContain('This content is in a custom selector area');
      expect(result.metadata.title).toBe('Custom Content Title');
      
      // Verify custom selector was used first
      expect((global as any).document.querySelector).toHaveBeenCalledWith('#custom-content');
    });    // TODO: C.1.1c - Fallback to body test requires more complex DOM mocking
    // Will be implemented in a future iteration with proper JSDOM setup
  });
});
