// Generated by Copilot
// Unit test for SettingsManager: TypeScript version

import { SettingsManager } from '../../utils/settings-manager';

// Mock Chrome APIs for testing
(global as any).chrome = {
  storage: {
    sync: {
      get: jest.fn(),
      set: jest.fn()
    }
  },
  runtime: {
    lastError: undefined as chrome.runtime.LastError | undefined
  }
};

describe('SettingsManager - Load/Save Operations', () => {
  let manager: SettingsManager;
  beforeEach(() => {
    manager = new SettingsManager();
    jest.clearAllMocks();
    (global as any).chrome.runtime.lastError = undefined;
  });

  test('1.1 Verify all schema fields have default values', async () => {
    // Test that all schema fields have proper default values
    const defaults = await manager.getDefaults();
    
    // List of expected default keys and values (from schema)
    const expectedDefaults = {
      repositoryPath: '',
      githubToken: '',
      githubRepo: '',
      defaultFolder: 'unsorted',
      customFolder: '',
      fileNamingPattern: 'YYYY-MM-DD-domain-title',
      customNamingPattern: '',
      autoCommit: true,
      autoPush: false,
      captureImages: true,
      removeAds: true,
      removeNavigation: true,
      preserveFormatting: true,
      generateTags: true,
      generateSummary: false,
      enhanceMetadata: true,
      debugMode: false,
      performanceMonitoring: false,
      maxImageSize: 5,
      showNotifications: true,
      darkMode: false,
    };

    expect(defaults).toMatchObject(expectedDefaults);
      // All keys present
    Object.keys(expectedDefaults).forEach(key => {
      expect(defaults).toHaveProperty(key, (expectedDefaults as any)[key]);
    });
  });  test('1.2 Test loading when storage is empty', async () => {
    // Mock storage to return empty object
    ((global as any).chrome.storage.sync.get as jest.Mock).mockImplementation((keys, callback) => {
      callback({});
    });

    const settings = await manager.getSettings();
    expect(settings).toEqual({});
    expect((global as any).chrome.storage.sync.get).toHaveBeenCalledWith(['prismWeaveSettings'], expect.any(Function));
  });  test('1.3 Test saving valid settings', async () => {
    // Mock storage set to succeed
    ((global as any).chrome.storage.sync.set as jest.Mock).mockImplementation((data, callback) => {
      callback();
    });

    const testSettings = {
      autoCommit: false,
      defaultFolder: 'tech',
      captureImages: false
    };

    const result = await manager.updateSettings(testSettings);
    expect(result).toBe(true);
    expect((global as any).chrome.storage.sync.set).toHaveBeenCalledWith(
      { prismWeaveSettings: expect.objectContaining(testSettings) },
      expect.any(Function)
    );
  });

  test('Validate settings with correct types', () => {
    const validSettings = {
      autoCommit: true,
      defaultFolder: 'tech',
      maxImageSize: 10,
      githubRepo: 'owner/repo'
    };

    const validation = manager.validateSettings(validSettings);
    expect(validation.isValid).toBe(true);
    expect(validation.errors).toEqual([]);
  });

  test('Validate settings with incorrect types', () => {
    const invalidSettings = {
      autoCommit: 'yes', // should be boolean
      maxImageSize: 'large', // should be number
      githubRepo: 'invalid-format' // should match pattern
    };

    const validation = manager.validateSettings(invalidSettings as any);
    expect(validation.isValid).toBe(false);
    expect(validation.errors.length).toBeGreaterThan(0);
  });  test('Reset settings to defaults', async () => {
    // Mock storage set to succeed
    ((global as any).chrome.storage.sync.set as jest.Mock).mockImplementation((data, callback) => {
      callback();
    });

    const result = await manager.resetSettings();
    expect(result).toBe(true);
    
    const defaults = await manager.getDefaults();
    expect((global as any).chrome.storage.sync.set).toHaveBeenCalledWith(
      { prismWeaveSettings: defaults },
      expect.any(Function)
    );
  });
  test('Handle storage errors gracefully', async () => {
    // Mock storage to fail
    (global as any).chrome.runtime.lastError = { message: 'Storage quota exceeded' };
    ((global as any).chrome.storage.sync.get as jest.Mock).mockImplementation((keys, callback) => {
      callback({});
    });

    const settings = await manager.getSettings();
    expect(settings).toEqual({});
  });
  test('Export settings (sanitized)', async () => {
    // Mock storage to return settings with sensitive data
    ((global as any).chrome.storage.sync.get as jest.Mock).mockImplementation((keys, callback) => {
      callback({
        prismWeaveSettings: {
          githubToken: 'secret-token',
          autoCommit: true,
          defaultFolder: 'tech'
        }
      });
    });

    const exported = await manager.exportSettings();
    const parsed = JSON.parse(exported);
    
    expect(parsed.githubToken).toBe('[REDACTED]');
    expect(parsed.autoCommit).toBe(true);
    expect(parsed.defaultFolder).toBe('tech');
  });
  test('Import settings successfully', async () => {
    // Mock storage set to succeed
    ((global as any).chrome.storage.sync.set as jest.Mock).mockImplementation((data, callback) => {
      callback();
    });

    const importData = JSON.stringify({
      autoCommit: false,
      defaultFolder: 'business'
    });

    const result = await manager.importSettings(importData);
    expect(result).toBe(true);
  });

  test('Import invalid JSON fails gracefully', async () => {
    const invalidJson = '{ invalid json }';
    
    const result = await manager.importSettings(invalidJson);
    expect(result).toBe(false);
  });
});
