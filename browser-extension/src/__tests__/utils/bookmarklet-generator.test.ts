// Generated by Copilot
// Comprehensive tests for BookmarkletGenerator - Testing public interface only

import {
  BookmarkletGenerator,
  IBookmarkletConfig,
  IBookmarkletGenerationOptions,
} from '../../utils/bookmarklet-generator';

describe('BookmarkletGenerator', () => {
  const validConfig: IBookmarkletConfig = {
    githubToken: 'ghp_1234567890abcdef1234567890abcdef12345678',
    githubRepo: 'testuser/testrepo',
    defaultFolder: 'documents',
    customFolder: '',
    fileNamingPattern: '{date}-{title}',
    commitMessageTemplate: 'Add captured content: {title}',
    captureImages: true,
    removeAds: true,
    removeNavigation: true,
  };

  describe('generateBookmarklet', () => {
    test('should generate valid bookmarklet with minimal config', () => {
      const minimalConfig: IBookmarkletConfig = {
        githubToken: 'ghp_1234567890abcdef1234567890abcdef12345678',
        githubRepo: 'user/repo',
      };

      const bookmarklet = BookmarkletGenerator.generateBookmarklet(minimalConfig);

      expect(bookmarklet).toMatch(/^javascript:\(/);
      expect(bookmarklet).toMatch(/\)\(\);$/);
      expect(bookmarklet.length).toBeGreaterThan(50);
      expect(bookmarklet.length).toBeLessThan(15000); // Should be within URL limits
    });

    test('should generate bookmarklet with full config', () => {
      const bookmarklet = BookmarkletGenerator.generateBookmarklet(validConfig);

      expect(bookmarklet).toMatch(/^javascript:\(/);
      expect(bookmarklet).toMatch(/\)\(\);$/);
      expect(typeof bookmarklet).toBe('string');
      expect(bookmarklet.length).toBeGreaterThan(100);
    });

    test('should respect minification option', () => {
      const minified = BookmarkletGenerator.generateBookmarklet(validConfig, { minify: true });
      const unminified = BookmarkletGenerator.generateBookmarklet(validConfig, { minify: false });

      expect(minified.length).toBeLessThanOrEqual(unminified.length);
      expect(minified).toMatch(/^javascript:\(/);
      expect(unminified).toMatch(/^javascript:\(/);
    });

    test('should include debug info when requested', () => {
      const withDebug = BookmarkletGenerator.generateBookmarklet(validConfig, {
        includeDebugInfo: true,
      });

      expect(withDebug).toMatch(/^javascript:\(/);
      expect(withDebug.length).toBeGreaterThan(100);
    });

    test('should handle custom version', () => {
      const customVersion = BookmarkletGenerator.generateBookmarklet(validConfig, {
        version: '2.0.0',
      });

      expect(customVersion).toMatch(/^javascript:\(/);
      expect(customVersion.length).toBeGreaterThan(100);
    });

    test('should handle custom domain', () => {
      const customDomain = BookmarkletGenerator.generateBookmarklet(validConfig, {
        customDomain: 'https://custom.example.com',
      });

      expect(customDomain).toMatch(/^javascript:\(/);
      expect(customDomain.length).toBeGreaterThan(100);
    });
  });

  describe('configuration handling', () => {
    test('should handle empty optional fields', () => {
      const configWithEmptyFields = {
        githubToken: 'ghp_1234567890abcdef1234567890abcdef12345678',
        githubRepo: 'user/repo',
        defaultFolder: '',
        customFolder: '',
        fileNamingPattern: '',
        commitMessageTemplate: '',
      };

      const bookmarklet = BookmarkletGenerator.generateBookmarklet(configWithEmptyFields);
      expect(bookmarklet).toMatch(/^javascript:\(/);
    });

    test('should handle boolean options correctly', () => {
      const allTrueConfig = {
        ...validConfig,
        captureImages: true,
        removeAds: true,
        removeNavigation: true,
      };

      const allFalseConfig = {
        ...validConfig,
        captureImages: false,
        removeAds: false,
        removeNavigation: false,
      };

      const trueBoomarklet = BookmarkletGenerator.generateBookmarklet(allTrueConfig);
      const falseBoomarklet = BookmarkletGenerator.generateBookmarklet(allFalseConfig);

      expect(trueBoomarklet).toMatch(/^javascript:\(/);
      expect(falseBoomarklet).toMatch(/^javascript:\(/);
      expect(trueBoomarklet).not.toBe(falseBoomarklet);
    });

    test('should handle special characters in config', () => {
      const configWithSpecialChars = {
        ...validConfig,
        commitMessageTemplate: 'Add: {title} - "Special" & <chars>',
        defaultFolder: 'docs/with spaces',
      };

      const bookmarklet = BookmarkletGenerator.generateBookmarklet(configWithSpecialChars);
      expect(bookmarklet).toMatch(/^javascript:\(/);
      expect(bookmarklet).not.toContain('undefined');
    });

    test('should handle unicode characters', () => {
      const configWithUnicode = {
        ...validConfig,
        defaultFolder: 'документы',
        commitMessageTemplate: 'Добавить: {title} 📝',
      };

      const bookmarklet = BookmarkletGenerator.generateBookmarklet(configWithUnicode);
      expect(bookmarklet).toMatch(/^javascript:\(/);
    });
  });

  describe('generation options', () => {
    test('should handle all options combined', () => {
      const allOptions: IBookmarkletGenerationOptions = {
        minify: true,
        includeDebugInfo: true,
        customDomain: 'https://example.com',
        version: '1.2.3',
      };

      const bookmarklet = BookmarkletGenerator.generateBookmarklet(validConfig, allOptions);
      expect(bookmarklet).toMatch(/^javascript:\(/);
      expect(bookmarklet.length).toBeGreaterThan(50);
    });

    test('should handle minimal options', () => {
      const minimalOptions: IBookmarkletGenerationOptions = {};

      const bookmarklet = BookmarkletGenerator.generateBookmarklet(validConfig, minimalOptions);
      expect(bookmarklet).toMatch(/^javascript:\(/);
    });

    test('should handle only minify option', () => {
      const onlyMinify = BookmarkletGenerator.generateBookmarklet(validConfig, { minify: false });
      const defaultMinify = BookmarkletGenerator.generateBookmarklet(validConfig);

      expect(onlyMinify).toMatch(/^javascript:\(/);
      expect(defaultMinify).toMatch(/^javascript:\(/);
    });
  });

  describe('edge cases and robustness', () => {
    test('should handle minimal valid config', () => {
      const minimalConfig: IBookmarkletConfig = {
        githubToken: 'ghp_1234567890abcdef1234567890abcdef12345678',
        githubRepo: 'user/repo',
      };

      const bookmarklet = BookmarkletGenerator.generateBookmarklet(minimalConfig);
      expect(bookmarklet).toMatch(/^javascript:\(/);
      expect(bookmarklet.length).toBeGreaterThan(50);
    });

    test('should produce different output for different configs', () => {
      const config1 = {
        githubToken: 'ghp_1234567890abcdef1234567890abcdef12345678',
        githubRepo: 'user1/repo1',
      };

      const config2 = {
        githubToken: 'ghp_1234567890abcdef1234567890abcdef12345678',
        githubRepo: 'user2/repo2',
      };

      const bookmarklet1 = BookmarkletGenerator.generateBookmarklet(config1);
      const bookmarklet2 = BookmarkletGenerator.generateBookmarklet(config2);

      expect(bookmarklet1).not.toBe(bookmarklet2);
      expect(bookmarklet1).toMatch(/^javascript:\(/);
      expect(bookmarklet2).toMatch(/^javascript:\(/);
    });

    test('should handle all configuration combinations', () => {
      const allCombinations = [
        { captureImages: true, removeAds: true, removeNavigation: true },
        { captureImages: true, removeAds: true, removeNavigation: false },
        { captureImages: true, removeAds: false, removeNavigation: true },
        { captureImages: true, removeAds: false, removeNavigation: false },
        { captureImages: false, removeAds: true, removeNavigation: true },
        { captureImages: false, removeAds: true, removeNavigation: false },
        { captureImages: false, removeAds: false, removeNavigation: true },
        { captureImages: false, removeAds: false, removeNavigation: false },
      ];

      allCombinations.forEach((combination, index) => {
        const config = { ...validConfig, ...combination };
        const bookmarklet = BookmarkletGenerator.generateBookmarklet(config);

        expect(bookmarklet).toMatch(/^javascript:\(/);
        expect(bookmarklet.length).toBeGreaterThan(50);
      });
    });
  });

  describe('output validation', () => {
    test('should always produce valid JavaScript URL', () => {
      const bookmarklet = BookmarkletGenerator.generateBookmarklet(validConfig);

      // Should start with javascript: and end with ();
      expect(bookmarklet).toMatch(/^javascript:\(/);
      expect(bookmarklet).toMatch(/\)\(\);$/);

      // Should not contain problematic characters
      expect(bookmarklet).not.toContain('"\n'); // No quotes followed by newline
      expect(bookmarklet).not.toContain('\n'); // No literal newlines
    });

    test('should produce consistent output for same input', () => {
      const bookmarklet1 = BookmarkletGenerator.generateBookmarklet(validConfig);
      const bookmarklet2 = BookmarkletGenerator.generateBookmarklet(validConfig);

      expect(bookmarklet1).toBe(bookmarklet2);
    });

    test('should respect URL length constraints', () => {
      const bookmarklet = BookmarkletGenerator.generateBookmarklet(validConfig);

      // Most browsers support URLs up to 15000+ characters
      expect(bookmarklet.length).toBeLessThan(15000);

      // But should still be substantial enough to be functional
      expect(bookmarklet.length).toBeGreaterThan(100);
    });
  });
});
