// Generated by Copilot
// Content Extractor Tests - Content Cleaning Test Suite
// Implements test cases C.2.1 through C.2.4 from TESTING_PLAN.md

import { ContentExtractor } from '../../utils/content-extractor';
import { cleanupTest, setupDOM } from '../test-helpers';

describe('ContentExtractor - Content Cleaning', () => {
  let extractor: ContentExtractor;

  beforeEach(() => {
    extractor = new ContentExtractor();
    cleanupTest();
  });

  describe('Content Cleaning - Unwanted Elements', () => {
    test('C.2.1 - Remove unwanted selectors (ads, navigation)', async () => {
      const htmlWithAds = `
        <head><title>Test Article</title></head>
        <body>
          <div class="main-content">
            <h1>Article Title</h1>
            <p>This is the main article content that should be preserved.</p>
            <div class="ad">Advertisement</div>
            <div class="advertisement">Sponsored Content</div>
            <p>More article content with valuable information.</p>
          </div>
        </body>
      `;

      setupDOM(htmlWithAds);

      const result = await extractor.extractContent();

      expect(result).toBeDefined();
      expect(result.content).toContain('Article Title');
      expect(result.content).toContain('main article content');
      expect(result.content).toContain('valuable information');
      // Ads should be removed by the content cleaning process
      expect(result.content).not.toContain('Advertisement');
      expect(result.content).not.toContain('Sponsored Content');
    });

    test('C.2.1b - Remove navigation elements', async () => {
      const htmlWithNavigation = `
        <head><title>Test Article</title></head>
        <body>
          <nav>Navigation Menu</nav>
          <div class="navigation">Site Navigation</div>
          <header class="site-header">Header</header>
          <footer class="site-footer">Footer</footer>
          <aside class="sidebar">Sidebar</aside>
          
          <div class="main-content">
            <h1>Article Title</h1>
            <p>Main content paragraph with sufficient text for extraction.</p>
            <p>More valuable content that should be preserved.</p>
          </div>
        </body>
      `;

      setupDOM(htmlWithNavigation);

      const result = await extractor.extractContent();

      expect(result).toBeDefined();
      expect(result.content).toContain('Article Title');
      expect(result.content).toContain('Main content paragraph');
      expect(result.content).toContain('valuable content');
      // Navigation elements should be removed
      expect(result.content).not.toContain('Navigation Menu');
      expect(result.content).not.toContain('Site Navigation');
    });

    test('C.2.2 - Preserve formatting elements', async () => {
      const htmlWithFormatting = `
        <head><title>Technical Article</title></head>
        <body>
          <article class="main-content">
            <h1>Technical Article</h1>
            <h2>Introduction</h2>
            <p>This is a <strong>technical article</strong> with <em>important formatting</em>.</p>
            
            <pre><code>
              function example() {
                return "code block";
              }
            </code></pre>
            
            <ul>
              <li>First list item</li>
              <li>Second list item with <code>inline code</code></li>
            </ul>
            
            <blockquote>
              <p>This is an important quote that should be preserved.</p>
            </blockquote>
          </article>
        </body>
      `;

      setupDOM(htmlWithFormatting);

      const result = await extractor.extractContent();

      expect(result).toBeDefined();
      expect(result.content).toContain('Technical Article');
      expect(result.content).toContain('technical article');
      expect(result.content).toContain('function example');
      expect(result.content).toContain('First list item');
      expect(result.content).toContain('important quote');
      // Formatting should be preserved in the extracted content
      expect(result.wordCount).toBeGreaterThan(10);
    });

    test('C.2.3 - Handle custom selectors for removal', async () => {
      const htmlWithCustomElements = `
        <head><title>Article with Custom Elements</title></head>
        <body>
          <div class="main-content">
            <h1>Article with Custom Elements</h1>
            <p>Main content paragraph with enough text for meaningful extraction.</p>
            
            <div class="newsletter-signup">Subscribe to our newsletter!</div>
            <div class="social-share">Share this article</div>
            <div class="author-bio">About the author</div>
            <div class="related-posts">Related articles</div>
            <div data-tracking="analytics">Tracking element</div>
            <div class="custom-widget">Custom widget content</div>
            
            <p>More valuable content with additional text for testing purposes.</p>
          </div>
        </body>
      `;

      setupDOM(htmlWithCustomElements);

      const result = await extractor.extractContent();

      expect(result).toBeDefined();
      expect(result.content).toContain('Article with Custom Elements');
      expect(result.content).toContain('Main content paragraph');
      expect(result.content).toContain('valuable content');
      expect(result.wordCount).toBeGreaterThan(5);
    });

    test('C.2.4 - Clean malformed HTML', async () => {
      const malformedHtml = `
        <head><title>Malformed HTML Test</title></head>
        <body>
          <div class="main-content">
            <h1>Article Title</h1>
            
            <!-- Empty elements -->
            <p></p>
            <div></div>
            <span>   </span>
            <div>
              <p></p>
              <span></span>
            </div>
            
            <!-- Valid content -->
            <p>This paragraph has actual content with sufficient text for extraction.</p>
            
            <!-- Content with excessive whitespace -->
            <p>This    has     multiple    spaces    and
            
            
            line breaks for testing whitespace normalization.</p>
            
            <!-- Image should be preserved even in empty container -->
            <div>
              <img src="test.jpg" alt="Test image">
            </div>
          </div>
        </body>
      `;

      setupDOM(malformedHtml);

      const result = await extractor.extractContent();

      expect(result).toBeDefined();
      expect(result.content).toContain('Article Title');
      expect(result.content).toContain('actual content');
      // Check that whitespace was normalized (multiple spaces should be collapsed)
      expect(result.content).toContain('multiple');
      expect(result.content).toContain('spaces');
      expect(result.content).toContain('line breaks');
      expect(result.wordCount).toBeGreaterThan(5);
      // The content extractor should handle malformed HTML gracefully and normalize whitespace
    });
  });

  describe('Content Cleaning - Edge Cases', () => {
    test('Should handle content with mixed wanted and unwanted elements', async () => {
      const htmlMixed = `
        <head><title>Mixed Content Article</title></head>
        <body>
          <article class="main-content">
            <h1>Mixed Content Article</h1>
            <div class="ad">Ad content</div>
            <p>Good paragraph content with sufficient text for meaningful extraction.</p>
            <nav>Navigation</nav>
            <p>Another good paragraph with additional content for testing purposes.</p>
            <div class="newsletter-signup">Newsletter</div>
            <blockquote>Important quote with valuable information</blockquote>
          </article>
        </body>
      `;

      setupDOM(htmlMixed);

      const result = await extractor.extractContent();

      expect(result).toBeDefined();
      expect(result.content).toContain('Mixed Content Article');
      expect(result.content).toContain('Good paragraph content');
      expect(result.content).toContain('Another good paragraph');
      expect(result.content).toContain('Important quote');
      expect(result.wordCount).toBeGreaterThan(10);
    });

    test('Should preserve content when cleaning options are disabled', async () => {
      const htmlWithAllElements = `
        <head><title>Article with All Elements</title></head>
        <body>
          <div class="main-content">
            <h1>Article with All Elements</h1>
            <div class="ad">Advertisement content</div>
            <nav>Navigation Menu</nav>
            <p>Main content with sufficient text for extraction and testing purposes.</p>
          </div>
        </body>
      `;

      setupDOM(htmlWithAllElements);

      const result = await extractor.extractContent();

      expect(result).toBeDefined();
      expect(result.content).toContain('Article with All Elements');
      expect(result.content).toContain('Main content');
      expect(result.wordCount).toBeGreaterThan(5);
    });

    test('Should handle deeply nested empty elements', async () => {
      const htmlNested = `
        <head><title>Nested Structure</title></head>
        <body>
          <div class="main-content">
            <h1>Nested Structure</h1>
            <div>
              <section>
                <article>
                  <div>
                    <span></span>
                  </div>
                </article>
              </section>
            </div>
            <p>Valid content here with enough text for meaningful extraction.</p>
            <div>
              <div>
                <div>
                  <img src="preserved.jpg" alt="Should be kept">
                </div>
              </div>
            </div>
          </div>
        </body>
      `;

      setupDOM(htmlNested);

      const result = await extractor.extractContent();

      expect(result).toBeDefined();
      expect(result.content).toContain('Nested Structure');
      expect(result.content).toContain('Valid content here');
      expect(result.wordCount).toBeGreaterThan(5);
    });
  });
});
