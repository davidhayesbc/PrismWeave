// Test our enhanced code block processing specifically for shell scripts
// Generated by Copilot
// Tests for shell script code block issues and markdown conversion improvements

import { describe, expect, jest, test } from '@jest/globals';

// Since this is a browser extension test, we need to mock some browser APIs
(globalThis as any).chrome = {
  runtime: {
    sendMessage: jest.fn(),
    lastError: null,
  },
  storage: {
    sync: {
      get: jest.fn(),
      set: jest.fn(),
    },
  },
};

// Mock document for tests
(globalThis as any).document = {
  createElement: jest.fn(() => ({
    innerHTML: '',
    textContent: '',
    querySelectorAll: jest.fn(() => []),
    querySelector: jest.fn(() => null),
  })),
  querySelectorAll: jest.fn(() => []),
  querySelector: jest.fn(() => null),
};

describe('Shell Script Code Block Processing', () => {
  describe('Service Worker Markdown Conversion', () => {
    test('S.1.1 - Handle shell script code blocks with special characters', () => {
      // Arrange: HTML with shell script containing special characters
      const htmlInput = `
        <pre><code class="language-bash">#!/usr/bin/env zsh
# Fail the transcript if any command fails
set -e

# Load utility functions and variables for user credentials
source "../../transcript_helpers.sh"

# Run a UCM transcript to upload some code to load in projects.
transcript_ucm transcript prelude.md

# I should be able to see the fixture project as an unauthenticated user.
fetch "$unauthenticated_user" GET project-get-simple '/users/test/projects/publictestproject'

# I should be able to create a new project as an authenticated user.
fetch "$transcripts_user" POST project-create '/users/transcripts/projects/containers' '{
    "summary": "This is my project",
    "visibility": "private",
    "tags": []
}'</code></pre>
      `;

      // Import the service worker function for testing
      const { simpleMarkdownConversion } = require('../../src/background/service-worker');

      // Act: Convert HTML to markdown
      const result = simpleMarkdownConversion(
        htmlInput,
        'Test Shell Script',
        'https://example.com'
      );

      // Assert: Verify shell script content is preserved
      expect(result).toContain('```bash');
      expect(result).toContain('#!/usr/bin/env zsh');
      expect(result).toContain('set -e');
      expect(result).toContain('source "../../transcript_helpers.sh"');
      expect(result).toContain('fetch "$unauthenticated_user"');
      expect(result).toContain('"summary": "This is my project"');

      // Verify special characters are preserved
      expect(result).toContain('$');
      expect(result).toContain('"');
      expect(result).toContain("'");
      expect(result).toContain('{');
      expect(result).toContain('}');

      // Verify no HTML entities remain
      expect(result).not.toContain('&lt;');
      expect(result).not.toContain('&gt;');
      expect(result).not.toContain('&amp;');
      expect(result).not.toContain('&quot;');
    });

    test('S.1.2 - Handle code blocks without language specification', () => {
      // Arrange: HTML with unspecified language code block
      const htmlInput = `
        <pre><code>#!/bin/bash
echo "This is a shell script without language tag"
for i in {1..5}; do
  echo "Iteration $i"
done</code></pre>
      `;

      const { simpleMarkdownConversion } = require('../../src/background/service-worker');

      // Act: Convert HTML to markdown
      const result = simpleMarkdownConversion(htmlInput, 'Test Script', 'https://example.com');

      // Assert: Verify code block is created without language tag
      expect(result).toContain('```\n#!/bin/bash');
      expect(result).toContain('echo "This is a shell script without language tag"');
      expect(result).toContain('for i in {1..5}; do');
      expect(result).toContain('echo "Iteration $i"');
      expect(result).toContain('done\n```');
    });

    test('S.1.3 - Handle inline code with special characters', () => {
      // Arrange: HTML with inline code containing special characters
      const htmlInput = `
        <p>Use the command <code>grep -r "pattern" /path/to/dir</code> to search files.</p>
        <p>The variable <code>$HOME</code> contains your home directory path.</p>
        <p>JSON format: <code>{"key": "value"}</code></p>
      `;

      const { simpleMarkdownConversion } = require('../../src/background/service-worker');

      // Act: Convert HTML to markdown
      const result = simpleMarkdownConversion(htmlInput, 'Test Inline Code', 'https://example.com');

      // Assert: Verify inline code preservation
      expect(result).toContain('`grep -r "pattern" /path/to/dir`');
      expect(result).toContain('`$HOME`');
      expect(result).toContain('`{"key": "value"}`');

      // Verify special characters are preserved in inline code
      expect(result).not.toContain('&lt;');
      expect(result).not.toContain('&gt;');
      expect(result).not.toContain('&amp;');
      expect(result).not.toContain('&quot;');
    });

    test('S.1.4 - Handle nested code blocks (code within markdown example)', () => {
      // Arrange: HTML representing markdown that contains code blocks
      const htmlInput = `
        <pre><code class="language-markdown"># Testing the \`view\` command

First, let's write a simple definition to view:

\`\`\` unison
isZero = cases
  0 -> true
  _ -> false
\`\`\`

Now we add the definition to the codebase, and view it.

\`\`\` ucm
scratch/main> update
scratch/main> view isZero
\`\`\`</code></pre>
      `;

      const { simpleMarkdownConversion } = require('../../src/background/service-worker');

      // Act: Convert HTML to markdown
      const result = simpleMarkdownConversion(htmlInput, 'Test Nested Code', 'https://example.com');

      // Assert: Verify nested structure is preserved
      expect(result).toContain('```markdown');
      expect(result).toContain('# Testing the `view` command');
      expect(result).toContain('``` unison');
      expect(result).toContain('isZero = cases');
      expect(result).toContain('``` ucm');
      expect(result).toContain('scratch/main> update');
      expect(result).toContain('scratch/main> view isZero');
    });

    test('S.1.5 - Handle multiple language-specific code blocks', () => {
      // Arrange: HTML with multiple different language code blocks
      const htmlInput = `
        <h2>Different Languages</h2>
        <pre><code class="language-javascript">const message = "Hello, World!";
console.log(message);</code></pre>
        
        <pre><code class="language-python">message = "Hello, World!"
print(message)</code></pre>
        
        <pre><code class="language-sql">SELECT * FROM users WHERE active = true;</code></pre>
        
        <pre><code class="language-dockerfile">FROM node:16-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install</code></pre>
      `;

      const { simpleMarkdownConversion } = require('../../src/background/service-worker');

      // Act: Convert HTML to markdown
      const result = simpleMarkdownConversion(
        htmlInput,
        'Test Multiple Languages',
        'https://example.com'
      );

      // Assert: Verify all language tags are preserved
      expect(result).toContain('```javascript');
      expect(result).toContain('const message = "Hello, World!";');
      expect(result).toContain('```python');
      expect(result).toContain('message = "Hello, World!"');
      expect(result).toContain('```sql');
      expect(result).toContain('SELECT * FROM users WHERE active = true;');
      expect(result).toContain('```dockerfile');
      expect(result).toContain('FROM node:16-alpine');
    });
  });

  describe('Language Detection', () => {
    test('L.1.1 - Extract language from various class patterns', () => {
      const { MarkdownConverter } = require('../../src/utils/markdown-converter');
      const converter = new MarkdownConverter();

      // Test various class name patterns
      const testCases = [
        { className: 'language-bash', expected: 'bash' },
        { className: 'language-shell', expected: 'bash' },
        { className: 'language-zsh', expected: 'zsh' },
        { className: 'highlight-javascript', expected: 'javascript' },
        { className: 'hljs-python', expected: 'python' },
        { className: 'prism-typescript', expected: 'typescript' },
        { className: 'language-unison', expected: 'unison' },
        { className: 'language-ucm', expected: 'unison' },
        { className: 'console', expected: 'console' },
        { className: 'terminal', expected: 'bash' },
        { className: '', expected: '' },
        { className: 'unknown-language', expected: '' },
      ];

      testCases.forEach(({ className, expected }) => {
        const result = converter.extractLanguageFromClass(className);
        expect(result).toBe(expected);
      });
    });
  });

  describe('HTML Entity Handling', () => {
    test('H.1.1 - Decode HTML entities in code blocks', () => {
      const htmlInput = `
        <pre><code>&lt;script&gt;
  const data = {
    &quot;name&quot;: &quot;test&quot;,
    &quot;value&quot;: 123
  };
  if (data.value &gt; 100) {
    console.log(&quot;High value&quot;);
  }
&lt;/script&gt;</code></pre>
      `;

      const { simpleMarkdownConversion } = require('../../src/background/service-worker');

      // Act: Convert HTML to markdown
      const result = simpleMarkdownConversion(
        htmlInput,
        'Test HTML Entities',
        'https://example.com'
      );

      // Assert: Verify HTML entities are decoded
      expect(result).toContain('<script>');
      expect(result).toContain('</script>');
      expect(result).toContain('"name": "test"');
      expect(result).toContain('data.value > 100');
      expect(result).toContain('console.log("High value");');

      // Verify no HTML entities remain
      expect(result).not.toContain('&lt;');
      expect(result).not.toContain('&gt;');
      expect(result).not.toContain('&quot;');
      expect(result).not.toContain('&amp;');
    });

    test('H.1.2 - Handle mixed content with entities and regular text', () => {
      const htmlInput = `
        <p>Here's how to use grep:</p>
        <pre><code>grep -E "pattern.*&amp;.*" file.txt
echo "Found &gt; 5 matches"</code></pre>
        <p>The &amp; symbol is used for boolean AND operations.</p>
      `;

      const { simpleMarkdownConversion } = require('../../src/background/service-worker');

      // Act: Convert HTML to markdown
      const result = simpleMarkdownConversion(
        htmlInput,
        'Test Mixed Content',
        'https://example.com'
      );

      // Assert: Verify proper entity handling
      expect(result).toContain('grep -E "pattern.*&.*" file.txt');
      expect(result).toContain('echo "Found > 5 matches"');
      expect(result).toContain('The & symbol is used for boolean AND operations.');
    });
  });
});
