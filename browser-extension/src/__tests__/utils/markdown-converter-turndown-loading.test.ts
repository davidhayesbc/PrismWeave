// Generated by Copilot
// Test for TurndownService dynamic loading functionality

import { MarkdownConverter } from '../../utils/markdown-converter.js';

// Mock chrome runtime API
const mockChrome = {
  runtime: {
    getURL: jest.fn((path: string) => `chrome-extension://test/${path}`),
  },
};

(global as any).chrome = mockChrome;

// Mock TurndownService
const mockTurndownService = jest.fn().mockImplementation(() => ({
  turndown: jest.fn((html: string) => `# Mock Markdown\n\n${html}`),
  addRule: jest.fn(),
  remove: jest.fn(),
  use: jest.fn(),
}));

// Mock window object
Object.defineProperty(global, 'window', {
  value: {
    TurndownService: mockTurndownService,
  },
  writable: true,
});

// Mock document for script loading
Object.defineProperty(global, 'document', {
  value: {
    createElement: jest.fn((tag: string) => {
      const element = {
        tagName: tag.toUpperCase(),
        src: '',
        onload: null as (() => void) | null,
        onerror: null as (() => void) | null,
      };
      return element;
    }),
    head: {
      appendChild: jest.fn((script: any) => {
        // Simulate successful script loading
        setTimeout(() => {
          if (script.onload) {
            script.onload();
          }
        }, 0);
      }),
    },
  },
  writable: true,
});

describe('MarkdownConverter TurndownService Loading', () => {
  let converter: MarkdownConverter;

  beforeEach(() => {
    jest.clearAllMocks();
    converter = new MarkdownConverter();
  });

  afterEach(() => {
    // Reset window.TurndownService for each test
    (global as any).window.TurndownService = mockTurndownService;
  });

  it('should attempt to load TurndownService dynamically when not available', async () => {
    // Remove TurndownService to simulate it not being loaded
    (global as any).window.TurndownService = undefined;

    const testHtml = '<h1>Test</h1><p>Test content</p>';
    const metadata = {
      title: 'Test',
      url: 'https://example.com',
      extractedAt: new Date().toISOString(),
      contentLength: testHtml.length,
      method: 'test',
    };

    const result = await converter.convertToMarkdown(testHtml, metadata);

    // Should use fallback conversion since TurndownService is not available
    expect(result.markdown).toBeDefined();
    expect(result.metadata).toEqual(metadata);
  });

  it('should use TurndownService when available', async () => {
    const testHtml = '<h1>Test</h1><p>Test content</p>';
    const metadata = {
      title: 'Test',
      url: 'https://example.com',
      extractedAt: new Date().toISOString(),
      contentLength: testHtml.length,
      method: 'test',
    };

    const result = await converter.convertToMarkdown(testHtml, metadata);

    expect(result.markdown).toBeDefined();
    expect(result.metadata).toEqual(metadata);
    expect(mockTurndownService).toHaveBeenCalled();
  });

  it('should handle TurndownService loading errors gracefully', async () => {
    // Remove TurndownService to simulate loading failure
    (global as any).window.TurndownService = undefined;

    // Mock document.createElement to return a script that fails to load
    const mockScript = {
      src: '',
      onload: null as (() => void) | null,
      onerror: null as (() => void) | null,
    };

    (document.createElement as jest.Mock).mockReturnValue(mockScript);
    (document.head.appendChild as jest.Mock).mockImplementation((script: any) => {
      // Simulate script loading failure
      setTimeout(() => {
        if (script.onerror) {
          script.onerror();
        }
      }, 0);
    });

    const testHtml = '<h1>Test</h1><p>Test content</p>';
    const metadata = {
      title: 'Test',
      url: 'https://example.com',
      extractedAt: new Date().toISOString(),
      contentLength: testHtml.length,
      method: 'test',
    };

    // Should not throw an error and use fallback conversion
    const result = await converter.convertToMarkdown(testHtml, metadata);

    expect(result.markdown).toBeDefined();
    expect(result.metadata).toEqual(metadata);
  });

  it('should log appropriate messages during TurndownService loading', async () => {
    const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
    const consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation();
    const consoleInfoSpy = jest.spyOn(console, 'info').mockImplementation();

    const testHtml = '<h1>Test</h1><p>Test content</p>';
    const metadata = {
      title: 'Test',
      url: 'https://example.com',
      extractedAt: new Date().toISOString(),
      contentLength: testHtml.length,
      method: 'test',
    };

    await converter.convertToMarkdown(testHtml, metadata);

    expect(consoleSpy).toHaveBeenCalledWith('MarkdownConverter: Starting conversion');
    expect(consoleSpy).toHaveBeenCalledWith(
      'MarkdownConverter: Using TurndownService for conversion'
    );

    consoleSpy.mockRestore();
    consoleWarnSpy.mockRestore();
    consoleInfoSpy.mockRestore();
  });
});
