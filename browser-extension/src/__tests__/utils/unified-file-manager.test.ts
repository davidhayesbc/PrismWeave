// Generated by Copilot
// Unified File Manager Tests - Comprehensive test suite for file naming and folder detection
// Tests the metadata extraction and categorization logic

import { IDocumentMetadata } from '../../types/index.js';
import { UnifiedFileManager } from '../../utils/unified-file-manager.js';

describe('UnifiedFileManager - Folder Detection and File Organization', () => {
  let fileManager: UnifiedFileManager;

  beforeEach(() => {
    fileManager = new UnifiedFileManager();
  });

  describe('Folder Detection (autoDetectFolder)', () => {
    describe('Technology Content Detection', () => {
      test('should detect tech folder from programming-related title', () => {
        const metadata: IDocumentMetadata = {
          title: 'Building Industrial Strength Software without Unit Tests',
          url: 'https://example.com/posts/software-development',
          captureDate: '2025-07-03T12:00:00Z',
          tags: ['programming', 'haskell', 'testing'],
          wordCount: 100,
          estimatedReadingTime: 2,
        };

        const folder = fileManager.determineFolder(metadata);
        expect(folder).toBe('tech');
      });

      test('should detect tech folder from JavaScript-related content', () => {
        const metadata: IDocumentMetadata = {
          title: 'Advanced React Patterns and Best Practices',
          url: 'https://dev.to/react-patterns',
          captureDate: '2025-07-03T12:00:00Z',
          tags: ['javascript', 'react', 'frontend'],
          wordCount: 100,
          estimatedReadingTime: 2,
        };

        const folder = fileManager.determineFolder(metadata);
        expect(folder).toBe('tech');
      });

      test('should detect tech folder from GitHub URLs', () => {
        const metadata: IDocumentMetadata = {
          title: 'PrismWeave Documentation',
          url: 'https://github.com/user/project/readme',
          captureDate: '2025-07-03T12:00:00Z',
          tags: ['documentation'],
          wordCount: 100,
          estimatedReadingTime: 2,
        };

        const folder = fileManager.determineFolder(metadata);
        expect(folder).toBe('tech');
      });

      test('should detect tech folder from StackOverflow URLs', () => {
        const metadata: IDocumentMetadata = {
          title: 'How to debug async/await in Node.js',
          url: 'https://stackoverflow.com/questions/debugging-nodejs',
          captureDate: '2025-07-03T12:00:00Z',
          tags: [],
          wordCount: 100,
          estimatedReadingTime: 2,
        };

        const folder = fileManager.determineFolder(metadata);
        expect(folder).toBe('tech');
      });
    });

    describe('Business Content Detection', () => {
      test('should detect business folder from marketing content', () => {
        const metadata: IDocumentMetadata = {
          title: 'Digital Marketing Strategies for 2025',
          url: 'https://marketing.com/strategies',
          captureDate: '2025-07-03T12:00:00Z',
          tags: ['marketing', 'business', 'strategy'],
          wordCount: 100,
          estimatedReadingTime: 2,
        };

        const folder = fileManager.determineFolder(metadata);
        expect(folder).toBe('business');
      });

      test('should detect business folder from LinkedIn URLs', () => {
        const metadata: IDocumentMetadata = {
          title: 'Leadership Insights from Fortune 500 CEOs',
          url: 'https://linkedin.com/posts/leadership-insights',
          captureDate: '2025-07-03T12:00:00Z',
          tags: [],
          wordCount: 100,
          estimatedReadingTime: 2,
        };

        const folder = fileManager.determineFolder(metadata);
        expect(folder).toBe('business');
      });
    });

    describe('Tutorial Content Detection', () => {
      test('should detect tutorial folder from how-to content', () => {
        const metadata: IDocumentMetadata = {
          title: 'How to Build a REST API with Node.js - Step by Step Guide',
          url: 'https://tutorial.com/nodejs-api',
          captureDate: '2025-07-03T12:00:00Z',
          tags: ['tutorial', 'guide', 'how-to'],
          wordCount: 100,
          estimatedReadingTime: 2,
        };

        const folder = fileManager.determineFolder(metadata);
        expect(folder).toBe('tutorial');
      });

      test('should detect tutorial folder from title keywords', () => {
        const metadata: IDocumentMetadata = {
          title: 'Complete Walkthrough: Setting up Docker for Development',
          url: 'https://example.com/docker-setup',
          captureDate: '2025-07-03T12:00:00Z',
          tags: [],
          wordCount: 100,
          estimatedReadingTime: 2,
        };

        const folder = fileManager.determineFolder(metadata);
        expect(folder).toBe('tutorial');
      });
    });

    describe('News Content Detection', () => {
      test('should detect news folder from news-related content', () => {
        const metadata: IDocumentMetadata = {
          title: 'Breaking: New AI Breakthrough Announced',
          url: 'https://news.com/ai-breakthrough',
          captureDate: '2025-07-03T12:00:00Z',
          tags: ['news', 'ai', 'announcement'],
          wordCount: 100,
          estimatedReadingTime: 2,
        };

        const folder = fileManager.determineFolder(metadata);
        expect(folder).toBe('news');
      });

      test('should detect news folder from blog articles', () => {
        const metadata: IDocumentMetadata = {
          title: 'Industry Analysis: The Future of Remote Work',
          url: 'https://blog.example.com/remote-work-analysis',
          captureDate: '2025-07-03T12:00:00Z',
          tags: ['blog', 'analysis', 'opinion'],
          wordCount: 100,
          estimatedReadingTime: 2,
        };

        const folder = fileManager.determineFolder(metadata);
        expect(folder).toBe('news');
      });
    });

    describe('Research Content Detection', () => {
      test('should detect research folder from academic content', () => {
        const metadata: IDocumentMetadata = {
          title: 'A Study on Machine Learning Performance Optimization',
          url: 'https://arxiv.org/abs/2025.0001',
          captureDate: '2025-07-03T12:00:00Z',
          tags: ['research', 'study', 'academic', 'machine-learning'],
          wordCount: 100,
          estimatedReadingTime: 2,
        };

        const folder = fileManager.determineFolder(metadata);
        expect(folder).toBe('research');
      });

      test('should detect research folder from data analysis content', () => {
        const metadata: IDocumentMetadata = {
          title: 'Data-Driven Analysis of Market Trends',
          url: 'https://research.institute.edu/market-analysis',
          captureDate: '2025-07-03T12:00:00Z',
          tags: ['data', 'analysis', 'research'],
          wordCount: 100,
          estimatedReadingTime: 2,
        };

        const folder = fileManager.determineFolder(metadata);
        expect(folder).toBe('research');
      });
    });

    describe('Edge Cases and Fallbacks', () => {
      test('should fallback to unsorted when no keywords match', () => {
        const metadata: IDocumentMetadata = {
          title: 'Random Content About Cats',
          url: 'https://example.com/cats',
          captureDate: '2025-07-03T12:00:00Z',
          tags: ['cats', 'pets', 'animals'],
          wordCount: 100,
          estimatedReadingTime: 2,
        };

        const folder = fileManager.determineFolder(metadata);
        expect(folder).toBe('unsorted');
      });

      test('should handle empty metadata gracefully', () => {
        const metadata: IDocumentMetadata = {
          title: '',
          url: 'https://example.com',
          captureDate: '2025-07-03T12:00:00Z',
          tags: [],
          wordCount: 100,
          estimatedReadingTime: 2,
        };

        const folder = fileManager.determineFolder(metadata);
        expect(folder).toBe('unsorted');
      });

      test('should handle undefined tags gracefully', () => {
        const metadata: IDocumentMetadata = {
          title: 'Some Content',
          url: 'https://example.com',
          captureDate: '2025-07-03T12:00:00Z',
          tags: [],
          wordCount: 100,
          estimatedReadingTime: 2,
        };

        const folder = fileManager.determineFolder(metadata);
        expect(folder).toBe('unsorted');
      });

      test('should prioritize higher scoring folders', () => {
        const metadata: IDocumentMetadata = {
          title: 'Programming Tutorial: How to Build Software',
          url: 'https://dev.to/programming-tutorial',
          captureDate: '2025-07-03T12:00:00Z',
          tags: ['programming', 'tutorial', 'software', 'guide', 'how-to'],
          wordCount: 100,
          estimatedReadingTime: 2,
        };

        const folder = fileManager.determineFolder(metadata);
        // Should detect tech (programming, software) over tutorial due to higher score
        expect(['tech', 'tutorial']).toContain(folder);
      });
    });

    describe('URL-based Detection Enhancement', () => {
      test('should extract keywords from domain names', () => {
        const metadata: IDocumentMetadata = {
          title: 'Article Title',
          url: 'https://developer.mozilla.org/docs/web',
          captureDate: '2025-07-03T12:00:00Z',
          tags: [],
          wordCount: 100,
          estimatedReadingTime: 2,
        };

        const folder = fileManager.determineFolder(metadata);
        expect(folder).toBe('tech'); // Should detect from 'developer' in URL
      });

      test('should extract keywords from URL path segments', () => {
        const metadata: IDocumentMetadata = {
          title: 'Content Title',
          url: 'https://example.com/business/marketing/strategies',
          captureDate: '2025-07-03T12:00:00Z',
          tags: [],
          wordCount: 100,
          estimatedReadingTime: 2,
        };

        const folder = fileManager.determineFolder(metadata);
        expect(folder).toBe('business'); // Should detect from URL path
      });
    });
  });

  describe('File Naming', () => {
    test('should generate proper filename from metadata', () => {
      const metadata: IDocumentMetadata = {
        title: 'Building Industrial Strength Software',
        url: 'https://example.com/article',
        captureDate: '2025-07-03T12:00:00Z',
        tags: ['programming'],
        wordCount: 100,
        estimatedReadingTime: 2,
      };

      const filename = fileManager.generateFilename(metadata);
      expect(filename).toMatch(/^\d{4}-\d{2}-\d{2}-example-com-building-industrial-strength-software\.md$/);
    });

    test('should handle special characters in titles', () => {
      const metadata: IDocumentMetadata = {
        title: 'How to Use C++ & Python: A Guide!',
        url: 'https://dev.com/guide',
        captureDate: '2025-07-03T12:00:00Z',
        tags: [],
        wordCount: 100,
        estimatedReadingTime: 2,
      };

      const filename = fileManager.generateFilename(metadata);
      expect(filename).toMatch(/^\d{4}-\d{2}-\d{2}-dev-com-how-to-use-c-python-a-guide\.md$/);
    });

    test('should truncate long titles appropriately', () => {
      const metadata: IDocumentMetadata = {
        title: 'This is a very long title that should be truncated because it exceeds the reasonable length limit for filenames',
        url: 'https://example.com/long-title',
        captureDate: '2025-07-03T12:00:00Z',
        tags: [],
        wordCount: 100,
        estimatedReadingTime: 2,
      };

      const filename = fileManager.generateFilename(metadata);
      expect(filename.length).toBeLessThan(100); // Should be reasonably short
      expect(filename).toMatch(/^\d{4}-\d{2}-\d{2}-example-com-this-is-a-very-long-title-that-should-be-truncated\.md$/);
    });
  });

  describe('File Path Generation', () => {
    test('should generate complete file path with correct folder', () => {
      const metadata: IDocumentMetadata = {
        title: 'JavaScript Best Practices',
        url: 'https://developer.mozilla.org/js-guide',
        captureDate: '2025-07-03T12:00:00Z',
        tags: ['javascript', 'programming'],
        wordCount: 100,
        estimatedReadingTime: 2,
      };

      const filePath = fileManager.generateFilePath(metadata);
      expect(filePath).toMatch(/^documents\/tech\/\d{4}-\d{2}-\d{2}-developer-mozilla-org-javascript-best-practices\.md$/);
    });

    test('should use custom folder when specified', () => {
      const metadata: IDocumentMetadata = {
        title: 'Custom Content',
        url: 'https://example.com',
        captureDate: '2025-07-03T12:00:00Z',
        tags: [],
        wordCount: 100,
        estimatedReadingTime: 2,
      };

      const options = {
        defaultFolder: 'custom' as const,
        customFolder: 'my-special-folder',
      };

      const filePath = fileManager.generateFilePath(metadata, options);
      expect(filePath).toMatch(/^documents\/my-special-folder\/\d{4}-\d{2}-\d{2}-example-com-custom-content\.md$/);
    });

    test('should use explicit folder when specified', () => {
      const metadata: IDocumentMetadata = {
        title: 'Some Content',
        url: 'https://example.com',
        captureDate: '2025-07-03T12:00:00Z',
        tags: [],
        wordCount: 100,
        estimatedReadingTime: 2,
      };

      const options = {
        defaultFolder: 'tutorial' as any,
      };

      const filePath = fileManager.generateFilePath(metadata, options);
      expect(filePath).toMatch(/^documents\/tutorial\/\d{4}-\d{2}-\d{2}-example-com-some-content\.md$/);
    });
  });

  describe('Folder Keywords Management', () => {
    test('should return available folders', () => {
      const folders = fileManager.getAvailableFolders();
      expect(folders).toContain('tech');
      expect(folders).toContain('business');
      expect(folders).toContain('tutorial');
      expect(folders).toContain('news');
      expect(folders).toContain('research');
    });

    test('should return keywords for specific folder', () => {
      const techKeywords = fileManager.getFolderKeywords('tech');
      expect(techKeywords).toContain('programming');
      expect(techKeywords).toContain('javascript');
      expect(techKeywords).toContain('python');
    });

    test('should add custom keywords to folders', () => {
      fileManager.addFolderKeywords('tech', ['typescript', 'golang']);
      const techKeywords = fileManager.getFolderKeywords('tech');
      expect(techKeywords).toContain('typescript');
      expect(techKeywords).toContain('golang');
    });
  });

  describe('Real-world Test Cases', () => {
    test('should correctly categorize Simon Willison LLM article', () => {
      const metadata: IDocumentMetadata = {
        title: 'Here\'s how I use LLMs to help me write code',
        url: 'https://simonwillison.net/2025/Mar/11/using-llms-for-code/',
        captureDate: '2025-07-03T12:00:00Z',
        tags: ['ai-assisted-programming', 'llm', 'code'],
        wordCount: 4782,
        estimatedReadingTime: 24,
      };

      const folder = fileManager.determineFolder(metadata);
      expect(folder).toBe('tech'); // Should detect from programming/code keywords
    });

    test('should correctly categorize Nanonets OCR article', () => {
      const metadata: IDocumentMetadata = {
        title: 'Nanonets OCR Advanced Document Understanding API',
        url: 'https://nanonets.com/research/nanonets-ocr-s/',
        captureDate: '2025-07-03T12:00:00Z',
        tags: ['ocr', 'ai', 'machine-learning', 'document-processing'],
        wordCount: 1500,
        estimatedReadingTime: 8,
      };

      const folder = fileManager.determineFolder(metadata);
      expect(folder).toBe('tech'); // Should detect from technology/AI keywords
    });

    test('should correctly categorize Unison testing article', () => {
      const metadata: IDocumentMetadata = {
        title: 'Building Industrial Strength Software without Unit Tests',
        url: 'https://chrispenner.ca/posts/transcript-tests',
        captureDate: '2025-07-03T12:00:00Z',
        tags: ['programming', 'haskell', 'unison', 'testing', 'transcript-tests'],
        wordCount: 2400,
        estimatedReadingTime: 12,
      };

      const folder = fileManager.determineFolder(metadata);
      expect(folder).toBe('tech'); // Should detect from programming keywords
    });
  });
});
