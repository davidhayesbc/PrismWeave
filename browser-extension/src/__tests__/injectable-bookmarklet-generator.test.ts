// Generated by Copilot
// Test for injection-based bookmarklet architecture

import { InjectableBookmarkletGenerator } from '../utils/injectable-bookmarklet-generator';

describe('InjectableBookmarkletGenerator', () => {
  let generator: InjectableBookmarkletGenerator;

  beforeEach(() => {
    generator = new InjectableBookmarkletGenerator();
  });

  describe('generateBookmarklet', () => {
    test('should generate valid bookmarklet with default config', () => {
      const bookmarklet = generator.generateBookmarklet();
      const decoded = decodeURIComponent(bookmarklet);

      expect(bookmarklet).toMatch(/^javascript:/);
      expect(decoded).toContain('prismweaveProcessPage');
      expect(decoded).toContain('https://cdn.prismweave.com/prismweave-combined.min.js');
    });

    test('should generate bookmarklet with custom config', () => {
      const config = {
        injectableUrl: 'https://custom-cdn.com/prismweave.js',
        includeImages: false,
        generateFrontmatter: false,
        copyToClipboard: false,
      };

      const bookmarklet = generator.generateBookmarklet(config);
      const decoded = decodeURIComponent(bookmarklet);

      expect(decoded).toContain('https://custom-cdn.com/prismweave.js');
      expect(decoded).toContain('"includeImages": false');
      expect(decoded).toContain('"generateFrontmatter": false');
      expect(decoded).toContain('"copyToClipboard": false');
    });

    test('should include fallback mode by default', () => {
      const bookmarklet = generator.generateBookmarklet();

      expect(bookmarklet).toContain('fallbackMode');
      expect(bookmarklet).toContain('processWithBasicFallback');
    });

    test('should disable fallback when requested', () => {
      const config = { fallbackMode: false };
      const bookmarklet = generator.generateBookmarklet(config);
      const decoded = decodeURIComponent(bookmarklet);

      expect(decoded).toContain('"fallbackMode": false');
    });
  });

  describe('generateAdvancedBookmarklet', () => {
    test('should generate advanced bookmarklet with full features', () => {
      const bookmarklet = generator.generateAdvancedBookmarklet();
      const decoded = decodeURIComponent(bookmarklet);

      expect(bookmarklet).toMatch(/^javascript:/);
      expect(decoded).toContain('prismweave-combined.min.js');
      expect(decoded).toContain('"generateFrontmatter": true');
      expect(decoded).toContain('"includeMetadata": true');
    });

    test('should accept custom injectable URL', () => {
      const config = {
        injectableUrl: 'https://my-server.com/prismweave-custom.js',
      };

      const bookmarklet = generator.generateAdvancedBookmarklet(config);
      const decoded = decodeURIComponent(bookmarklet);

      expect(decoded).toContain('https://my-server.com/prismweave-custom.js');
    });
  });

  describe('generateSimpleBookmarklet', () => {
    test('should generate simple bookmarklet with minimal features', () => {
      const bookmarklet = generator.generateSimpleBookmarklet();
      const decoded = decodeURIComponent(bookmarklet);

      expect(bookmarklet).toMatch(/^javascript:/);
      expect(decoded).toContain('content-extractor-injectable.min.js');
      expect(decoded).toContain('"generateFrontmatter": false');
      expect(decoded).toContain('"includeMetadata": false');
    });
  });

  describe('generateGitHubBookmarklet', () => {
    test('should generate GitHub-integrated bookmarklet', () => {
      const githubToken = 'ghp_test123';
      const githubRepo = 'user/repo';

      const bookmarklet = generator.generateGitHubBookmarklet(githubToken, githubRepo);
      const decoded = decodeURIComponent(bookmarklet);

      expect(bookmarklet).toMatch(/^javascript:/);
      expect(decoded).toContain('useGitHub": true');
      expect(decoded).toContain(githubToken);
      expect(decoded).toContain(githubRepo);
      expect(decoded).toContain('autoCommit": true');
    });

    test('should include GitHub API integration code', () => {
      const bookmarklet = generator.generateGitHubBookmarklet('token', 'user/repo');
      const decoded = decodeURIComponent(bookmarklet);

      expect(decoded).toContain('commitToGitHub');
      expect(decoded).toContain('api.github.com');
      expect(decoded).toContain('documents/');
    });
  });

  describe('generateBookmarkletInterface', () => {
    test('should generate valid HTML interface', () => {
      const html = generator.generateBookmarkletInterface();

      expect(html).toContain('<!DOCTYPE html>');
      expect(html).toContain('PrismWeave Bookmarklet Generator');
      expect(html).toContain('Injectable Bundle URL');
      expect(html).toContain('Generate Advanced Bookmarklet');
      expect(html).toContain('GitHub Integration');
    });

    test('should include configuration options', () => {
      const html = generator.generateBookmarkletInterface();

      expect(html).toContain('includeImages');
      expect(html).toContain('generateFrontmatter');
      expect(html).toContain('githubToken');
      expect(html).toContain('fallbackMode');
      expect(html).toContain('copyToClipboard');
    });

    test('should include JavaScript functionality', () => {
      const html = generator.generateBookmarkletInterface();

      expect(html).toContain('generateAdvancedBookmarklet()');
      expect(html).toContain('generateSimpleBookmarklet()');
      expect(html).toContain('generateGitHubBookmarklet()');
      expect(html).toContain('getConfig()');
    });
  });

  describe('bookmarklet structure', () => {
    test('should include progress dialog functionality', () => {
      const bookmarklet = generator.generateBookmarklet();
      const decoded = decodeURIComponent(bookmarklet);

      expect(decoded).toContain('showProgress');
      expect(decoded).toContain('hideProgress');
      expect(decoded).toContain('prismweave-progress');
    });

    test('should include error handling', () => {
      const bookmarklet = generator.generateBookmarklet();
      const decoded = decodeURIComponent(bookmarklet);

      expect(decoded).toContain('try {');
      expect(decoded).toContain('catch (error)');
      expect(decoded).toContain('showResult');
    });

    test('should include clipboard functionality', () => {
      const bookmarklet = generator.generateBookmarklet();
      const decoded = decodeURIComponent(bookmarklet);

      expect(decoded).toContain('navigator.clipboard');
      expect(decoded).toContain('writeText');
    });

    test('should include bundle loading logic', () => {
      const bookmarklet = generator.generateBookmarklet();
      const decoded = decodeURIComponent(bookmarklet);

      expect(decoded).toContain('loadInjectableBundle');
      expect(decoded).toContain("createElement('script')");
      expect(decoded).toContain('script.src');
    });

    test('should include advanced processing calls', () => {
      const bookmarklet = generator.generateBookmarklet();
      const decoded = decodeURIComponent(bookmarklet);

      expect(decoded).toContain('processWithAdvancedExtraction');
      expect(decoded).toContain('window.prismweaveProcessPage');
    });

    test('should include fallback processing', () => {
      const bookmarklet = generator.generateBookmarklet();
      const decoded = decodeURIComponent(bookmarklet);

      expect(decoded).toContain('processWithBasicFallback');
      expect(decoded).toContain("querySelector('article, main");
    });
  });

  describe('configuration validation', () => {
    test('should handle missing configuration gracefully', () => {
      const bookmarklet = generator.generateBookmarklet({});

      expect(bookmarklet).toMatch(/^javascript:/);
      expect(bookmarklet.length).toBeGreaterThan(1000);
    });

    test('should merge configurations correctly', () => {
      const partialConfig = {
        includeImages: false,
        timeout: 5000,
      };

      const bookmarklet = generator.generateBookmarklet(partialConfig);
      const decoded = decodeURIComponent(bookmarklet);

      expect(decoded).toContain('"includeImages": false');
      expect(decoded).toContain('"timeout": 5000');
      // Should still have defaults for other options
      expect(decoded).toContain('"fallbackMode": true');
    });
  });
});
