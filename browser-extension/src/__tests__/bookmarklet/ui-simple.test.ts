// Generated by Copilot
// Simplified Bookmarklet UI Tests - Testing basic UI functionality with DOM

import { BookmarkletUI } from '../../bookmarklet/ui';

// Mock window.matchMedia
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation(query => ({
    matches: query === '(prefers-color-scheme: dark)',
    media: query,
    onchange: null,
    addListener: jest.fn(),
    removeListener: jest.fn(),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn(),
  })),
});

describe('BookmarkletUI - Simple Tests', () => {
  let ui: BookmarkletUI;

  beforeEach(() => {
    // Clear the DOM completely
    document.body.innerHTML = '';
    document.head.innerHTML = '';

    // Mock requestAnimationFrame
    global.requestAnimationFrame = jest.fn((cb: FrameRequestCallback) => {
      cb(0);
      return 1;
    });

    // Mock setTimeout
    jest.spyOn(global, 'setTimeout').mockImplementation((cb: Function) => {
      cb();
      return 1 as any;
    });

    ui = new BookmarkletUI();
  });

  afterEach(() => {
    jest.restoreAllMocks();
  });

  test('should create UI instance', () => {
    expect(ui).toBeInstanceOf(BookmarkletUI);
  });

  test('should initialize without errors', async () => {
    await expect(ui.initialize()).resolves.not.toThrow();

    // Check if container was created
    const container = document.querySelector('.pw-bookmarklet-container');
    expect(container).toBeTruthy();
  });

  test('should show UI', async () => {
    await ui.initialize();
    await ui.show();

    const container = document.querySelector('.pw-bookmarklet-container') as HTMLElement;
    expect(container).toBeTruthy();
    expect(container.style.display).toBe('block');
  });

  test('should hide UI', async () => {
    await ui.initialize();
    await ui.show();
    await ui.hide();

    const container = document.querySelector('.pw-bookmarklet-container') as HTMLElement;
    expect(container).toBeTruthy();
    // Note: setTimeout mock executes immediately
    expect(container.style.display).toBe('none');
  });

  test('should handle progress display', async () => {
    await ui.initialize();
    await ui.showProgress('Loading...', 50);

    const container = document.querySelector('.pw-bookmarklet-container') as HTMLElement;
    expect(container.innerHTML).toContain('Loading...');
    expect(container.innerHTML).toContain('50%');
  });

  test('should handle success messages', async () => {
    await ui.initialize();
    await ui.showSuccess('Success!', 'Done!');

    const container = document.querySelector('.pw-bookmarklet-container') as HTMLElement;
    expect(container.innerHTML).toContain('Success!');
    expect(container.innerHTML).toContain('Done!');
  });

  test('should handle error messages', async () => {
    await ui.initialize();
    await ui.showError('Error occurred');

    const container = document.querySelector('.pw-bookmarklet-container') as HTMLElement;
    expect(container.innerHTML).toContain('Error occurred');
    expect(container.innerHTML).toContain('Error');
  });

  test('should update theme', async () => {
    await ui.initialize();
    await ui.updateTheme('dark');

    const container = document.querySelector('.pw-bookmarklet-container');
    expect(container?.className).toContain('pw-bookmarklet-theme-dark');
  });

  test('should cleanup resources', async () => {
    await ui.initialize();

    // Verify elements exist
    let container = document.querySelector('.pw-bookmarklet-container');
    let styles = document.getElementById('pw-bookmarklet-styles');
    expect(container).toBeTruthy();
    expect(styles).toBeTruthy();

    await ui.cleanup();

    // Verify elements are removed
    container = document.querySelector('.pw-bookmarklet-container');
    styles = document.getElementById('pw-bookmarklet-styles');
    expect(container).toBeFalsy();
    expect(styles).toBeFalsy();
  });

  test('should escape HTML content', async () => {
    await ui.initialize();
    await ui.showProgress('<script>alert("xss")</script>', 50);

    const container = document.querySelector('.pw-bookmarklet-container') as HTMLElement;
    expect(container.innerHTML).not.toContain('<script>alert("xss")</script>');
    expect(container.innerHTML).toContain('&lt;script&gt;');
  });
});
