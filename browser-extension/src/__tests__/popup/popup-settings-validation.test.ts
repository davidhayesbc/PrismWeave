// Generated by Copilot
// Test for settings validation functionality in popup

import { PrismWeavePopup } from '../../popup/popup';

// Mock Chrome APIs for testing
(global as any).chrome = {
  runtime: {
    sendMessage: jest.fn(),
    openOptionsPage: jest.fn(),
    lastError: undefined as chrome.runtime.LastError | undefined
  },
  tabs: {
    query: jest.fn(),
    create: jest.fn()
  }
};

// Mock DOM elements
const mockElement = {
  innerHTML: '',
  textContent: '',
  className: '',
  style: { display: 'none' },
  addEventListener: jest.fn()
};

(global as any).document = {
  getElementById: jest.fn(() => mockElement)
};

describe('PrismWeavePopup - Settings Validation', () => {
  let popup: PrismWeavePopup;

  beforeEach(() => {
    jest.clearAllMocks();
    popup = new PrismWeavePopup();
  });

  describe('validateCaptureSettings', () => {
    test('should return valid when all required settings are present', () => {
      // Set up valid settings
      (popup as any).settings = {
        githubToken: 'test-token',
        githubRepo: 'user/repo',
        repositoryPath: '/path/to/repo'
      };

      const result = (popup as any).validateCaptureSettings();
      
      expect(result.isValid).toBe(true);
      expect(result.missingSettings).toHaveLength(0);
    });

    test('should return invalid when GitHub token is missing', () => {
      (popup as any).settings = {
        githubRepo: 'user/repo',
        repositoryPath: '/path/to/repo'
      };

      const result = (popup as any).validateCaptureSettings();
      
      expect(result.isValid).toBe(false);
      expect(result.missingSettings).toContain('GitHub Token');
      expect(result.message).toContain('Missing required setting: GitHub Token');
    });

    test('should return invalid when GitHub repo is missing', () => {
      (popup as any).settings = {
        githubToken: 'test-token',
        repositoryPath: '/path/to/repo'
      };

      const result = (popup as any).validateCaptureSettings();
      
      expect(result.isValid).toBe(false);
      expect(result.missingSettings).toContain('GitHub Repository');
      expect(result.message).toContain('Missing required setting: GitHub Repository');
    });

    test('should return invalid when both repository path and default folder are missing', () => {
      (popup as any).settings = {
        githubToken: 'test-token',
        githubRepo: 'user/repo'
      };

      const result = (popup as any).validateCaptureSettings();
      
      expect(result.isValid).toBe(false);
      expect(result.missingSettings).toContain('Repository Path or Default Folder');
    });

    test('should return valid when default folder is provided instead of repository path', () => {
      (popup as any).settings = {
        githubToken: 'test-token',
        githubRepo: 'user/repo',
        defaultFolder: 'documents'
      };

      const result = (popup as any).validateCaptureSettings();
      
      expect(result.isValid).toBe(true);
      expect(result.missingSettings).toHaveLength(0);
    });

    test('should handle multiple missing settings', () => {
      (popup as any).settings = {};

      const result = (popup as any).validateCaptureSettings();
      
      expect(result.isValid).toBe(false);
      expect(result.missingSettings).toHaveLength(3);
      expect(result.missingSettings).toContain('GitHub Token');
      expect(result.missingSettings).toContain('GitHub Repository');
      expect(result.missingSettings).toContain('Repository Path or Default Folder');
      expect(result.message).toContain('Missing required settings:');
    });

    test('should handle null settings', () => {
      (popup as any).settings = null;

      const result = (popup as any).validateCaptureSettings();
      
      expect(result.isValid).toBe(false);
      expect(result.message).toContain('Settings not loaded');
    });  });
});
