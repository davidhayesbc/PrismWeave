// Generated by Copilot
// Test for settings validation functionality in popup

import { PrismWeavePopup } from '../../popup/popup';
import { cleanupTest, createTestSettings, mockChromeAPIs } from '../test-helpers';

describe('PrismWeavePopup - Settings Validation', () => {
  let popup: PrismWeavePopup;
  let chrome: any;

  beforeEach(() => {
    chrome = mockChromeAPIs();

    // Also assign to window for completeness
    (global as any).chrome = chrome;
    (window as any).chrome = chrome;

    cleanupTest();

    // Mock DOM elements
    const mockElement = {
      innerHTML: '',
      textContent: '',
      className: '',
      style: { display: 'none' },
      addEventListener: jest.fn(),
    };

    (global as any).document = {
      getElementById: jest.fn(() => mockElement),
    };

    popup = new PrismWeavePopup(true); // Skip initialization during tests
  });

  describe('validateCaptureSettings', () => {
    test('B.1.1 - should return valid when all required settings are present', () => {
      (popup as any).settings = createTestSettings({
        githubToken: 'test-token',
        githubRepo: 'user/repo',
      });

      const result = (popup as any).validateCaptureSettings();
      expect(result.isValid).toBe(true);
      expect(result.missingSettings).toHaveLength(0);
    });

    test('B.1.2 - should return invalid when GitHub token is missing', () => {
      (popup as any).settings = createTestSettings({
        githubToken: '',
        githubRepo: 'user/repo',
      });

      const result = (popup as any).validateCaptureSettings();
      expect(result.isValid).toBe(false);
      expect(result.missingSettings).toContain('GitHub Token');
      expect(result.message).toContain('Missing required setting: GitHub Token');
    });

    test('B.1.3 - should return invalid when GitHub repo is missing', () => {
      (popup as any).settings = createTestSettings({
        githubToken: 'test-token',
        githubRepo: '',
      });

      const result = (popup as any).validateCaptureSettings();
      expect(result.isValid).toBe(false);
      expect(result.missingSettings).toContain('GitHub Repository');
      expect(result.message).toContain('Missing required setting: GitHub Repository');
    });

    test('B.1.4 - should return valid when both GitHub token and repository are present', () => {
      (popup as any).settings = createTestSettings({
        githubToken: 'test-token',
        githubRepo: 'user/repo',
      });

      const result = (popup as any).validateCaptureSettings();
      expect(result.isValid).toBe(true);
      expect(result.missingSettings).toHaveLength(0);
    });

    test('B.1.5 - should return valid when optional settings are also present', () => {
      (popup as any).settings = createTestSettings({
        githubToken: 'test-token',
        githubRepo: 'user/repo',
        defaultFolder: 'documents',
      });

      const result = (popup as any).validateCaptureSettings();
      expect(result.isValid).toBe(true);
      expect(result.missingSettings).toHaveLength(0);
    });

    test('B.1.6 - should handle multiple missing settings', () => {
      (popup as any).settings = createTestSettings({
        githubToken: '',
        githubRepo: '',
      });

      const result = (popup as any).validateCaptureSettings();
      expect(result.isValid).toBe(false);
      expect(result.missingSettings).toHaveLength(2);
      expect(result.missingSettings).toContain('GitHub Token');
      expect(result.missingSettings).toContain('GitHub Repository');
      expect(result.message).toContain('Missing required settings:');
    });

    test('B.1.7 - should handle null settings', () => {
      (popup as any).settings = null;

      const result = (popup as any).validateCaptureSettings();
      expect(result.isValid).toBe(false);
      expect(result.message).toContain('Settings not loaded');
    });
  });
});
