// Generated by Copilot
// Shared test utilities and setup for PrismWeave browser extension tests

// Common JSDOM setup function for content extraction tests
export const setupDOM = (html: string, options: { 
  url?: string; 
  hostname?: string; 
  pathname?: string; 
} = {}) => {
  const {
    url = 'https://example.com/test-article',
    hostname = 'example.com',
    pathname = '/test-article'
  } = options;

  // Set up the document with the provided HTML
  document.documentElement.innerHTML = html;

  // Mock window.location for consistent URL handling
  Object.defineProperty(window, 'location', {
    value: { href: url, hostname, pathname },
    writable: true,
  });

  // Ensure document.readyState is set
  Object.defineProperty(document, 'readyState', {
    value: 'complete',
    writable: true,
  });
};

// Mock Chrome APIs with consistent behavior
export const mockChromeAPIs = () => {
  (global as any).chrome = {
    storage: {
      sync: {
        get: jest.fn(),
        set: jest.fn(),
      },
      local: {
        get: jest.fn(),
        set: jest.fn(),
      }
    },
    runtime: {
      sendMessage: jest.fn(),
      openOptionsPage: jest.fn(),
      lastError: undefined,
    },
    tabs: {
      query: jest.fn(),
      create: jest.fn(),
    },
  };
  return (global as any).chrome;
};

// Create mock DOM element with common properties
export const createMockElement = (properties: {
  innerHTML?: string;
  textContent?: string;
  className?: string;
  id?: string;
  tagName?: string;
  attributes?: Record<string, string>;
} = {}) => {
  const {
    innerHTML = '',
    textContent = innerHTML.replace(/<[^>]*>/g, ''),
    className = '',
    id = '',
    tagName = 'DIV',
    attributes = {}
  } = properties;

  return {
    innerHTML,
    textContent,
    className,
    id,
    tagName,
    querySelectorAll: jest.fn(() => []),
    querySelector: jest.fn(() => null),
    cloneNode: jest.fn(),
    remove: jest.fn(),
    getAttribute: jest.fn((name: string) => attributes[name] || null),
    setAttribute: jest.fn(),
    children: { length: 0 },
    parentElement: null,
  };
};

// Factory for creating test settings
export const createTestSettings = (overrides: Record<string, any> = {}) => ({
  githubToken: '',
  githubRepo: '',
  defaultFolder: 'unsorted',
  customFolder: '',
  fileNamingPattern: 'YYYY-MM-DD-domain-title',
  autoCommit: true,
  captureImages: true,
  removeAds: true,
  removeNavigation: true,
  customSelectors: '',
  commitMessageTemplate: 'Add: {domain} - {title}',
  debugMode: false,
  showNotifications: true,
  enableKeyboardShortcuts: true,
  ...overrides
});

// Factory for creating test HTML content
export const createTestHTML = (type: 'article' | 'blog' | 'generic' | 'malformed' = 'article') => {
  const templates = {
    article: `
      <head>
        <title>Test Article</title>
        <meta property="og:title" content="OpenGraph Title">
        <meta name="author" content="Test Author">
        <meta name="keywords" content="test, article, content">
      </head>
      <body>
        <nav>Navigation content</nav>
        <aside>Sidebar ads</aside>
        <article class="article-content" id="main-article">
          <h1>Main Article Title</h1>
          <p>This is the main article content that should be extracted.</p>
          <p>Another paragraph with valuable content for testing purposes.</p>
        </article>
        <footer>Footer content</footer>
      </body>
    `,
    blog: `
      <head>
        <title>Blog Post Title</title>
      </head>
      <body>
        <header>Blog Header</header>
        <main>
          <div class="blog-content">
            <h1>How to Build Amazing Apps</h1>
            <div class="post-meta">By John Doe, Published: 2024-01-15</div>
            <p>Building amazing applications requires careful planning and execution.</p>
            <h2>Key Principles</h2>
            <ul>
              <li>User-centered design</li>
              <li>Performance optimization</li>
              <li>Scalable architecture</li>
            </ul>
          </div>
        </main>
      </body>
    `,
    generic: `
      <head><title>Generic Page</title></head>
      <body>
        <div>
          <p>Some scattered content here with enough text to make it meaningful and pass minimum requirements for testing.</p>
        </div>
        <div>
          <p>More scattered content there with additional meaningful text for testing purposes and validation.</p>
        </div>
      </body>
    `,
    malformed: `
      <body>
        <div>
          <p>Content with unclosed tags and sufficient text for meaningful content extraction and testing
          <span>Nested content without proper closing tags for malformed HTML testing
          <p>More content without proper structural organization but enough text for comprehensive testing</p>
        </div>
      </body>
    `
  };
  return templates[type];
};

// Validation result factory
export const createValidationResult = (isValid: boolean, errors: string[] = []) => ({
  isValid,
  errors,
  missingSettings: errors,
  message: errors.length > 0 ? `Missing required settings: ${errors.join(', ')}` : 'Settings valid'
});

// Clean up function for tests
export const cleanupTest = () => {
  document.documentElement.innerHTML = '';
  jest.clearAllMocks();
  (global as any).chrome = undefined;
};
