// Generated by Copilot
// Site Strategy - Plugin-based site-specific extraction strategies
// Implements the Strategy pattern for different website types

import { createLogger } from '../logger.js';
import { BaseContentExtractor, IExtractionContext, ISelectorGroup } from './base-extractor.js';
import { ContentScorer, IScoringContext } from './content-scorer.js';

const logger = createLogger('SiteStrategy');

/**
 * Interface for site-specific extraction strategies
 */
export abstract class SiteStrategy extends BaseContentExtractor {
  protected readonly scorer = new ContentScorer();

  abstract get domains(): string[];
  abstract get pathPatterns(): RegExp[];

  /**
   * Default implementation of isApplicable using domains and path patterns
   */
  isApplicable(url: string, document: Document): boolean {
    const urlLower = url.toLowerCase();

    // Check domain matches
    const domainMatch = this.domains.some(domain => urlLower.includes(domain));

    // Check path patterns
    const pathMatch =
      this.pathPatterns.length === 0 || this.pathPatterns.some(pattern => pattern.test(url));

    return domainMatch && pathMatch;
  }

  /**
   * Create scoring context with site-specific information
   */
  protected createScoringContext(extractionContext: IExtractionContext): IScoringContext {
    return {
      url: extractionContext.url,
      domain: extractionContext.domain,
      isResearchSite: this.isResearchSite(extractionContext),
      isBlogSite: this.isBlogSite(extractionContext),
      isDocumentationSite: this.isDocumentationSite(extractionContext),
    };
  }

  protected isResearchSite(context: IExtractionContext): boolean {
    const researchIndicators = ['research', 'paper', 'study', 'academic'];
    return researchIndicators.some(indicator => context.url.toLowerCase().includes(indicator));
  }

  protected isBlogSite(context: IExtractionContext): boolean {
    const blogIndicators = ['blog', 'post', 'article'];
    return blogIndicators.some(indicator => context.url.toLowerCase().includes(indicator));
  }

  protected isDocumentationSite(context: IExtractionContext): boolean {
    const docIndicators = ['docs', 'documentation', 'guide', 'tutorial'];
    return docIndicators.some(indicator => context.url.toLowerCase().includes(indicator));
  }
}

/**
 * Anthropic research pages strategy
 */
export class AnthropicStrategy extends SiteStrategy {
  get name(): string {
    return 'Anthropic Research';
  }
  get priority(): number {
    return 90;
  }
  get domains(): string[] {
    return ['anthropic.com'];
  }
  get pathPatterns(): RegExp[] {
    return [/\/research\//];
  }

  protected getSelectors(): ISelectorGroup[] {
    return [
      {
        name: 'anthropic-primary',
        selectors: [
          'main article',
          'article',
          'main',
          '[role="main"]',
          '.research-content',
          '.article-content',
          '.post-content',
        ],
      },
      {
        name: 'anthropic-nextjs',
        selectors: [
          '#__next main',
          '[data-reactroot] main',
          '#__next article',
          '[data-reactroot] article',
        ],
      },
      {
        name: 'anthropic-components',
        selectors: [
          '[data-testid="article"]',
          '[data-testid="content"]',
          '[data-testid="research-content"]',
          '[data-component="article"]',
          '[data-component="research"]',
        ],
      },
      {
        name: 'anthropic-fallback',
        selectors: [
          '[class*="research"]',
          '[class*="article"]',
          '[class*="content"]',
          '[class*="post"]',
        ],
      },
    ];
  }

  protected scoreElement(element: Element, context: IExtractionContext): number {
    const scoringContext = this.createScoringContext(context);
    const config = ContentScorer.createSiteConfig('research');

    // Add Anthropic-specific bonuses
    config.bonusRules = [
      ...(config.bonusRules || []),
      {
        name: 'Anthropic Research Content',
        condition: el => {
          const text = el.textContent?.toLowerCase() || '';
          return ['claude', 'anthropic', 'ai safety', 'alignment'].some(term =>
            text.includes(term)
          );
        },
        points: 200,
      },
      {
        name: 'Research Article Structure',
        condition: el => {
          const headings = el.querySelectorAll('h1, h2, h3, h4, h5, h6').length;
          const paragraphs = el.querySelectorAll('p').length;
          return headings >= 3 && paragraphs >= 5;
        },
        points: 150,
      },
    ];

    const result = this.scorer.scoreElement(element, scoringContext, config);
    return result.totalScore;
  }

  protected override getMinimumScore(): number {
    return 200; // Higher bar for research content
  }

  protected override getMinimumContentLength(): number {
    return 500; // Research articles should be substantial
  }
}

/**
 * Substack newsletter strategy - Enhanced for 2025 structure
 */
export class SubstackStrategy extends SiteStrategy {
  get name(): string {
    return 'Substack Newsletter';
  }
  get priority(): number {
    return 85;
  }
  get domains(): string[] {
    return ['substack.com'];
  }
  get pathPatterns(): RegExp[] {
    return [/\/p\//];
  }

  protected getSelectors(): ISelectorGroup[] {
    return [
      {
        name: 'substack-primary-2025',
        selectors: [
          '.available-content',
          '.available-content .body.markup',
          '.available-content .markup',
          '.post-content .available-content',
          '.post .available-content',
        ],
      },
      {
        name: 'substack-content',
        selectors: [
          '.body.markup',
          '.markup',
          '.post-body',
          '.post-content',
          'article .available-content',
          'article .body.markup',
        ],
      },
      {
        name: 'substack-structure',
        selectors: [
          'main .available-content',
          'main .markup',
          '[role="main"] .available-content',
          '[data-testid="post-content"]',
        ],
      },
      {
        name: 'substack-fallback',
        selectors: [
          '[class*="available-content"]',
          '[class*="post-content"]',
          '[class*="body"][class*="markup"]',
          '.publication-content',
        ],
      },
    ];
  }

  protected scoreElement(element: Element, context: IExtractionContext): number {
    const scoringContext = this.createScoringContext(context);
    const config = ContentScorer.createSiteConfig('blog');

    // Add Substack-specific bonuses
    config.bonusRules = [
      ...(config.bonusRules || []),
      {
        name: 'Substack Content Classes',
        condition: el => {
          const className = el.className.toLowerCase();
          return ['available-content', 'markup', 'post-content'].some(cls =>
            className.includes(cls)
          );
        },
        points: 300,
      },
      {
        name: 'Newsletter Structure',
        condition: el => {
          const paragraphs = el.querySelectorAll('p').length;
          const links = el.querySelectorAll('a').length;
          return paragraphs > 3 && links / paragraphs < 0.5;
        },
        points: 150,
      },
    ];

    const result = this.scorer.scoreElement(element, scoringContext, config);
    return result.totalScore;
  }
}

/**
 * Stack Overflow blog strategy
 */
export class StackOverflowBlogStrategy extends SiteStrategy {
  get name(): string {
    return 'Stack Overflow Blog';
  }
  get priority(): number {
    return 80;
  }
  get domains(): string[] {
    return ['stackoverflow.blog'];
  }
  get pathPatterns(): RegExp[] {
    return [];
  }

  protected getSelectors(): ISelectorGroup[] {
    return [
      {
        name: 'stackoverflow-primary',
        selectors: [
          '.blog-post-content',
          '.post-content',
          '.entry-content',
          '.article-content',
          'article .content',
          'article main',
        ],
      },
      {
        name: 'stackoverflow-generic',
        selectors: [
          'article',
          'main article',
          '.main-content article',
          '[data-testid="post-content"]',
        ],
      },
      {
        name: 'stackoverflow-fallback',
        selectors: [
          '[class*="post"][class*="content"]',
          '[class*="article"][class*="content"]',
          '[id*="post"][id*="content"]',
        ],
      },
    ];
  }

  protected scoreElement(element: Element, context: IExtractionContext): number {
    const scoringContext = this.createScoringContext(context);
    const config = ContentScorer.createSiteConfig('blog');

    // Add Stack Overflow-specific penalties
    config.penaltyRules = [
      ...(config.penaltyRules || []),
      {
        name: 'SO Promotional Content',
        condition: el => {
          const text = el.textContent?.toLowerCase() || '';
          const promoTerms = ['stack overflow for teams', 'talent', 'advertising'];
          return promoTerms.filter(term => text.includes(term)).length > 1;
        },
        points: 200,
      },
    ];

    const result = this.scorer.scoreElement(element, scoringContext, config);
    return result.totalScore;
  }
}

/**
 * GitHub documentation strategy
 */
export class GitHubStrategy extends SiteStrategy {
  get name(): string {
    return 'GitHub Documentation';
  }
  get priority(): number {
    return 75;
  }
  get domains(): string[] {
    return ['github.com'];
  }
  get pathPatterns(): RegExp[] {
    return [/\/blob\//, /\.md/];
  }

  protected getSelectors(): ISelectorGroup[] {
    return [
      {
        name: 'github-markdown',
        selectors: [
          '.markdown-body',
          'article.markdown-body',
          '.repository-content .markdown-body',
          '.Box-body .markdown-body',
        ],
      },
      {
        name: 'github-file-content',
        selectors: ['.blob-wrapper', '.highlight', '.blob-code-content', '.repository-content'],
      },
      {
        name: 'github-containers',
        selectors: [
          '.Box-body',
          '.container-lg .Box-body',
          '.application-main .Box-body',
          'main .Box-body',
        ],
      },
    ];
  }

  protected scoreElement(element: Element, context: IExtractionContext): number {
    const scoringContext = this.createScoringContext(context);
    const config = ContentScorer.createSiteConfig('documentation');

    // Add GitHub-specific bonuses
    config.bonusRules = [
      ...(config.bonusRules || []),
      {
        name: 'GitHub Markdown Content',
        condition: el => {
          const className = el.className.toLowerCase();
          return ['markdown-body', 'blob-wrapper', 'highlight'].some(cls =>
            className.includes(cls)
          );
        },
        points: 250,
      },
    ];

    const result = this.scorer.scoreElement(element, scoringContext, config);
    return result.totalScore;
  }
}

/**
 * Generic blog platform strategy
 */
export class GenericBlogStrategy extends SiteStrategy {
  get name(): string {
    return 'Generic Blog';
  }
  get priority(): number {
    return 40;
  }
  get domains(): string[] {
    return ['blog.', 'medium.com', 'dev.to', 'hashnode.com'];
  }
  get pathPatterns(): RegExp[] {
    return [/\/blog\//, /\/post\//, /\/article\//];
  }

  protected getSelectors(): ISelectorGroup[] {
    return [
      {
        name: 'blog-primary',
        selectors: [
          'article',
          'main',
          '[role="main"]',
          '.content',
          '.main-content',
          '.post-content',
          '.article-content',
          '.entry-content',
        ],
      },
      {
        name: 'blog-structured',
        selectors: [
          '[itemtype*="BlogPosting"]',
          '[itemtype*="Article"]',
          '[data-testid="post-content"]',
          '[data-testid="article-content"]',
        ],
      },
      {
        name: 'blog-fallback',
        selectors: ['.blog-content', '.post-body', '.entry-body', '.article-body', '.story-body'],
      },
    ];
  }

  protected scoreElement(element: Element, context: IExtractionContext): number {
    const scoringContext = this.createScoringContext(context);
    const config = ContentScorer.createSiteConfig('blog');
    const result = this.scorer.scoreElement(element, scoringContext, config);
    return result.totalScore;
  }
}

/**
 * Strategy manager for coordinating different site strategies
 */
export class StrategyManager {
  private strategies: SiteStrategy[] = [
    new AnthropicStrategy(),
    new SubstackStrategy(),
    new StackOverflowBlogStrategy(),
    new GitHubStrategy(),
    new GenericBlogStrategy(),
  ];

  /**
   * Find the best strategy for the current page
   */
  findBestStrategy(url: string, document: Document): SiteStrategy | null {
    // Sort by priority and find first applicable strategy
    const sortedStrategies = [...this.strategies].sort((a, b) => b.priority - a.priority);

    for (const strategy of sortedStrategies) {
      if (strategy.isApplicable(url, document)) {
        logger.debug(`Selected strategy: ${strategy.name} (priority: ${strategy.priority})`);
        return strategy;
      }
    }

    logger.warn('No applicable strategy found for URL:', url);
    return null;
  }

  /**
   * Register a new strategy
   */
  registerStrategy(strategy: SiteStrategy): void {
    this.strategies.push(strategy);
    logger.debug(`Registered new strategy: ${strategy.name}`);
  }

  /**
   * Get all registered strategies
   */
  getStrategies(): SiteStrategy[] {
    return [...this.strategies];
  }
}
