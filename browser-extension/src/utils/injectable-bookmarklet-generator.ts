// Generated by Copilot
// Updated BookmarkletGenerator using injection-based architecture
// Replaces self-contained approach with sophisticated browser extension utilities

import { createLogger } from '../utils/logger.js';

interface IBookmarkletConfig {
  // Injection configuration
  injectableUrl: string; // URL where injectable bundle is hosted
  fallbackMode: boolean; // Whether to fall back to basic extraction if injection fails
  timeout: number; // Timeout for loading injectable bundle

  // Processing options
  includeImages: boolean;
  includeLinks: boolean;
  generateFrontmatter: boolean;
  includeMetadata: boolean;
  cleanHtml: boolean;

  // GitHub integration
  useGitHub: boolean;
  githubToken?: string;
  githubRepo?: string;
  githubBranch: string;
  autoCommit: boolean;

  // UI options
  showProgressDialog: boolean;
  showResultDialog: boolean;
  copyToClipboard: boolean;
  logToConsole: boolean;
}

interface IBookmarkletResult {
  success: boolean;
  markdown?: string;
  frontmatter?: string;
  fullDocument?: string;
  error?: string;
  method: 'injection-advanced' | 'injection-basic' | 'fallback-basic';
  processingTime: number;
  fileSize: number;
}

/**
 * Updated BookmarkletGenerator using injection-based architecture
 * Leverages sophisticated browser extension utilities via script injection
 */
export class InjectableBookmarkletGenerator {
  private static readonly DEFAULT_CONFIG: IBookmarkletConfig = {
    injectableUrl: 'https://cdn.prismweave.com/prismweave-combined.min.js',
    fallbackMode: true,
    timeout: 10000,
    includeImages: true,
    includeLinks: true,
    generateFrontmatter: true,
    includeMetadata: true,
    cleanHtml: true,
    useGitHub: false,
    githubBranch: 'main',
    autoCommit: true,
    showProgressDialog: true,
    showResultDialog: true,
    copyToClipboard: true,
    logToConsole: true,
  };

  private _logger = createLogger('InjectableBookmarkletGenerator');

  /**
   * Generate injection-based bookmarklet
   */
  generateBookmarklet(config: Partial<IBookmarkletConfig> = {}): string {
    const fullConfig = { ...InjectableBookmarkletGenerator.DEFAULT_CONFIG, ...config };

    // Create the injectable bookmarklet code
    const bookmarkletCode = this._createInjectableBookmarkletCode(fullConfig);

    // Encode as data URI
    const encodedCode = encodeURIComponent(bookmarkletCode);
    return `javascript:${encodedCode}`;
  }

  /**
   * Generate advanced bookmarklet using full PrismWeave bundle
   */
  generateAdvancedBookmarklet(config: Partial<IBookmarkletConfig> = {}): string {
    const advancedConfig = {
      ...InjectableBookmarkletGenerator.DEFAULT_CONFIG,
      ...config,
      injectableUrl:
        config.injectableUrl || 'https://cdn.prismweave.com/prismweave-combined.min.js',
    };

    return this.generateBookmarklet(advancedConfig);
  }

  /**
   * Generate simple extraction bookmarklet
   */
  generateSimpleBookmarklet(config: Partial<IBookmarkletConfig> = {}): string {
    const simpleConfig = {
      ...InjectableBookmarkletGenerator.DEFAULT_CONFIG,
      ...config,
      injectableUrl:
        config.injectableUrl || 'https://cdn.prismweave.com/content-extractor-injectable.min.js',
      generateFrontmatter: false,
      includeMetadata: false,
    };

    return this.generateBookmarklet(simpleConfig);
  }

  /**
   * Generate GitHub-integrated bookmarklet
   */
  generateGitHubBookmarklet(
    githubToken: string,
    githubRepo: string,
    config: Partial<IBookmarkletConfig> = {}
  ): string {
    const githubConfig = {
      ...InjectableBookmarkletGenerator.DEFAULT_CONFIG,
      ...config,
      useGitHub: true,
      githubToken,
      githubRepo,
      autoCommit: true,
    };

    return this.generateBookmarklet(githubConfig);
  }

  private _createInjectableBookmarkletCode(config: IBookmarkletConfig): string {
    return `
(async function() {
  'use strict';
  
  // Configuration
  const CONFIG = ${JSON.stringify(config, null, 2)};
  
  // Utility functions
  function log(...args) {
    if (CONFIG.logToConsole) {
      console.log('[PrismWeave]', ...args);
    }
  }
  
  function showProgress(message) {
    if (CONFIG.showProgressDialog) {
      // Create or update progress dialog
      let dialog = document.getElementById('prismweave-progress');
      if (!dialog) {
        dialog = document.createElement('div');
        dialog.id = 'prismweave-progress';
        dialog.style.cssText = \`
          position: fixed;
          top: 20px;
          right: 20px;
          background: #2d3748;
          color: white;
          padding: 16px 20px;
          border-radius: 8px;
          box-shadow: 0 4px 12px rgba(0,0,0,0.15);
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
          font-size: 14px;
          z-index: 10000;
          max-width: 300px;
          border-left: 4px solid #4299e1;
        \`;
        document.body.appendChild(dialog);
      }
      dialog.textContent = message;
    }
  }
  
  function hideProgress() {
    const dialog = document.getElementById('prismweave-progress');
    if (dialog) {
      dialog.remove();
    }
  }
  
  function showResult(result) {
    hideProgress();
    
    if (CONFIG.showResultDialog) {
      const success = result.success;
      const message = success 
        ? \`✅ Content processed successfully!\\n\\nMethod: \${result.method}\\nSize: \${(result.fileSize / 1024).toFixed(1)} KB\\nTime: \${result.processingTime}ms\`
        : \`❌ Processing failed: \${result.error}\`;
        
      alert(message);
    }
    
    log('Processing result:', result);
  }
  
  async function loadInjectableBundle() {
    return new Promise((resolve, reject) => {
      // Check if already loaded
      if (window.prismweaveProcessPage) {
        log('Injectable bundle already loaded');
        resolve();
        return;
      }
      
      log('Loading injectable bundle from:', CONFIG.injectableUrl);
      showProgress('Loading PrismWeave utilities...');
      
      const script = document.createElement('script');
      script.src = CONFIG.injectableUrl;
      script.onload = () => {
        log('Injectable bundle loaded successfully');
        resolve();
      };
      script.onerror = () => {
        log('Failed to load injectable bundle');
        reject(new Error('Failed to load PrismWeave bundle'));
      };
      
      // Set timeout
      setTimeout(() => {
        reject(new Error('Bundle loading timeout'));
      }, CONFIG.timeout);
      
      document.head.appendChild(script);
    });
  }
  
  async function processWithAdvancedExtraction() {
    try {
      showProgress('Processing page with advanced extraction...');
      
      const startTime = Date.now();
      const result = await window.prismweaveProcessPage({
        extraction: {
          includeImages: CONFIG.includeImages,
          includeLinks: CONFIG.includeLinks,
          cleanHtml: CONFIG.cleanHtml
        },
        markdown: {
          generateFrontmatter: CONFIG.generateFrontmatter,
          includeMetadata: CONFIG.includeMetadata,
          includeImages: CONFIG.includeImages,
          includeLinks: CONFIG.includeLinks
        }
      });
      
      const processingTime = Date.now() - startTime;
      const fileSize = new Blob([result.fullDocument]).size;
      
      // Copy to clipboard if requested
      if (CONFIG.copyToClipboard && navigator.clipboard) {
        try {
          await navigator.clipboard.writeText(result.fullDocument);
          log('Content copied to clipboard');
        } catch (clipboardError) {
          log('Failed to copy to clipboard:', clipboardError);
        }
      }
      
      // Commit to GitHub if configured
      if (CONFIG.useGitHub && CONFIG.githubToken && CONFIG.githubRepo) {
        await commitToGitHub(result);
      }
      
      return {
        success: true,
        markdown: result.markdown,
        frontmatter: result.frontmatter,
        fullDocument: result.fullDocument,
        method: 'injection-advanced',
        processingTime,
        fileSize
      };
      
    } catch (error) {
      log('Advanced extraction failed:', error);
      throw error;
    }
  }
  
  async function processWithBasicFallback() {
    try {
      showProgress('Using basic fallback extraction...');
      
      const startTime = Date.now();
      
      // Basic content extraction
      const title = document.title || 'Untitled';
      const url = window.location.href;
      
      // Try to find main content
      const contentElement = document.querySelector('article, main, .content, #content') || document.body;
      const content = contentElement.innerHTML;
      
      // Basic HTML to markdown conversion
      let markdown = content
        .replace(/<h([1-6])[^>]*>(.*?)<\\/h[1-6]>/gi, (match, level, text) => {
          const headerLevel = '#'.repeat(parseInt(level));
          return \`\\n\${headerLevel} \${text.replace(/<[^>]*>/g, '').trim()}\\n\`;
        })
        .replace(/<p[^>]*>(.*?)<\\/p>/gi, '\\n$1\\n')
        .replace(/<(strong|b)[^>]*>(.*?)<\\/(strong|b)>/gi, '**$2**')
        .replace(/<(em|i)[^>]*>(.*?)<\\/(em|i)>/gi, '*$2*')
        .replace(/<br[^>]*\\/?>/gi, '\\n')
        .replace(/<[^>]*>/g, '')
        .replace(/\\n\\s*\\n\\s*\\n/g, '\\n\\n')
        .trim();
      
      // Add frontmatter if requested
      let frontmatter = '';
      let fullDocument = markdown;
      
      if (CONFIG.generateFrontmatter) {
        frontmatter = \`---
title: "\${title}"
url: "\${url}"
captured_at: "\${new Date().toISOString()}"
method: "basic-fallback"
---\`;
        fullDocument = \`\${frontmatter}\\n\\n\${markdown}\`;
      }
      
      const processingTime = Date.now() - startTime;
      const fileSize = new Blob([fullDocument]).size;
      
      // Copy to clipboard if requested
      if (CONFIG.copyToClipboard && navigator.clipboard) {
        try {
          await navigator.clipboard.writeText(fullDocument);
          log('Content copied to clipboard');
        } catch (clipboardError) {
          log('Failed to copy to clipboard:', clipboardError);
        }
      }
      
      return {
        success: true,
        markdown,
        frontmatter,
        fullDocument,
        method: 'fallback-basic',
        processingTime,
        fileSize
      };
      
    } catch (error) {
      log('Basic fallback failed:', error);
      throw error;
    }
  }
  
  async function commitToGitHub(result) {
    try {
      showProgress('Committing to GitHub...');
      
      // Generate filename
      const domain = new URL(window.location.href).hostname;
      const date = new Date().toISOString().split('T')[0];
      const timestamp = new Date().toTimeString().split(' ')[0].replace(/:/g, '');
      const filename = \`documents/\${date}-\${domain}-\${timestamp}.md\`;
      
      // Prepare commit
      const commitMessage = \`Add captured content: \${result.title || document.title}\`;
      
      // Use basic fetch for GitHub API
      const response = await fetch(\`https://api.github.com/repos/\${CONFIG.githubRepo}/contents/\${filename}\`, {
        method: 'PUT',
        headers: {
          'Authorization': \`token \${CONFIG.githubToken}\`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          message: commitMessage,
          content: btoa(unescape(encodeURIComponent(result.fullDocument))),
          branch: CONFIG.githubBranch
        })
      });
      
      if (!response.ok) {
        throw new Error(\`GitHub API error: \${response.status}\`);
      }
      
      log('Successfully committed to GitHub');
      
    } catch (error) {
      log('GitHub commit failed:', error);
      throw error;
    }
  }
  
  // Main execution
  try {
    log('Starting PrismWeave injection-based processing');
    showProgress('Initializing PrismWeave...');
    
    let result;
    
    try {
      // Try to load and use advanced injectable bundle
      await loadInjectableBundle();
      result = await processWithAdvancedExtraction();
      
    } catch (injectionError) {
      log('Injection approach failed:', injectionError);
      
      if (CONFIG.fallbackMode) {
        log('Falling back to basic extraction');
        result = await processWithBasicFallback();
      } else {
        throw injectionError;
      }
    }
    
    showResult(result);
    
  } catch (error) {
    const errorResult = {
      success: false,
      error: error.message,
      method: 'error',
      processingTime: 0,
      fileSize: 0
    };
    
    showResult(errorResult);
  }
})();`.trim();
  }

  /**
   * Create bookmarklet interface HTML for user interaction
   */
  generateBookmarkletInterface(): string {
    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PrismWeave Bookmarklet Generator</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background: #f7fafc;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
        }
        .config-section {
            margin-bottom: 25px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 6px;
            border-left: 4px solid #4299e1;
        }
        .form-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
            color: #2d3748;
        }
        input, select, textarea {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #cbd5e0;
            border-radius: 4px;
            font-size: 14px;
        }
        input[type="checkbox"] {
            width: auto;
            margin-right: 8px;
        }
        .checkbox-group {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }
        .btn {
            background: #4299e1;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            margin-right: 10px;
            margin-bottom: 10px;
        }
        .btn:hover {
            background: #3182ce;
        }
        .btn-secondary {
            background: #718096;
        }
        .btn-secondary:hover {
            background: #4a5568;
        }
        .bookmarklet-output {
            margin-top: 25px;
            padding: 20px;
            background: #edf2f7;
            border-radius: 6px;
            border: 1px solid #e2e8f0;
        }
        .bookmarklet-link {
            display: block;
            background: #2d3748;
            color: white;
            padding: 12px 16px;
            border-radius: 6px;
            text-decoration: none;
            font-family: 'Courier New', monospace;
            font-size: 13px;
            word-break: break-all;
            margin-bottom: 15px;
            border: 2px dashed #4a5568;
        }
        .bookmarklet-link:hover {
            background: #1a202c;
        }
        .instructions {
            font-size: 14px;
            color: #4a5568;
            margin-top: 15px;
        }
        .warning {
            background: #fed7d7;
            border: 1px solid #feb2b2;
            color: #c53030;
            padding: 12px;
            border-radius: 4px;
            margin-bottom: 15px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🌟 PrismWeave Injection-Based Bookmarklet Generator</h1>
            <p>Create powerful bookmarklets that leverage sophisticated browser extension utilities via script injection</p>
        </div>

        <div class="config-section">
            <h3>📁 Injection Configuration</h3>
            <div class="form-group">
                <label for="injectableUrl">Injectable Bundle URL:</label>
                <input type="url" id="injectableUrl" value="https://cdn.prismweave.com/prismweave-combined.min.js" 
                       placeholder="https://your-cdn.com/prismweave-combined.min.js">
            </div>
            <div class="checkbox-group">
                <input type="checkbox" id="fallbackMode" checked>
                <label for="fallbackMode">Enable fallback mode (basic extraction if injection fails)</label>
            </div>
            <div class="form-group">
                <label for="timeout">Bundle Loading Timeout (ms):</label>
                <input type="number" id="timeout" value="10000" min="1000" max="30000">
            </div>
        </div>

        <div class="config-section">
            <h3>⚙️ Processing Options</h3>
            <div class="checkbox-group">
                <input type="checkbox" id="includeImages" checked>
                <label for="includeImages">Include images</label>
            </div>
            <div class="checkbox-group">
                <input type="checkbox" id="includeLinks" checked>
                <label for="includeLinks">Include links</label>
            </div>
            <div class="checkbox-group">
                <input type="checkbox" id="generateFrontmatter" checked>
                <label for="generateFrontmatter">Generate YAML frontmatter</label>
            </div>
            <div class="checkbox-group">
                <input type="checkbox" id="includeMetadata" checked>
                <label for="includeMetadata">Include metadata</label>
            </div>
            <div class="checkbox-group">
                <input type="checkbox" id="cleanHtml" checked>
                <label for="cleanHtml">Clean HTML content</label>
            </div>
        </div>

        <div class="config-section">
            <h3>🐙 GitHub Integration</h3>
            <div class="checkbox-group">
                <input type="checkbox" id="useGitHub">
                <label for="useGitHub">Enable GitHub auto-commit</label>
            </div>
            <div class="form-group">
                <label for="githubToken">GitHub Token:</label>
                <input type="password" id="githubToken" placeholder="ghp_xxxxxxxxxxxxxxxxxxxx">
            </div>
            <div class="form-group">
                <label for="githubRepo">Repository (owner/repo):</label>
                <input type="text" id="githubRepo" placeholder="username/prismweave-docs">
            </div>
            <div class="form-group">
                <label for="githubBranch">Branch:</label>
                <input type="text" id="githubBranch" value="main">
            </div>
        </div>

        <div class="config-section">
            <h3>🎨 UI Options</h3>
            <div class="checkbox-group">
                <input type="checkbox" id="showProgressDialog" checked>
                <label for="showProgressDialog">Show progress dialog</label>
            </div>
            <div class="checkbox-group">
                <input type="checkbox" id="showResultDialog" checked>
                <label for="showResultDialog">Show result dialog</label>
            </div>
            <div class="checkbox-group">
                <input type="checkbox" id="copyToClipboard" checked>
                <label for="copyToClipboard">Copy to clipboard</label>
            </div>
            <div class="checkbox-group">
                <input type="checkbox" id="logToConsole" checked>
                <label for="logToConsole">Log to console</label>
            </div>
        </div>

        <div style="text-align: center; margin: 30px 0;">
            <button class="btn" onclick="generateAdvancedBookmarklet()">🚀 Generate Advanced Bookmarklet</button>
            <button class="btn btn-secondary" onclick="generateSimpleBookmarklet()">📝 Generate Simple Bookmarklet</button>
            <button class="btn btn-secondary" onclick="generateGitHubBookmarklet()">🐙 Generate GitHub Bookmarklet</button>
        </div>

        <div id="output" class="bookmarklet-output" style="display: none;">
            <h3>Generated Bookmarklet:</h3>
            <a id="bookmarkletLink" class="bookmarklet-link" href="#" draggable="true">
                <!-- Generated bookmarklet will appear here -->
            </a>
            <div class="instructions">
                <strong>Instructions:</strong>
                <ol>
                    <li>Drag the link above to your bookmarks bar, or</li>
                    <li>Right-click the link and "Bookmark this link", or</li>
                    <li>Copy the link address and create a new bookmark manually</li>
                    <li>Click the bookmark on any web page to extract content</li>
                </ol>
                <p><strong>Note:</strong> This bookmarklet uses injection-based architecture to leverage sophisticated content extraction and markdown conversion utilities.</p>
            </div>
        </div>
    </div>

    <script>
        // Import the generator (in a real implementation, this would be bundled)
        // For now, we'll create a simplified version

        function getConfig() {
            return {
                injectableUrl: document.getElementById('injectableUrl').value,
                fallbackMode: document.getElementById('fallbackMode').checked,
                timeout: parseInt(document.getElementById('timeout').value),
                includeImages: document.getElementById('includeImages').checked,
                includeLinks: document.getElementById('includeLinks').checked,
                generateFrontmatter: document.getElementById('generateFrontmatter').checked,
                includeMetadata: document.getElementById('includeMetadata').checked,
                cleanHtml: document.getElementById('cleanHtml').checked,
                useGitHub: document.getElementById('useGitHub').checked,
                githubToken: document.getElementById('githubToken').value,
                githubRepo: document.getElementById('githubRepo').value,
                githubBranch: document.getElementById('githubBranch').value,
                showProgressDialog: document.getElementById('showProgressDialog').checked,
                showResultDialog: document.getElementById('showResultDialog').checked,
                copyToClipboard: document.getElementById('copyToClipboard').checked,
                logToConsole: document.getElementById('logToConsole').checked
            };
        }

        function generateAdvancedBookmarklet() {
            const config = getConfig();
            // This would use the actual generator class
            const bookmarklet = createAdvancedBookmarklet(config);
            displayBookmarklet(bookmarklet, 'Advanced PrismWeave Bookmarklet');
        }

        function generateSimpleBookmarklet() {
            const config = getConfig();
            config.generateFrontmatter = false;
            config.includeMetadata = false;
            const bookmarklet = createAdvancedBookmarklet(config);
            displayBookmarklet(bookmarklet, 'Simple PrismWeave Bookmarklet');
        }

        function generateGitHubBookmarklet() {
            const config = getConfig();
            if (!config.githubToken || !config.githubRepo) {
                alert('Please provide GitHub token and repository for GitHub integration.');
                return;
            }
            config.useGitHub = true;
            const bookmarklet = createAdvancedBookmarklet(config);
            displayBookmarklet(bookmarklet, 'GitHub PrismWeave Bookmarklet');
        }

        function createAdvancedBookmarklet(config) {
            // Simplified version of the bookmarklet generation
            // In the real implementation, this would use the InjectableBookmarkletGenerator class
            const code = \`(async function() {
                // Load injectable bundle and process page
                // [Simplified for demo - actual implementation would be more comprehensive]
                try {
                    const script = document.createElement('script');
                    script.src = '\${config.injectableUrl}';
                    document.head.appendChild(script);
                    await new Promise(resolve => script.onload = resolve);
                    
                    const result = await window.prismweaveProcessPage({
                        extraction: {
                            includeImages: \${config.includeImages},
                            includeLinks: \${config.includeLinks},
                            cleanHtml: \${config.cleanHtml}
                        },
                        markdown: {
                            generateFrontmatter: \${config.generateFrontmatter},
                            includeMetadata: \${config.includeMetadata}
                        }
                    });
                    
                    if (\${config.copyToClipboard} && navigator.clipboard) {
                        await navigator.clipboard.writeText(result.fullDocument);
                    }
                    
                    console.log('PrismWeave processed:', result);
                    alert('Content processed successfully!');
                } catch (error) {
                    console.error('PrismWeave error:', error);
                    alert('Error: ' + error.message);
                }
            })();\`;
            
            return 'javascript:' + encodeURIComponent(code);
        }

        function displayBookmarklet(bookmarklet, title) {
            const output = document.getElementById('output');
            const link = document.getElementById('bookmarkletLink');
            
            link.href = bookmarklet;
            link.textContent = title;
            link.title = title;
            
            output.style.display = 'block';
            output.scrollIntoView({ behavior: 'smooth' });
        }
    </script>
</body>
</html>`;
  }
}

export default InjectableBookmarkletGenerator;
