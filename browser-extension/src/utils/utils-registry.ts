// Generated by Copilot
// PrismWeave Utilities Registry
// Centralized utility management to eliminate duplication

interface ILogger {
  debug: (...args: unknown[]) => void;
  info: (...args: unknown[]) => void;
  warn: (...args: unknown[]) => void;
  error: (...args: unknown[]) => void;
  group: (label?: string) => void;
  groupEnd: () => void;
}

interface ILoggerFactory {
  createLogger: (component: string) => ILogger;
}

interface IGlobalScope {
  PrismWeaveRegistry?: UtilsRegistry;
  PrismWeaveLogger?: ILoggerFactory;
}

class UtilsRegistry {
  private static instance: UtilsRegistry;
  private utilities: Map<string, unknown>;
  private logger: ILoggerFactory | null;

  constructor() {
    this.utilities = new Map();
    this.logger = null;
  }

  static getInstance(): UtilsRegistry {
    if (!UtilsRegistry.instance) {
      UtilsRegistry.instance = new UtilsRegistry();
    }
    return UtilsRegistry.instance;
  }

  register(name: string, utility: unknown): void {
    this.utilities.set(name, utility);
  }

  get<T = unknown>(name: string): T | undefined {
    return this.utilities.get(name) as T | undefined;
  }

  getLogger(component: string): ILogger {
    if (!this.logger) {
      const globalScope = typeof window !== 'undefined' ? window as IGlobalScope : self as IGlobalScope;
      if (globalScope.PrismWeaveLogger) {
        this.logger = globalScope.PrismWeaveLogger;
      }
    }
    return this.logger?.createLogger(component) || this.createFallbackLogger();
  }

  private createFallbackLogger(): ILogger {
    return {
      debug: console.log.bind(console),
      info: console.log.bind(console),
      warn: console.warn.bind(console),
      error: console.error.bind(console),
      group: console.group.bind(console),
      groupEnd: console.groupEnd.bind(console)
    };
  }
}

// Global registry instance
if (typeof window !== 'undefined') {
  (window as IGlobalScope).PrismWeaveRegistry = UtilsRegistry.getInstance();
} else if (typeof self !== 'undefined') {
  (self as IGlobalScope).PrismWeaveRegistry = UtilsRegistry.getInstance();
}

export default UtilsRegistry;
export type { ILogger, ILoggerFactory };
