// Generated by Copilot
// Content Extractor wrapper that uses shared core with Chrome extension DOM provider
// Maintains backward compatibility while using new shared core

import { BrowserDOMProvider } from '../shared/adapters/chrome-adapters.js';
import type { IContentResult, IExtractorOptions, IImageInfo, IPageStructure } from '../shared/core/content-extractor-core.js';
import { ContentExtractor as SharedContentExtractor } from '../shared/core/content-extractor.js';
import type { IDocumentMetadata } from '../types/index.js';
import { createLogger } from './logger.js';

const logger = createLogger('ContentExtractor');

// Create shared content extractor instance with Chrome DOM provider
const domProvider = new BrowserDOMProvider();
const sharedExtractor = new SharedContentExtractor(domProvider, logger);

/**
 * Legacy content extractor that delegates to shared implementation
 * Maintains backward compatibility while using new shared core
 */
export class ContentExtractor {
  async extractContent(options: IExtractorOptions = {}): Promise<IContentResult> {
    return sharedExtractor.extractContent(options);
  }

  extractMetadata(): IDocumentMetadata {
    return sharedExtractor.extractMetadata();
  }

  extractImages(): IImageInfo[] {
    return sharedExtractor.extractImages();
  }

  getPageStructure(): IPageStructure {
    return sharedExtractor.getPageStructure();
  }

  getContentQualityScore(): number {
    return sharedExtractor.getContentQualityScore();
  }

  isPaywallPresent(): boolean {
    return sharedExtractor.isPaywallPresent();
  }
}

// Export types for backward compatibility
export type {
    IContentResult,
    IExtractorOptions,
    IImageInfo,
    IPageStructure
};

// Export for ES6 modules
    export { ContentExtractor as default };

// Make available globally for service worker importScripts compatibility
if (typeof globalThis !== 'undefined') {
  (globalThis as any).ContentExtractor = ContentExtractor;
} else if (typeof self !== 'undefined') {
  (self as any).ContentExtractor = ContentExtractor;
}
