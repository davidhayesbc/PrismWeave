// Generated by Copilot
// Metadata Extractor - Separated metadata extraction logic
// Handles extraction of title, author, tags, and other page metadata

import { IDocumentMetadata } from '../types/index.js';

export interface IMetadataExtractor {
  extractTitle(): string;
  extractAuthor(): string | undefined;
  extractTags(): string[];
  extractDescription(): string | undefined;
  extractMetadata(): IDocumentMetadata;
}

/**
 * Extracts metadata from web pages using multiple fallback strategies
 */
export class MetadataExtractor implements IMetadataExtractor {
  /**
   * Extract page title using multiple methods
   */
  extractTitle(): string {
    const methods = [
      () => this.getMetaContent('property', 'og:title'),
      () => this.getMetaContent('name', 'twitter:title'),
      () => document.querySelector('h1')?.textContent?.trim(),
      () =>
        document.querySelector('.article-title, .post-title, .entry-title')?.textContent?.trim(),
      () => document.title?.trim(),
    ];

    return this.tryMethods(methods) || 'Untitled Document';
  }

  /**
   * Extract author information
   */
  extractAuthor(): string | undefined {
    const methods = [
      () => this.getMetaContent('name', 'author'),
      () => this.getMetaContent('property', 'article:author'),
      () =>
        document
          .querySelector('.author, .byline, .post-author, [rel="author"]')
          ?.textContent?.trim(),
    ];

    return this.tryMethods(methods);
  }

  /**
   * Extract tags and keywords
   */
  extractTags(): string[] {
    const tags = new Set<string>();

    // Meta keywords
    const metaKeywords = this.getMetaContent('name', 'keywords');
    if (metaKeywords) {
      metaKeywords.split(',').forEach(tag => {
        const cleaned = tag.trim().toLowerCase();
        if (cleaned.length > 0) tags.add(cleaned);
      });
    }

    // Tag elements
    document.querySelectorAll('.tag, .category, .label, [rel="tag"]').forEach(element => {
      const tag = element.textContent?.trim().toLowerCase();
      if (tag && tag.length > 0) {
        tags.add(tag);
      }
    });

    // URL-based categories
    const urlParts = window.location.pathname
      .split('/')
      .filter(
        part => part.length > 0 && !part.match(/^\d+$/) && !['article', 'post'].includes(part)
      );

    urlParts.slice(0, 2).forEach(part => tags.add(part.toLowerCase()));

    return Array.from(tags).slice(0, 10);
  }

  /**
   * Extract page description
   */
  extractDescription(): string | undefined {
    const methods = [
      () => this.getMetaContent('property', 'og:description'),
      () => this.getMetaContent('name', 'description'),
      () => this.getMetaContent('name', 'twitter:description'),
      () => document.querySelector('.excerpt, .summary, .description')?.textContent?.trim(),
    ];

    return this.tryMethods(methods);
  }

  /**
   * Extract complete metadata object
   */
  extractMetadata(): IDocumentMetadata {
    const metadata: IDocumentMetadata = {
      title: this.extractTitle(),
      url: window.location.href,
      captureDate: new Date().toISOString(),
      tags: this.extractTags(),
      wordCount: 0, // Will be set by ContentExtractor
      estimatedReadingTime: 0, // Will be set by ContentExtractor
    };

    const author = this.extractAuthor();
    if (author) {
      metadata.author = author;
    }

    return metadata;
  }

  /**
   * Extract publication date
   */
  private extractPublishedDate(): Date | undefined {
    const methods = [
      () => this.getMetaContent('property', 'article:published_time'),
      () => this.getMetaContent('name', 'publishedDate'),
      () => document.querySelector('time[datetime]')?.getAttribute('datetime') || undefined,
      () => document.querySelector('.published, .date, .post-date')?.textContent?.trim(),
    ];

    const dateString = this.tryMethods(methods);
    if (dateString) {
      const date = new Date(dateString);
      return isNaN(date.getTime()) ? undefined : date;
    }

    return undefined;
  }

  /**
   * Extract page language
   */
  private extractLanguage(): string | undefined {
    return (
      document.documentElement.lang ||
      this.getMetaContent('property', 'og:locale') ||
      this.getMetaContent('name', 'language') ||
      'en'
    ); // Default fallback
  }

  /**
   * Get meta tag content by attribute and value
   */
  private getMetaContent(attribute: string, value: string): string | undefined {
    const selector = `meta[${attribute}="${value}"]`;
    return document.querySelector(selector)?.getAttribute('content') || undefined;
  }

  /**
   * Try multiple extraction methods and return first successful result
   */
  private tryMethods(methods: Array<() => string | undefined>): string | undefined {
    for (const method of methods) {
      try {
        const result = method();
        if (result && result.length > 0) {
          return this.cleanText(result);
        }
      } catch (error) {
        // Continue to next method
      }
    }
    return undefined;
  }

  /**
   * Clean extracted text
   */
  private cleanText(text: string): string {
    return text
      .replace(/\s+/g, ' ')
      .replace(/[\u2000-\u206F\u2E00-\u2E7F\\'"#$%&()*+,\/:;<=>?@\[\]^_`{|}~]/g, '')
      .trim();
  }

  /**
   * Extract all Open Graph metadata
   */
  getOpenGraphData(): Record<string, string> {
    const ogData: Record<string, string> = {};

    document.querySelectorAll('meta[property^="og:"]').forEach(meta => {
      const property = meta.getAttribute('property');
      const content = meta.getAttribute('content');
      if (property && content) {
        ogData[property] = content;
      }
    });

    return ogData;
  }

  /**
   * Extract all Twitter Card metadata
   */
  getTwitterCardData(): Record<string, string> {
    const twitterData: Record<string, string> = {};

    document.querySelectorAll('meta[name^="twitter:"]').forEach(meta => {
      const name = meta.getAttribute('name');
      const content = meta.getAttribute('content');
      if (name && content) {
        twitterData[name] = content;
      }
    });

    return twitterData;
  }
}
