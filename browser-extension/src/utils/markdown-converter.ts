// Generated by Copilot
// PrismWeave Markdown Converter - Browser Extension Adapter
//
// This class serves as the browser-specific adapter for the MarkdownConverterCore.
// It handles TurndownService initialization and provides environment-aware behavior
// for different contexts (content script, service worker, tests).
//
// Architecture:
// - MarkdownConverterCore: Contains all conversion logic (environment-agnostic)
// - MarkdownConverter: Browser-specific adapter with TurndownService integration
//
// Usage: Always use this class in browser extension contexts, not the core directly.

import { createLogger } from './logger';
const logger = createLogger('MarkdownConverter');

import TurndownService from 'turndown';
import {
  IConversionOptions,
  IConversionResult,
  MarkdownConverterCore,
} from './markdown-converter-core';

/**
 * Browser Extension Markdown Converter Adapter
 *
 * This class provides browser-specific markdown conversion capabilities by extending
 * the environment-agnostic MarkdownConverterCore. It handles:
 *
 * - TurndownService initialization and configuration
 * - Context detection (service worker vs content script vs test)
 * - Browser API integration and error handling
 * - Graceful fallbacks when TurndownService is unavailable
 *
 * Usage:
 * ```typescript
 * const converter = new MarkdownConverter();
 * const result = converter.convertToMarkdown(htmlContent);
 * ```
 *
 * Context Behavior:
 * - Content Script: Full TurndownService functionality
 * - Service Worker: Limited fallback (TurndownService not available)
 * - Test Environment: Mock-compatible initialization
 */
export class MarkdownConverter extends MarkdownConverterCore {
  constructor() {
    super();
    this.initializeTurndown();
  }

  private initializeTurndown(): void {
    // Service worker context check - TurndownService should never be loaded here
    const isServiceWorker =
      typeof (globalThis as any).importScripts === 'function' && typeof window === 'undefined';
    if (isServiceWorker) {
      if (process.env.NODE_ENV !== 'test') {
        logger.info('Running in service worker context, TurndownService not available');
      }
      this.turndownService = null;
      this._isInitialized = true;
      return;
    }

    // Check if document is available (content script context)
    if (typeof document === 'undefined') {
      if (process.env.NODE_ENV !== 'test') {
        logger.warn('Document not available, TurndownService cannot be initialized');
      }
      this.turndownService = null;
      this._isInitialized = true;
      return;
    }

    try {
      // Use the imported TurndownService directly
      const options = this.getTurndownOptions();
      this.turndownService = new TurndownService(options);
      this.setupTurndownService();
      this._isInitialized = true;
      if (process.env.NODE_ENV !== 'test') {
        logger.info('TurndownService initialized successfully');
      }
    } catch (error) {
      if (process.env.NODE_ENV !== 'test') {
        logger.warn('Failed to initialize TurndownService:', error);
      }
      this.turndownService = null;
      this._isInitialized = true;
    }
  }
}

// Re-export the interfaces for backward compatibility and convenience
// These are the main types that consumers should use
export type { IConversionOptions, IConversionResult };

// Export the core class for advanced use cases (testing, custom adapters)
// Most code should use MarkdownConverter instead of the core directly
export { MarkdownConverterCore } from './markdown-converter-core';
