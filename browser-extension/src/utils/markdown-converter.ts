// Generated by Copilot
// PrismWeave Markdown Converter - Browser Extension wrapper
// Uses the shared core with browser-specific TurndownService initialization

import { createLogger } from './logger';
const logger = createLogger('MarkdownConverter');

import TurndownService from 'turndown';
import {
  IConversionOptions,
  IConversionResult,
  MarkdownConverterCore,
} from './markdown-converter-core';

export class MarkdownConverter extends MarkdownConverterCore {
  constructor() {
    super();
    this.initializeTurndown();
  }

  private initializeTurndown(): void {
    // Service worker context check - TurndownService should never be loaded here
    const isServiceWorker =
      typeof (globalThis as any).importScripts === 'function' && typeof window === 'undefined';
    if (isServiceWorker) {
      if (process.env.NODE_ENV !== 'test') {
        logger.info('Running in service worker context, TurndownService not available');
      }
      this.turndownService = null;
      this._isInitialized = true;
      return;
    }

    // Check if document is available (content script context)
    if (typeof document === 'undefined') {
      if (process.env.NODE_ENV !== 'test') {
        logger.warn('Document not available, TurndownService cannot be initialized');
      }
      this.turndownService = null;
      this._isInitialized = true;
      return;
    }

    try {
      // Use the imported TurndownService directly
      const options = this.getTurndownOptions();
      this.turndownService = new TurndownService(options);
      this.setupTurndownService();
      this._isInitialized = true;
      if (process.env.NODE_ENV !== 'test') {
        logger.info('TurndownService initialized successfully');
      }
    } catch (error) {
      if (process.env.NODE_ENV !== 'test') {
        logger.warn('Failed to initialize TurndownService:', error);
      }
      this.turndownService = null;
      this._isInitialized = true;
    }
  }
}

// Re-export the interfaces for backward compatibility
export type { IConversionOptions, IConversionResult };
