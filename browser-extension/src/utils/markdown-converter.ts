// Generated by Copilot
// PrismWeave Markdown Converter - Browser Extension wrapper
// Uses the shared core with browser-specific TurndownService initialization

import {
  IConversionOptions,
  IConversionResult,
  MarkdownConverterCore,
} from './markdown-converter-core';

interface ITurndownService {
  turndown(html: string): string;
  addRule(key: string, rule: any): void;
  remove(filter: string | string[]): void;
  use(plugin: any): void;
}

declare global {
  interface Window {
    TurndownService?: new (options?: any) => ITurndownService;
  }
}

export class MarkdownConverter extends MarkdownConverterCore {
  constructor() {
    super();
    this.initializeTurndown();
  }

  private initializeTurndown(): void {
    // Service worker context check - TurndownService should never be loaded here
    const isServiceWorker =
      typeof (globalThis as any).importScripts === 'function' && typeof window === 'undefined';
    if (isServiceWorker) {
      console.info(
        'MarkdownConverter: Running in service worker context, TurndownService not available'
      );
      this.turndownService = null;
      this._isInitialized = true;
      return;
    }

    // Check if document is available (content script context)
    if (typeof document === 'undefined') {
      console.warn(
        'MarkdownConverter: Document not available, TurndownService cannot be initialized'
      );
      this.turndownService = null;
      this._isInitialized = true;
      return;
    }

    // Get TurndownService constructor from window or globalThis
    const TurndownService =
      (typeof window !== 'undefined' && window.TurndownService) ||
      (typeof globalThis !== 'undefined' && (globalThis as any).TurndownService);

    // Check if TurndownService is available
    if (!TurndownService) {
      console.warn('MarkdownConverter: TurndownService not available, cannot initialize');
      this.turndownService = null;
      this._isInitialized = true;
      return;
    }

    // TurndownService is available - initialize it
    this.turndownService = new TurndownService();
    this.setupTurndownService();
    this._isInitialized = true;
    console.info('MarkdownConverter: TurndownService initialized successfully');
  }
}

// Re-export the interfaces for backward compatibility
export type { IConversionOptions, IConversionResult };
