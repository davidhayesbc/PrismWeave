// Generated by Copilot
// Centralized Global Scope Interface for PrismWeave Browser Extension
// Consolidates all global scope definitions to eliminate duplication

// Import LogLevel type from logger
type LogLevel = 0 | 1 | 2 | 3 | 4;

// Logger types
export interface ILogger {
  debug: (...args: unknown[]) => void;
  info: (...args: unknown[]) => void;
  warn: (...args: unknown[]) => void;
  error: (...args: unknown[]) => void;
  group: (label?: string, collapsed?: boolean) => void;
  groupEnd: () => void;
  setLevel: (level: LogLevel) => void;
  enable: () => void;
  disable: () => void;
  withContext: (contextData: Record<string, unknown>) => ILogger;
  getEnvironmentInfo: () => Record<string, unknown>;
}

export interface ILoggerFactory {
  createLogger: (component: string) => ILogger;
  Logger?: {
    setGlobalLevel: (level: LogLevel) => void;
    setGlobalEnabled: (enabled: boolean) => void;
    getGlobalConfiguration: () => Record<string, unknown>;
    getStructuredLogs: () => unknown[];
    clearStructuredLogs: () => void;
  };
  enableDebugMode?: () => void;
  disableDebugMode?: () => void;
}

// Utility registry types
export interface IUtilityRegistry {
  register: (name: string, utility: unknown) => void;
  get: <T = unknown>(name: string) => T | undefined;
  getLogger: (component: string) => ILogger;
}

// UI utility types
export interface IUIUtils {
  showStatus: (
    message: string,
    type?: 'success' | 'error' | 'warning' | 'info',
    duration?: number
  ) => void;
  hideStatus: () => void;
  showModal: (content: string, options?: Record<string, unknown>) => void;
  hideModal: () => void;
}

export interface IUIEnhancer {
  showProgressToast: (message: string, duration?: number) => void;
  showSuccessToast: (message: string, duration?: number) => void;
  showErrorToast: (message: string, duration?: number) => void;
}

// Shared utilities types
export interface ISharedUtils {
  isValidUrl: (url: string) => boolean;
  sanitizeForFilename: (text: string, maxLength?: number) => string;
  generateFilename: (title: string, url: string, pattern?: string) => string;
}

// Performance monitor types
export interface IPerformanceMonitor {
  startTimer: (operation: string) => string | null;
  endTimer: (timerId: string | null, metadata?: Record<string, unknown>) => unknown;
  getMetrics: () => unknown;
}

// Main global scope interface that all utilities should use
export interface IPrismWeaveGlobalScope {
  // Enhanced logging system
  PRISMWEAVE_LOG_ENABLED?: boolean;
  PRISMWEAVE_LOG_LEVEL?: number;
  PRISMWEAVE_LOG_CONFIG?: Record<string, unknown>;
  PRISMWEAVE_STRUCTURED_LOGS?: unknown[];
  PRISMWEAVE_ENV_LOGGING?: Record<string, { enabled: boolean; level: number }>;
  PrismWeaveLogger?: ILoggerFactory;

  // Utility registry
  PrismWeaveRegistry?: IUtilityRegistry;

  // Individual utilities
  SharedUtils?: ISharedUtils;
  UIUtils?: IUIUtils;
  UIEnhancer?: IUIEnhancer;
  PerformanceMonitor?: IPerformanceMonitor;

  // Chrome extension globals
  TurndownService?: any;

  // Service worker specific
  importScripts?: (url: string) => void;
}

// Convenience type for accessing global scope in both window and worker contexts
export type GlobalScope =
  | (Window & IPrismWeaveGlobalScope)
  | (WorkerGlobalScope & IPrismWeaveGlobalScope);

// Helper function to get the appropriate global scope
export function getGlobalScope(): GlobalScope {
  // Service worker context: use 'self'
  if (typeof self !== 'undefined' && typeof window === 'undefined') {
    return self as GlobalScope;
  }
  // Browser context: use 'window'
  if (typeof window !== 'undefined') {
    return window as GlobalScope;
  }
  // Node.js/test context: use 'globalThis' as fallback
  if (typeof globalThis !== 'undefined') {
    return globalThis as unknown as GlobalScope;
  }
  // Final fallback - throw error if no global scope found
  throw new Error('No global scope available');
}
