// Generated by Copilot
// Content Quality Analyzer - Separated content quality assessment
// Handles content scoring and validation logic

export interface IContentQuality {
  score: number;
  isContent: boolean;
  signals: IContentSignals;
  reasons: string[];
}

export interface IContentSignals {
  textLength: number;
  paragraphCount: number;
  headingCount: number;
  linkCount: number;
  codeBlockCount: number;
  listItemCount: number;
  blockquoteCount: number;
  hasContentClass: boolean;
  hasNavClass: boolean;
  hasStructuredData: boolean;
  textToHtmlRatio: number;
  linkDensity: number;
}

export interface IQualityOptions {
  isDynamicSite?: boolean;
  minTextLength?: number;
  minTextRatio?: number;
  maxLinkDensity?: number;
}

/**
 * Analyzes content quality and determines if an element contains main content
 */
export class ContentQualityAnalyzer {
  private readonly contentTerms = [
    'content',
    'article',
    'post',
    'entry',
    'body',
    'text',
    'prose',
    'blog',
    'main',
  ];

  private readonly navigationTerms = [
    'navigation',
    'navbar',
    'menu-',
    'sidebar',
    'footer',
    'header',
    'banner',
    'widget',
    '-ad-',
    'advertisement',
    'recent',
    'related',
    'more',
    'nav',
  ];

  /**
   * Analyze content quality of an element
   */
  analyzeContent(element: Element, options: IQualityOptions = {}): IContentQuality {
    const signals = this.extractSignals(element);
    const score = this.calculateScore(signals, options);
    const isContent = this.determineIfContent(signals, options);
    const reasons = this.generateReasons(signals, isContent, options);

    return {
      score,
      isContent,
      signals,
      reasons,
    };
  }

  /**
   * Extract content signals from an element
   */
  private extractSignals(element: Element): IContentSignals {
    const text = element.textContent?.trim() || '';
    const html = element.innerHTML || '';
    const className = element.className.toLowerCase();
    const id = element.id.toLowerCase();

    return {
      textLength: text.length,
      paragraphCount: element.querySelectorAll('p').length,
      headingCount: element.querySelectorAll('h1, h2, h3, h4, h5, h6').length,
      linkCount: element.querySelectorAll('a').length,
      codeBlockCount: element.querySelectorAll('pre, code').length,
      listItemCount: element.querySelectorAll('li').length,
      blockquoteCount: element.querySelectorAll('blockquote').length,
      hasContentClass: this.hasTerms(className + ' ' + id, this.contentTerms),
      hasNavClass: this.hasTerms(className + ' ' + id, this.navigationTerms),
      hasStructuredData: this.hasStructuredData(element),
      textToHtmlRatio: html.length > 0 ? text.length / html.length : 0,
      linkDensity: text.length > 0 ? element.querySelectorAll('a').length / (text.length / 100) : 0,
    };
  }

  /**
   * Calculate content quality score
   */
  private calculateScore(signals: IContentSignals, options: IQualityOptions): number {
    let score = 0;

    // Base score from text length (0-500 points)
    score += Math.min(signals.textLength / 10, 500);

    // Paragraph bonus (25 points each)
    score += signals.paragraphCount * 25;

    // Heading bonus (30 points each)
    score += signals.headingCount * 30;

    // Content class bonus (100 points)
    if (signals.hasContentClass) {
      score += 100;
    }

    // Structured data bonus (50 points)
    if (signals.hasStructuredData) {
      score += 50;
    }

    // Code block bonus for technical content (20 points each)
    score += signals.codeBlockCount * 20;

    // List items bonus (5 points each)
    score += Math.min(signals.listItemCount * 5, 50);

    // Blockquote bonus (25 points each)
    score += signals.blockquoteCount * 25;

    // Penalties

    // Navigation class penalty (-200 points)
    if (signals.hasNavClass && !signals.hasContentClass) {
      score -= 200;
    }

    // High link density penalty
    const maxLinkDensity = options.maxLinkDensity || 0.5;
    if (signals.linkDensity > maxLinkDensity) {
      score -= (signals.linkDensity - maxLinkDensity) * 100;
    }

    // Too many links penalty
    if (signals.linkCount > signals.paragraphCount * 2 && signals.paragraphCount > 0) {
      score -= signals.linkCount * 10;
    }

    return Math.max(0, score);
  }

  /**
   * Determine if element contains main content
   */
  private determineIfContent(signals: IContentSignals, options: IQualityOptions): boolean {
    const isDynamic = options.isDynamicSite || false;
    const minLength = options.minTextLength || (isDynamic ? 30 : 50);
    const minRatio = options.minTextRatio || (isDynamic ? 0.02 : 0.05);

    // Basic requirements
    if (signals.textLength < minLength) {
      return false;
    }

    if (signals.textToHtmlRatio < minRatio) {
      return false;
    }

    // Navigation class check
    if (signals.hasNavClass && !signals.hasContentClass) {
      return signals.paragraphCount >= 3; // Allow if substantial paragraphs
    }

    // Content quality assessment
    const positiveSignals = [
      signals.headingCount > 0,
      signals.paragraphCount > 0,
      signals.codeBlockCount > 0,
      signals.hasContentClass,
      signals.hasStructuredData,
      signals.listItemCount > 2,
      signals.blockquoteCount > 0,
    ].filter(Boolean).length;

    // Determine content likelihood based on signals
    if (signals.paragraphCount === 0) {
      return positiveSignals >= 3 && signals.textLength > 500;
    } else if (signals.paragraphCount === 1) {
      return positiveSignals >= 2 && signals.textLength > 100;
    } else {
      return positiveSignals >= 2 || (positiveSignals >= 1 && signals.textLength > 200);
    }
  }

  /**
   * Generate reasons for content determination
   */
  private generateReasons(
    signals: IContentSignals,
    isContent: boolean,
    options: IQualityOptions
  ): string[] {
    const reasons: string[] = [];

    if (!isContent) {
      if (signals.textLength < (options.minTextLength || 50)) {
        reasons.push(`Text too short: ${signals.textLength} characters`);
      }

      if (signals.textToHtmlRatio < (options.minTextRatio || 0.05)) {
        reasons.push(`Poor text/HTML ratio: ${signals.textToHtmlRatio.toFixed(3)}`);
      }

      if (signals.hasNavClass && !signals.hasContentClass) {
        reasons.push('Navigation-related element');
      }

      if (signals.linkDensity > (options.maxLinkDensity || 0.5)) {
        reasons.push(`High link density: ${signals.linkDensity.toFixed(2)}`);
      }
    } else {
      if (signals.hasContentClass) {
        reasons.push('Content-related class detected');
      }

      if (signals.paragraphCount > 0) {
        reasons.push(`${signals.paragraphCount} paragraphs found`);
      }

      if (signals.headingCount > 0) {
        reasons.push(`${signals.headingCount} headings found`);
      }

      if (signals.hasStructuredData) {
        reasons.push('Structured data present');
      }
    }

    return reasons;
  }

  /**
   * Check if text contains any of the specified terms
   */
  private hasTerms(text: string, terms: string[]): boolean {
    return terms.some(term => text.includes(term));
  }

  /**
   * Check if element has structured data
   */
  private hasStructuredData(element: Element): boolean {
    return !!(
      element.getAttribute('itemtype') ||
      element.querySelector('[itemtype]') ||
      element.getAttribute('data-testid') ||
      element.querySelector('[data-testid]') ||
      element.getAttribute('data-permalink-context')
    );
  }

  /**
   * Get overall page quality score
   */
  getPageQualityScore(): number {
    let score = 0;
    const content = document.body.textContent || '';
    const wordCount = this.countWords(content);

    // Length score (0-30 points)
    if (wordCount > 500) score += 30;
    else if (wordCount > 200) score += 20;
    else if (wordCount > 100) score += 10;

    // Structure score (0-25 points)
    const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6').length;
    const paragraphs = document.querySelectorAll('p').length;
    if (headings > 0 && paragraphs > 3) score += 25;
    else if (paragraphs > 1) score += 15;

    // Media score (0-20 points)
    const images = document.querySelectorAll('img').length;
    if (images > 2) score += 20;
    else if (images > 0) score += 10;

    // Link quality (0-15 points)
    const links = document.querySelectorAll('a[href]').length;
    const linkRatio = links / (content.length / 1000);
    if (linkRatio < 5 && linkRatio > 0.5) score += 15;
    else if (linkRatio < 10) score += 10;

    // Readability indicators (0-10 points)
    if (document.querySelector('article, main, .content')) score += 10;
    else if (document.querySelector('.post, .entry')) score += 5;

    return Math.min(score, 100);
  }

  /**
   * Count words in text
   */
  private countWords(text: string): number {
    return text
      .trim()
      .split(/\s+/)
      .filter(word => word.length > 0).length;
  }
}
