// Generated by Copilot
// Test utilities for detecting test environment and providing test-safe logging

import { createLogger } from './logger';
const logger = createLogger('TestUtils');

/**
 * Utilities for test environment detection and logging
 */
export class TestUtils {
  /**
   * Detect if code is running in a test environment
   */
  static isTestEnvironment(): boolean {
    return (
      typeof jest !== 'undefined' ||
      process.env.NODE_ENV === 'test' ||
      typeof (global as any).jasmine !== 'undefined'
    );
  }

  /**
   * Test-safe logging with test case prefix
   * Only logs in test environment with structured format
   */
  static testLog(testId: string, message: string, data?: any): void {
    if (this.isTestEnvironment()) {
      const prefix = `Test ${testId} -`;
      if (data) {
        logger.info(prefix, message, this.formatData(data));
      } else {
        logger.info(prefix, message);
      }
    }
  }

  /**
   * Production logging - suppressed in test environment
   * Use for regular operational logging that should not clutter test output
   */
  static productionLog(message: string, data?: any): void {
    if (!this.isTestEnvironment()) {
      logger.info(message, data);
    }
  }

  /**
   * Debug logging - only in non-test environments
   * Use for verbose debugging information
   */
  static debugLog(message: string, data?: any): void {
    if (!this.isTestEnvironment()) {
      logger.debug(`[DEBUG] ${message}`, data);
    }
  }

  /**
   * Error logging - always visible (critical errors should be seen in tests)
   */
  static errorLog(message: string, error?: any): void {
    logger.error(message, error);
  }

  /**
   * Warning logging - always visible
   */
  static warnLog(message: string, data?: any): void {
    logger.warn(message, data);
  }

  /**
   * Format data for logging, truncating long strings
   */
  private static formatData(data: any): any {
    if (typeof data === 'string' && data.length > 200) {
      return data.substring(0, 200) + '... (truncated)';
    }
    if (typeof data === 'object' && data !== null) {
      // Clone and truncate string properties
      const formatted = { ...data };
      Object.keys(formatted).forEach(key => {
        if (typeof formatted[key] === 'string' && formatted[key].length > 200) {
          formatted[key] = formatted[key].substring(0, 200) + '... (truncated)';
        }
      });
      return formatted;
    }
    return data;
  }

  /**
   * Create a test-aware logger for a specific component
   */
  static createLogger(componentName: string) {
    return {
      production: (message: string, data?: any) =>
        this.productionLog(`[${componentName}] ${message}`, data),
      debug: (message: string, data?: any) => this.debugLog(`[${componentName}] ${message}`, data),
      test: (testId: string, message: string, data?: any) =>
        this.testLog(`${testId}.${componentName}`, message, data),
      error: (message: string, error?: any) =>
        this.errorLog(`[${componentName}] ${message}`, error),
      warn: (message: string, data?: any) => this.warnLog(`[${componentName}] ${message}`, data),
    };
  }
}
