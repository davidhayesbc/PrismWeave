// Generated by Copilot
// PrismWeave Logging Utility
// Enhanced logging system with environment awareness, component-specific controls, and structured logging

import { getGlobalScope } from './global-types';

type LogLevel = 0 | 1 | 2 | 3 | 4;
type Environment = 'development' | 'production' | 'test';

interface ILogStyles {
  error: string;
  warn: string;
  info: string;
  debug: string;
  trace: string;
}

interface IComponentLogConfig {
  enabled: boolean;
  level: LogLevel;
}

interface ILogContext {
  component: string;
  timestamp: string;
  environment: Environment;
  [key: string]: unknown;
}

interface IStructuredLogData {
  level: string;
  message: string;
  context: ILogContext;
  data?: unknown[];
  error?: {
    name: string;
    message: string;
    stack?: string;
  };
}

class Logger {
  public component: string;
  public enabled: boolean = false;
  public level: LogLevel = 0;
  private styles: ILogStyles;
  public environment: Environment;
  private componentConfig: IComponentLogConfig | null = null;

  static readonly LEVELS = {
    ERROR: 0 as const,
    WARN: 1 as const,
    INFO: 2 as const,
    DEBUG: 3 as const,
    TRACE: 4 as const,
  };

  static readonly LEVEL_NAMES = ['ERROR', 'WARN', 'INFO', 'DEBUG', 'TRACE'] as const;

  constructor(component: string = 'PrismWeave') {
    this.component = component;
    this.environment = this._detectEnvironment();

    // Get component-specific configuration
    this.componentConfig = this._getComponentConfig(component);

    // Set initial values based on environment and component config
    this._initializeConfiguration();

    this.styles = {
      error: 'color: #ff4444; font-weight: bold;',
      warn: 'color: #ffaa00; font-weight: bold;',
      info: 'color: #4444ff; font-weight: bold;',
      debug: 'color: #888888;',
      trace: 'color: #cccccc;',
    };
  }

  private _detectEnvironment(): Environment {
    // Check for test environment first
    if (this._isTestEnvironment()) {
      return 'test';
    }

    // Check for development environment
    if (this._isDevelopmentEnvironment()) {
      return 'development';
    }

    // Default to production
    return 'production';
  }

  private _isDevelopmentEnvironment(): boolean {
    // Check multiple indicators for development environment
    return (
      (typeof process !== 'undefined' && process.env.NODE_ENV === 'development') ||
      (typeof chrome !== 'undefined' && chrome.runtime?.getManifest()?.version?.includes('dev')) ||
      (typeof window !== 'undefined' && window.location?.hostname === 'localhost') ||
      (typeof globalThis !== 'undefined' && (globalThis as any).PRISMWEAVE_DEV_MODE === true)
    );
  }

  private _getComponentConfig(componentName: string): IComponentLogConfig | null {
    const globalScope = getGlobalScope();
    const config = globalScope.PRISMWEAVE_LOG_CONFIG as any;

    if (
      config?.components &&
      typeof config.components === 'object' &&
      config.components[componentName]
    ) {
      return config.components[componentName] as IComponentLogConfig;
    }

    return null;
  }

  private _initializeConfiguration(): void {
    const globalScope = getGlobalScope();
    const globalConfig = globalScope.PRISMWEAVE_LOG_CONFIG as any;

    // Environment-based defaults
    switch (this.environment) {
      case 'test':
        this.enabled = false; // Minimize test noise
        this.level = Logger.LEVELS.ERROR;
        break;
      case 'development':
        this.enabled = true;
        this.level = Logger.LEVELS.DEBUG;
        break;
      case 'production':
        this.enabled = true;
        this.level = Logger.LEVELS.INFO; // Less verbose in production
        break;
    }

    // Apply global configuration overrides
    if (globalConfig && typeof globalConfig.enabled === 'boolean') {
      this.enabled = globalConfig.enabled;
    }
    if (
      globalConfig &&
      typeof globalConfig.level === 'number' &&
      globalConfig.level >= 0 &&
      globalConfig.level <= 4
    ) {
      this.level = globalConfig.level as LogLevel;
    }

    // Apply component-specific configuration
    if (this.componentConfig) {
      if (typeof this.componentConfig.enabled === 'boolean') {
        this.enabled = this.componentConfig.enabled;
      }
      if (
        typeof this.componentConfig.level === 'number' &&
        this.componentConfig.level >= 0 &&
        this.componentConfig.level <= 4
      ) {
        this.level = this.componentConfig.level as LogLevel;
      }
    }

    // Apply global overrides from runtime
    if (typeof globalScope.PRISMWEAVE_LOG_ENABLED === 'boolean') {
      this.enabled = globalScope.PRISMWEAVE_LOG_ENABLED;
    }
    if (
      typeof globalScope.PRISMWEAVE_LOG_LEVEL === 'number' &&
      globalScope.PRISMWEAVE_LOG_LEVEL >= 0 &&
      globalScope.PRISMWEAVE_LOG_LEVEL <= 4
    ) {
      this.level = globalScope.PRISMWEAVE_LOG_LEVEL as LogLevel;
    }
  }

  private _shouldLog(level: LogLevel): boolean {
    return this.enabled && level <= this.level;
  }

  private _isTestEnvironment(): boolean {
    return (
      typeof process !== 'undefined' &&
      (process.env.NODE_ENV === 'test' || process.env.JEST_WORKER_ID !== undefined)
    );
  }

  private _formatMessage(level: LogLevel, message: unknown, ...args: unknown[]): unknown[] {
    const levelName = Logger.LEVEL_NAMES[level];
    const timestamp = new Date().toISOString().substr(11, 12);
    const prefix = `[${timestamp}] [${this.component}] [${this.environment}] [${levelName}]`;

    if (typeof message === 'string') {
      return [
        `%c${prefix} ${message}`,
        this.styles[levelName.toLowerCase() as keyof ILogStyles],
        ...args,
      ];
    } else {
      return [
        `%c${prefix}`,
        this.styles[levelName.toLowerCase() as keyof ILogStyles],
        message,
        ...args,
      ];
    }
  }

  private _createStructuredLogData(
    level: LogLevel,
    message: unknown,
    ...args: unknown[]
  ): IStructuredLogData {
    const context: ILogContext = {
      component: this.component,
      timestamp: new Date().toISOString(),
      environment: this.environment,
    };

    const levelName = Logger.LEVEL_NAMES[level];
    let logMessage = '';
    let logData: unknown[] | undefined;
    let errorInfo: IStructuredLogData['error'];

    if (typeof message === 'string') {
      logMessage = message;
      logData = args.length > 0 ? args : undefined;
    } else if (message instanceof Error) {
      logMessage = message.message;
      errorInfo = {
        name: message.name,
        message: message.message,
        ...(message.stack && { stack: message.stack }),
      };
      logData = args.length > 0 ? args : undefined;
    } else {
      logMessage = 'Object logged';
      logData = [message, ...args];
    }

    const structuredData: IStructuredLogData = {
      level: levelName,
      message: logMessage,
      context,
    };

    if (logData) {
      structuredData.data = logData;
    }

    if (errorInfo) {
      structuredData.error = errorInfo;
    }

    return structuredData;
  }

  error(message: unknown, ...args: unknown[]): void {
    if (this._shouldLog(Logger.LEVELS.ERROR)) {
      console.error(...this._formatMessage(Logger.LEVELS.ERROR, message, ...args));
      this._logStructured(Logger.LEVELS.ERROR, message, ...args);
    }
  }

  warn(message: unknown, ...args: unknown[]): void {
    if (this._shouldLog(Logger.LEVELS.WARN)) {
      console.warn(...this._formatMessage(Logger.LEVELS.WARN, message, ...args));
      this._logStructured(Logger.LEVELS.WARN, message, ...args);
    }
  }

  info(message: unknown, ...args: unknown[]): void {
    if (this._shouldLog(Logger.LEVELS.INFO)) {
      console.info(...this._formatMessage(Logger.LEVELS.INFO, message, ...args));
      this._logStructured(Logger.LEVELS.INFO, message, ...args);
    }
  }

  debug(message: unknown, ...args: unknown[]): void {
    if (this._shouldLog(Logger.LEVELS.DEBUG)) {
      console.log(...this._formatMessage(Logger.LEVELS.DEBUG, message, ...args));
      this._logStructured(Logger.LEVELS.DEBUG, message, ...args);
    }
  }

  trace(message: unknown, ...args: unknown[]): void {
    if (this._shouldLog(Logger.LEVELS.TRACE)) {
      console.log(...this._formatMessage(Logger.LEVELS.TRACE, message, ...args));
      this._logStructured(Logger.LEVELS.TRACE, message, ...args);
    }
  }

  // Structured logging methods
  private _logStructured(level: LogLevel, message: unknown, ...args: unknown[]): void {
    if (this.environment === 'production' && this._shouldCollectStructuredLogs()) {
      const structuredData = this._createStructuredLogData(level, message, ...args);
      this._storeStructuredLog(structuredData);
    }
  }

  private _shouldCollectStructuredLogs(): boolean {
    const globalScope = getGlobalScope();
    const config = globalScope.PRISMWEAVE_LOG_CONFIG as any;
    return config?.structuredLogging?.enabled === true;
  }

  private _storeStructuredLog(data: IStructuredLogData): void {
    try {
      const globalScope = getGlobalScope() as any;
      if (!globalScope.PRISMWEAVE_STRUCTURED_LOGS) {
        globalScope.PRISMWEAVE_STRUCTURED_LOGS = [];
      }

      globalScope.PRISMWEAVE_STRUCTURED_LOGS.push(data);

      // Keep only last 100 structured logs to prevent memory issues
      if (globalScope.PRISMWEAVE_STRUCTURED_LOGS.length > 100) {
        globalScope.PRISMWEAVE_STRUCTURED_LOGS.shift();
      }
    } catch (error) {
      // Silently fail structured logging to prevent recursion
    }
  }

  // Enhanced context logging
  withContext(contextData: Record<string, unknown>): Logger {
    const contextLogger = new Logger(this.component);
    contextLogger.enabled = this.enabled;
    contextLogger.level = this.level;
    contextLogger.environment = this.environment;
    contextLogger.componentConfig = this.componentConfig;

    // Store context data for this logger instance
    (contextLogger as any)._contextData = contextData;

    return contextLogger;
  }

  // Performance timing with structured logging
  timeWithContext(label: string, contextData?: Record<string, unknown>): void {
    if (this.enabled && this._shouldLog(Logger.LEVELS.DEBUG)) {
      const timerLabel = `[${this.component}] ${label}`;
      console.time(timerLabel);

      if (contextData) {
        this.debug(`⏱️ Timer started: ${label}`, contextData);
      } else {
        this.debug(`⏱️ Timer started: ${label}`);
      }
    }
  }

  timeEndWithContext(label: string, contextData?: Record<string, unknown>): void {
    if (this.enabled && this._shouldLog(Logger.LEVELS.DEBUG)) {
      const timerLabel = `[${this.component}] ${label}`;
      console.timeEnd(timerLabel);

      if (contextData) {
        this.debug(`⏱️ Timer ended: ${label}`, contextData);
      } else {
        this.debug(`⏱️ Timer ended: ${label}`);
      }
    }
  }
  // Utility methods
  group(label?: string, collapsed: boolean = false): void {
    if (this.enabled) {
      const groupLabel = label ? `[${this.component}] ${label}` : `[${this.component}]`;
      if (collapsed) {
        console.groupCollapsed(groupLabel);
      } else {
        console.group(groupLabel);
      }
    }
  }

  groupEnd(): void {
    if (this.enabled) {
      console.groupEnd();
    }
  }

  table(data: unknown, columns?: string[]): void {
    if (this.enabled && this._shouldLog(Logger.LEVELS.DEBUG)) {
      console.table(data, columns);
    }
  }

  time(label: string): void {
    if (this.enabled && this._shouldLog(Logger.LEVELS.DEBUG)) {
      console.time(`[${this.component}] ${label}`);
    }
  }

  timeEnd(label: string): void {
    if (this.enabled && this._shouldLog(Logger.LEVELS.DEBUG)) {
      console.timeEnd(`[${this.component}] ${label}`);
    }
  }

  // Configuration methods
  setLevel(level: LogLevel): void {
    this.level = level;
    this.info('Log level set to:', Logger.LEVEL_NAMES[level]);
  }

  setComponentLevel(component: string, level: LogLevel): void {
    const globalScope = getGlobalScope() as any;
    if (!globalScope.PRISMWEAVE_LOG_CONFIG) {
      globalScope.PRISMWEAVE_LOG_CONFIG = {
        enabled: true,
        level: Logger.LEVELS.INFO,
        components: {},
      };
    }
    if (!globalScope.PRISMWEAVE_LOG_CONFIG.components) {
      globalScope.PRISMWEAVE_LOG_CONFIG.components = {};
    }

    globalScope.PRISMWEAVE_LOG_CONFIG.components[component] = {
      enabled: true,
      level: level,
    };

    // Update current logger if it matches the component
    if (this.component === component) {
      this.level = level;
    }

    this.info(`Component '${component}' log level set to:`, Logger.LEVEL_NAMES[level]);
  }

  enable(): void {
    this.enabled = true;
    console.log(`%c[${this.component}] [${this.environment}] Logging enabled`, this.styles.info);
  }

  disable(): void {
    console.log(`%c[${this.component}] [${this.environment}] Logging disabled`, this.styles.warn);
    this.enabled = false;
  }

  // Environment and configuration reporting
  getEnvironmentInfo(): Record<string, unknown> {
    return {
      component: this.component,
      environment: this.environment,
      enabled: this.enabled,
      level: this.level,
      levelName: Logger.LEVEL_NAMES[this.level],
      componentConfig: this.componentConfig,
      timestamp: new Date().toISOString(),
    };
  }

  // Structured log retrieval
  static getStructuredLogs(): IStructuredLogData[] {
    const globalScope = getGlobalScope() as any;
    return globalScope.PRISMWEAVE_STRUCTURED_LOGS || [];
  }

  static clearStructuredLogs(): void {
    const globalScope = getGlobalScope() as any;
    globalScope.PRISMWEAVE_STRUCTURED_LOGS = [];
  }
  // Global configuration methods
  static setGlobalLevel(level: LogLevel): void {
    const globalScope = getGlobalScope() as any;
    globalScope.PRISMWEAVE_LOG_LEVEL = level;
    console.log(
      `%cPrismWeave Global Log Level set to: ${Logger.LEVEL_NAMES[level]}`,
      'color: #4444ff; font-weight: bold;'
    );
  }

  static setGlobalEnabled(enabled: boolean): void {
    const globalScope = getGlobalScope() as any;
    globalScope.PRISMWEAVE_LOG_ENABLED = enabled;
    console.log(
      `%cPrismWeave Global Logging ${enabled ? 'enabled' : 'disabled'}`,
      enabled ? 'color: #44ff44; font-weight: bold;' : 'color: #ff4444; font-weight: bold;'
    );
  }

  static setEnvironmentLogging(environment: Environment, enabled: boolean, level?: LogLevel): void {
    const globalScope = getGlobalScope() as any;
    if (!globalScope.PRISMWEAVE_ENV_LOGGING) {
      globalScope.PRISMWEAVE_ENV_LOGGING = {};
    }

    globalScope.PRISMWEAVE_ENV_LOGGING[environment] = {
      enabled,
      level: level || Logger.LEVELS.INFO,
    };

    console.log(
      `%cEnvironment '${environment}' logging configured:`,
      'color: #8888ff; font-weight: bold;',
      {
        enabled,
        level: level ? Logger.LEVEL_NAMES[level] : 'INFO',
      }
    );
  }

  static getGlobalConfiguration(): Record<string, unknown> {
    const globalScope = getGlobalScope() as any;
    return {
      globalEnabled: globalScope.PRISMWEAVE_LOG_ENABLED,
      globalLevel: globalScope.PRISMWEAVE_LOG_LEVEL
        ? Logger.LEVEL_NAMES[globalScope.PRISMWEAVE_LOG_LEVEL]
        : undefined,
      config: globalScope.PRISMWEAVE_LOG_CONFIG,
      environmentLogging: globalScope.PRISMWEAVE_ENV_LOGGING,
      structuredLogsCount: globalScope.PRISMWEAVE_STRUCTURED_LOGS?.length || 0,
    };
  }
}

// Global logger factory with enhanced configuration
function createLogger(component: string): Logger {
  const logger = new Logger(component);

  // Check for environment-specific overrides
  const globalScope = getGlobalScope() as any;
  const envLogging = globalScope.PRISMWEAVE_ENV_LOGGING?.[logger.environment];
  if (envLogging) {
    if (typeof envLogging.enabled === 'boolean') {
      logger.enabled = envLogging.enabled;
    }
    if (typeof envLogging.level === 'number' && envLogging.level >= 0 && envLogging.level <= 4) {
      logger.level = envLogging.level as LogLevel;
    }
  }

  // Apply global overrides (these take precedence)
  if (globalScope.PRISMWEAVE_LOG_ENABLED !== undefined) {
    logger.enabled = globalScope.PRISMWEAVE_LOG_ENABLED;
  }
  if (globalScope.PRISMWEAVE_LOG_LEVEL !== undefined) {
    logger.level = globalScope.PRISMWEAVE_LOG_LEVEL;
  }

  return logger;
}

// Enhanced debug utilities for console usage
function enableDebugMode(): void {
  Logger.setGlobalEnabled(true);
  Logger.setGlobalLevel(Logger.LEVELS.DEBUG);
  console.log(
    '%cPrismWeave Debug Mode Enabled',
    'color: #00ff00; font-weight: bold; font-size: 14px;'
  );
  console.log('Available debug commands:', {
    'Logger.getGlobalConfiguration()': 'Show current logging configuration',
    'Logger.setGlobalLevel(level)': 'Set global log level (0-4)',
    'Logger.setGlobalEnabled(boolean)': 'Enable/disable all logging',
    'Logger.getStructuredLogs()': 'Get structured log data',
    'Logger.clearStructuredLogs()': 'Clear structured log data',
  });
}

function disableDebugMode(): void {
  Logger.setGlobalEnabled(false);
  console.log('%cPrismWeave Debug Mode Disabled', 'color: #ff0000; font-weight: bold;');
}

// Export for use in other modules
export { createLogger, disableDebugMode, enableDebugMode, Logger };
export type {
  Environment,
  IComponentLogConfig,
  ILogContext,
  ILogStyles,
  IStructuredLogData,
  LogLevel,
};

// Export to global scope
const globalScope = getGlobalScope();
globalScope.PrismWeaveLogger = {
  createLogger,
  Logger,
  enableDebugMode,
  disableDebugMode,
};
