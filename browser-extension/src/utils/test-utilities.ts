// Generated by Copilot
// Test utilities for markdown conversion functions
// This file provides testable versions of service worker functions

// Decode HTML entities
export function decodeHtmlEntities(str: string): string {
  if (!str) return str;

  return str
    .replace(/&lt;/g, '<')
    .replace(/&gt;/g, '>')
    .replace(/&amp;/g, '&')
    .replace(/&quot;/g, '"')
    .replace(/&#39;/g, "'")
    .replace(/&nbsp;/g, ' ')
    .replace(/&#x27;/g, "'")
    .replace(/&#x2F;/g, '/');
}

// Extract language from code element class
export function extractLanguageFromClass(className: string): string {
  if (!className) return '';

  // Check for common language class patterns
  const patterns = [
    /(?:language|lang)-([a-zA-Z0-9_+-]+)/i,
    /highlight-([a-zA-Z0-9_+-]+)/i,
    /code-([a-zA-Z0-9_+-]+)/i,
    /([a-zA-Z0-9_+-]+)-code/i,
  ];

  for (const pattern of patterns) {
    const match = className.match(pattern);
    if (match) {
      return normalizeLanguage(match[1]);
    }
  }

  return '';
}

// Normalize language names
export function normalizeLanguage(lang: string): string {
  if (!lang) return '';

  const normalized = lang.toLowerCase();

  // Language mapping for common variations
  const languageMap: { [key: string]: string } = {
    js: 'javascript',
    ts: 'typescript',
    py: 'python',
    rb: 'ruby',
    sh: 'bash',
    shell: 'bash',
    zsh: 'bash',
    fish: 'bash',
    powershell: 'powershell',
    ps1: 'powershell',
    cmd: 'batch',
    bat: 'batch',
    dockerfile: 'docker',
    yml: 'yaml',
    xml: 'xml',
    html: 'html',
    css: 'css',
    scss: 'scss',
    sass: 'sass',
    less: 'less',
    json: 'json',
    yaml: 'yaml',
    toml: 'toml',
    ini: 'ini',
    cfg: 'ini',
    conf: 'ini',
    sql: 'sql',
    mysql: 'sql',
    postgresql: 'sql',
    sqlite: 'sql',
    markdown: 'markdown',
    md: 'markdown',
    tex: 'latex',
    latex: 'latex',
    r: 'r',
    matlab: 'matlab',
    octave: 'matlab',
    scala: 'scala',
    kotlin: 'kotlin',
    swift: 'swift',
    go: 'go',
    rust: 'rust',
    dart: 'dart',
    lua: 'lua',
    perl: 'perl',
    php: 'php',
    vim: 'vim',
    asm: 'assembly',
    assembly: 'assembly',
    c: 'c',
    cpp: 'cpp',
    'c++': 'cpp',
    cxx: 'cpp',
    cc: 'cpp',
    java: 'java',
    cs: 'csharp',
    csharp: 'csharp',
    vb: 'vb',
    vbnet: 'vb',
    fsharp: 'fsharp',
    fs: 'fsharp',
    clojure: 'clojure',
    lisp: 'lisp',
    scheme: 'scheme',
    haskell: 'haskell',
    elm: 'elm',
    erlang: 'erlang',
    elixir: 'elixir',
    prolog: 'prolog',
    fortran: 'fortran',
    cobol: 'cobol',
    pascal: 'pascal',
    ada: 'ada',
    unison: 'unison',
  };

  return languageMap[normalized] || normalized;
}

// Simplified markdown conversion for testing (mimics service worker logic)
export function simpleMarkdownConversion(
  htmlContent: string,
  title: string,
  url: string
): { content: string; title: string; url: string } {
  let markdown = '';

  // Check if DOMParser is available and log it
  console.log('DOMParser available:', typeof DOMParser !== 'undefined');
  // Create a DOM parser for testing
  if (typeof DOMParser !== 'undefined') {
    const parser = new DOMParser();
    const doc = parser.parseFromString(htmlContent, 'text/html');

    // Process code blocks with improved extraction
    const codeBlocks = doc.querySelectorAll('pre code, pre, code');
    console.log('Found code blocks:', codeBlocks.length);

    codeBlocks.forEach((block, index) => {
      console.log(
        `Block ${index}: tagName=${block.tagName}, parentTag=${block.parentElement?.tagName}`
      );
      const isPreBlock = block.tagName === 'PRE' || block.parentElement?.tagName === 'PRE';
      console.log(`Block ${index}: isPreBlock=${isPreBlock}`);

      if (isPreBlock) {
        // Handle code blocks
        const codeElement = block.tagName === 'CODE' ? block : block.querySelector('code');
        const actualCodeElement = codeElement || block;

        // Extract language
        const className = actualCodeElement.className || '';
        const language = extractLanguageFromClass(className); // Get content and process it
        let content = actualCodeElement.textContent || '';
        content = decodeHtmlEntities(content);
        // Line numbers should be handled by HTML structure rules

        markdown += '\n```' + language + '\n' + content + '\n```\n\n';
      } else {
        // Handle inline code
        let content = block.textContent || '';
        content = decodeHtmlEntities(content);
        markdown += '`' + content.replace(/`/g, '\\`') + '`';
      }
    });

    // Add basic text content if no code blocks found
    if (!codeBlocks.length) {
      markdown = doc.body?.textContent || htmlContent;
    }
  } else {
    // Fallback for environments without DOMParser
    // Simple regex-based extraction for testing
    const codeBlockRegex =
      /<pre[^>]*>[\s\S]*?<code[^>]*(?:class="([^"]*)")?[^>]*>([\s\S]*?)<\/code>[\s\S]*?<\/pre>/gi;

    let match;
    while ((match = codeBlockRegex.exec(htmlContent)) !== null) {
      const className = match[1] || '';
      let content = match[2]; // Extract language and process content
      const language = extractLanguageFromClass(className);
      content = decodeHtmlEntities(content);
      // Line numbers should be handled by HTML structure rules

      markdown += '\n```' + language + '\n' + content + '\n```\n\n';
    }

    // Fallback text extraction
    if (!markdown.trim()) {
      markdown = htmlContent
        .replace(/<[^>]+>/g, '')
        .replace(/\s+/g, ' ')
        .trim();
    }
  }

  return {
    content: markdown.trim(),
    title: title,
    url: url,
  };
}
