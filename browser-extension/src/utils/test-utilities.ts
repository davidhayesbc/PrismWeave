// Generated by Copilot
// PrismWeave Test Utilities - Simplified to only used functions
// Extracted only the functions actually imported by tests

import { createLogger } from './logger.js';

const logger = createLogger('TestUtilities');

/**
 * Create a test logger with simplified configuration
 * Used by: src/__tests__/test-helpers.ts
 */
export function createTestLogger(name: string = 'Test') {
  return createLogger(name);
}

/**
 * Simple markdown conversion for testing
 * Used by: src/__tests__/utils/line-number-removal.test.ts
 */
export function simpleMarkdownConversion(
  html: string,
  title: string,
  url: string
): { content: string; title: string; url: string } {
  let markdown = html;

  // Headers
  markdown = markdown.replace(/<h([1-6])[^>]*>(.*?)<\/h[1-6]>/gi, (match, level, content) => {
    const headerLevel = '#'.repeat(parseInt(level));
    return `\n${headerLevel} ${stripHtml(content)}\n`;
  });

  // Code blocks - with line number removal and language detection
  markdown = markdown.replace(/<pre[^>]*><code[^>]*>(.*?)<\/code><\/pre>/gis, (match, code) => {
    // Remove line numbers (digits followed by whitespace at start of lines)
    const cleanCode = code.replace(/^\s*\d+\s+/gm, '');

    // Detect language based on content
    let language = '';
    const codeContent = cleanCode.toLowerCase();

    // Bash detection
    if (
      codeContent.includes('echo') ||
      codeContent.includes('ls ') ||
      codeContent.includes('exit') ||
      codeContent.includes('#!/bin/bash')
    ) {
      language = 'bash';
    }
    // Docker detection
    else if (
      codeContent.includes('from ') ||
      codeContent.includes('workdir') ||
      codeContent.includes('copy ') ||
      codeContent.includes('run ') ||
      codeContent.includes('expose')
    ) {
      language = 'docker';
    }
    // JavaScript detection
    else if (
      codeContent.includes('function') ||
      codeContent.includes('const ') ||
      codeContent.includes('let ') ||
      codeContent.includes('console.log')
    ) {
      language = 'javascript';
    }
    // Python detection
    else if (
      codeContent.includes('def ') ||
      codeContent.includes('import ') ||
      codeContent.includes('print(')
    ) {
      language = 'python';
    }

    return `\n\`\`\`${language}\n${cleanCode.trim()}\n\`\`\`\n`;
  });

  // Inline code
  markdown = markdown.replace(/<code[^>]*>(.*?)<\/code>/gi, '`$1`');

  // Paragraphs
  markdown = markdown.replace(/<p[^>]*>(.*?)<\/p>/gi, '\n$1\n');

  // Strong/Bold
  markdown = markdown.replace(/<(strong|b)[^>]*>(.*?)<\/(strong|b)>/gi, '**$2**');

  // Emphasis/Italic
  markdown = markdown.replace(/<(em|i)[^>]*>(.*?)<\/(em|i)>/gi, '*$2*');

  // Links
  markdown = markdown.replace(/<a[^>]*href=["']([^"']*)["'][^>]*>(.*?)<\/a>/gi, '[$2]($1)');

  // Line breaks
  markdown = markdown.replace(/<br[^>]*>/gi, '\n');

  // Strip remaining HTML
  markdown = stripHtml(markdown);

  // Clean up whitespace
  markdown = markdown.replace(/\n\s*\n\s*\n/g, '\n\n');
  markdown = markdown.trim();

  return {
    content: markdown,
    title,
    url,
  };
}

function stripHtml(html: string): string {
  return html.replace(/<[^>]*>/g, '').trim();
}

// Default export for CommonJS compatibility
export default {
  createTestLogger,
  simpleMarkdownConversion,
};
