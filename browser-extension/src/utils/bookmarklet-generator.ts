// Generated by Copilot
// Bookmarklet generator utility for PrismWeave browser extension

export interface IBookmarkletConfig {
  githubToken: string;
  githubRepo: string;
  defaultFolder?: string;
  customFolder?: string;
  fileNamingPattern?: string;
  commitMessageTemplate?: string;
  captureImages?: boolean;
  removeAds?: boolean;
  removeNavigation?: boolean;
}

export interface IBookmarkletGenerationOptions {
  minify?: boolean;
  includeDebugInfo?: boolean;
  customDomain?: string;
  version?: string;
}

export class BookmarkletGenerator {
  private static readonly BOOKMARKLET_VERSION = '1.0.0';
  private static readonly MAX_BOOKMARKLET_LENGTH = 15000; // Modern browsers support longer URLs

  /**
   * Encode configuration as URL parameters for short bookmarklet
   */
  private static encodeConfigAsParams(config: IBookmarkletConfig): string {
    const params = new URLSearchParams();

    // Encode essential config as URL parameters
    if (config.githubToken) params.set('token', config.githubToken);
    if (config.githubRepo) params.set('repo', config.githubRepo);
    if (config.defaultFolder) params.set('folder', config.defaultFolder);
    if (config.commitMessageTemplate) params.set('msgTpl', config.commitMessageTemplate);

    // Boolean flags as single characters to save space
    if (config.captureImages === false) params.set('noImg', '1');
    if (config.removeAds === true) params.set('noAds', '1');
    if (config.removeNavigation === true) params.set('noNav', '1');

    return params.toString();
  }

  /**
   * Generate a short loader-style bookmarklet that loads the main script
   */
  static generateBookmarklet(
    config: IBookmarkletConfig,
    options: IBookmarkletGenerationOptions = {}
  ): string {
    const baseUrl = options.customDomain || 'https://davidhayesbc.github.io/PrismWeave';
    const version = options.version || this.BOOKMARKLET_VERSION;

    // Create a short loader that loads the main script with encoded config
    const configParams = this.encodeConfigAsParams(config);
    const loaderScript = `(function(){
  if(window.prismweaveBookmarklet){
    window.prismweaveBookmarklet.show();
    return;
  }
  var s=document.createElement('script');
  s.src='${baseUrl}/bookmarklet.js?v=${version}&${configParams}';
  s.onload=function(){
    if(window.PrismWeaveBookmarklet){
      window.prismweaveBookmarklet=new window.PrismWeaveBookmarklet();
      window.prismweaveBookmarklet.init();
    }
  };
  document.head.appendChild(s);
})();`;

    const processedScript =
      options.minify !== false ? this.minifyScript(loaderScript) : loaderScript;
    const bookmarklet = `javascript:${processedScript}`;

    // Validate length for reasonable bookmarklet size
    if (bookmarklet.length > 15000) {
      // Use original test limit
      throw new Error(
        `Generated bookmarklet is too long (${bookmarklet.length} chars). Maximum is 15000 chars.`
      );
    }

    return bookmarklet;
  }

  /**
   * Minify JavaScript code for bookmarklet
   */
  private static minifyScript(script: string): string {
    // Simple and safe minification for generated bookmarklet code
    let result = script;

    // Remove multi-line comments (/* ... */)
    result = result.replace(/\/\*[\s\S]*?\*\//g, '');

    // Don't remove single-line comments since they might break URLs with //
    // Our generated code doesn't have // comments anyway

    // Collapse multiple whitespace to single spaces
    result = result.replace(/\s+/g, ' ');

    // Remove spaces around operators and punctuation (be conservative)
    result = result.replace(/\s*{\s*/g, '{');
    result = result.replace(/\s*}\s*/g, '}');
    result = result.replace(/\s*;\s*/g, ';');
    result = result.replace(/\s*,\s*/g, ',');
    result = result.replace(/\s*\(\s*/g, '(');
    result = result.replace(/\s*\)\s*/g, ')');
    result = result.replace(/;\s*}/g, '}'); // Remove semicolons before closing braces

    return result.trim();
  }

  /**
   * Generate a user-friendly bookmarklet name
   */
  static generateBookmarkletName(config: IBookmarkletConfig): string {
    const repoName = config.githubRepo.split('/')[1] || 'repository';
    return `PrismWeave â†’ ${repoName}`;
  }

  /**
   * Generate installation instructions for the bookmarklet
   */
  static generateInstallationInstructions(bookmarkletCode: string, name: string): string {
    return `
## Install PrismWeave Bookmarklet

### Step 1: Copy the Bookmarklet
Click the button below to copy the bookmarklet code to your clipboard.

### Step 2: Create a New Bookmark
1. Right-click on your browser's bookmark bar
2. Select "Add page..." or "Add bookmark..."
3. Set the name to: **${name}**
4. Set the URL to the copied bookmarklet code
5. Save the bookmark

### Step 3: Use the Bookmarklet
1. Navigate to any webpage you want to capture
2. Click the "${name}" bookmark
3. The PrismWeave capture dialog will appear
4. Click "Capture Page" to save the content to your GitHub repository

### Troubleshooting
- Make sure your GitHub token has write access to the repository
- The bookmarklet works on most websites, but some may block it due to security policies
- If the bookmarklet doesn't appear, try refreshing the page and clicking again
`;
  }

  /**
   * Validate bookmarklet configuration
   */
  static validateConfig(config: IBookmarkletConfig): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];

    if (!config.githubToken || config.githubToken.trim().length === 0) {
      errors.push('GitHub token is required');
    }

    if (!config.githubRepo || config.githubRepo.trim().length === 0) {
      errors.push('GitHub repository is required');
    } else if (!/^[\w\-\.]+\/[\w\-\.]+$/.test(config.githubRepo)) {
      errors.push('GitHub repository must be in format: owner/repo');
    }

    if (config.githubToken && config.githubToken.length < 20) {
      errors.push('GitHub token appears to be invalid (too short)');
    }

    return {
      isValid: errors.length === 0,
      errors,
    };
  }
}
