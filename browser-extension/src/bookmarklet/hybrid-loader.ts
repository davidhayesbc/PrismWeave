// Hybrid Loader - Lightweight Bookmarklet (~800 characters)
// Generated by Copilot for PrismWeave project
// This creates the ultra-lightweight loader that fetches the full functionality

interface IHybridLoaderConfig {
  scriptUrl: string;
  fallbackUrl?: string;
  timeout: number;
  version: string;
}

class HybridLoader {
  private static readonly DEFAULT_CONFIG: IHybridLoaderConfig = {
    scriptUrl: 'https://cdn.prismweave.dev/bookmarklet/enhanced-v2.js',
    fallbackUrl:
      'https://raw.githubusercontent.com/davidhayesbc/PrismWeave/main/browser-extension/dist/bookmarklet/enhanced-runtime.js',
    timeout: 10000,
    version: '2.0.0',
  };

  private static _loading = false;
  private static _loaded = false;

  static async load(config: Partial<IHybridLoaderConfig> = {}): Promise<void> {
    // Prevent multiple loads
    if (this._loading || this._loaded) {
      console.log('PrismWeave: Already loading or loaded');
      return;
    }

    // Check if already loaded from previous execution
    if ((window as any).PrismWeaveEnhanced) {
      this._loaded = true;
      (window as any).PrismWeaveEnhanced.execute();
      return;
    }

    this._loading = true;
    const finalConfig = { ...this.DEFAULT_CONFIG, ...config };

    try {
      await this.loadScript(finalConfig.scriptUrl, finalConfig.timeout);
      this._loaded = true;
      this._loading = false;

      // Execute the loaded script
      if ((window as any).PrismWeaveEnhanced) {
        (window as any).PrismWeaveEnhanced.execute();
      } else {
        throw new Error('PrismWeave script loaded but not initialized');
      }
    } catch (error) {
      console.warn('Primary script load failed, trying fallback:', error);

      try {
        if (finalConfig.fallbackUrl) {
          await this.loadScript(finalConfig.fallbackUrl, finalConfig.timeout);
          this._loaded = true;

          if ((window as any).PrismWeaveEnhanced) {
            (window as any).PrismWeaveEnhanced.execute();
          } else {
            throw new Error('Fallback script loaded but not initialized');
          }
        } else {
          throw error;
        }
      } catch (fallbackError) {
        this.showLoadError(fallbackError as Error);
      } finally {
        this._loading = false;
      }
    }
  }

  private static loadScript(url: string, timeout: number): Promise<void> {
    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      const timeoutId = setTimeout(() => {
        script.remove();
        reject(new Error(`Script load timeout after ${timeout}ms`));
      }, timeout);

      script.onload = () => {
        clearTimeout(timeoutId);
        resolve();
      };

      script.onerror = () => {
        clearTimeout(timeoutId);
        script.remove();
        reject(new Error(`Failed to load script from ${url}`));
      };

      script.src = url;
      script.async = true;
      document.head.appendChild(script);
    });
  }

  private static showLoadError(error: Error): void {
    const message = `PrismWeave failed to load:\n${error.message}\n\nTry refreshing the page or check your internet connection.`;

    // Try to show a better error UI if possible
    if (document.body) {
      const errorDiv = document.createElement('div');
      errorDiv.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #fee;
        border: 2px solid #fcc;
        border-radius: 8px;
        padding: 16px;
        max-width: 400px;
        z-index: 999999;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
        font-size: 14px;
        color: #c33;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      `;
      errorDiv.innerHTML = `
        <strong>PrismWeave Load Error</strong><br>
        ${error.message}<br>
        <button onclick="this.parentElement.remove()" style="margin-top: 8px; padding: 4px 8px; border: none; background: #c33; color: white; border-radius: 4px; cursor: pointer;">Close</button>
      `;
      document.body.appendChild(errorDiv);

      // Auto-remove after 10 seconds
      setTimeout(() => errorDiv.remove(), 10000);
    } else {
      alert(message);
    }
  }

  // Quick execution mode check
  static isQuickMode(): boolean {
    return (
      (window as any).event?.shiftKey ||
      Date.now() - ((window as any).lastPrismWeaveClick || 0) < 500
    );
  }
}

// Export for the bookmarklet
export { HybridLoader };

// Global execution function for the ultra-light bookmarklet
export function executeHybridLoader(): void {
  try {
    HybridLoader.load().catch(error => {
      console.error('PrismWeave hybrid loader failed:', error);
    });
    (window as any).lastPrismWeaveClick = Date.now();
  } catch (error) {
    console.error('PrismWeave hybrid loader initialization failed:', error);
    alert('PrismWeave failed to start. Please try again or check your internet connection.');
  }
}

// Make available globally
(window as any).executeHybridLoader = executeHybridLoader;
(window as any).PrismWeaveLoader = HybridLoader;
