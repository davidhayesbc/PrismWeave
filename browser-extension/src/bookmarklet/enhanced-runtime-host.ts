// Enhanced Runtime Host Script
// Generated by Copilot for PrismWeave project
// This is the full-featured script that gets loaded by the hybrid loader

import { EnhancedBookmarkletRuntime } from './enhanced-runtime-compatible';

interface IPrismWeaveEnhanced {
  execute(): Promise<void>;
  quickExecute(): Promise<void>;
  getVersion(): string;
  getStatus(): {
    loaded: boolean;
    configured: boolean;
    version: string;
    lastCapture?: string;
  };
  configure(config: any): Promise<void>;
  reset(): void;
}

class PrismWeaveEnhancedHost implements IPrismWeaveEnhanced {
  private _runtime: EnhancedBookmarkletRuntime | null = null;
  private _initialized = false;
  private static readonly VERSION = '2.0.0';

  constructor() {
    this.initialize();
  }

  private initialize(): void {
    try {
      this._runtime = new EnhancedBookmarkletRuntime();
      this._initialized = true;
      console.log(`PrismWeave Enhanced v${PrismWeaveEnhancedHost.VERSION} loaded successfully`);
    } catch (error) {
      console.error('Failed to initialize PrismWeave Enhanced:', error);
      this._initialized = false;
    }
  }

  async execute(): Promise<void> {
    if (!this._initialized || !this._runtime) {
      throw new Error('PrismWeave Enhanced not properly initialized');
    }

    await this._runtime.execute();
  }

  async quickExecute(): Promise<void> {
    if (!this._initialized || !this._runtime) {
      throw new Error('PrismWeave Enhanced not properly initialized');
    }

    await this._runtime.quickExecute();
  }

  getVersion(): string {
    return PrismWeaveEnhancedHost.VERSION;
  }

  getStatus() {
    const lastCapture = this._runtime
      ? this._runtime['_state']?.lastCapture?.data?.extractedAt
      : undefined;
    return {
      loaded: this._initialized,
      configured: this._runtime ? this._runtime['isConfigured']() : false,
      version: PrismWeaveEnhancedHost.VERSION,
      ...(lastCapture && { lastCapture }),
    };
  }

  async configure(config: any): Promise<void> {
    if (!this._initialized || !this._runtime) {
      throw new Error('PrismWeave Enhanced not properly initialized');
    }

    // Update runtime configuration
    this._runtime['_config'] = { ...this._runtime['_config'], ...config };
    this._runtime['saveConfig']();
    this._runtime['updateGitHubClient']();
  }

  reset(): void {
    if (this._runtime) {
      // Clear stored configuration and state
      localStorage.removeItem('prismweave-enhanced-config');
      localStorage.removeItem('prismweave-enhanced-state');
      localStorage.removeItem('prismweave-analytics');

      // Reinitialize
      this.initialize();
    }
  }
}

// Create global instance
const prismWeaveEnhanced = new PrismWeaveEnhancedHost();

// Export for hybrid loader
(window as any).PrismWeaveEnhanced = prismWeaveEnhanced;

// Auto-execute if called directly (not through hybrid loader)
if (!(window as any).PrismWeaveLoader) {
  console.log('PrismWeave Enhanced: Direct execution mode');
  prismWeaveEnhanced.execute().catch(error => {
    console.error('Direct execution failed:', error);
  });
}

export { prismWeaveEnhanced, PrismWeaveEnhancedHost };
