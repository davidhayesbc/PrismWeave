// Generated by Copilot
// Bookmarklet UI - User interface overlay for bookmarklet interaction
// Self-contained UI with minimal DOM footprint and no external dependencies

export interface IBookmarkletUIOptions {
  theme: 'light' | 'dark' | 'auto';
  showPreview: boolean;
  position?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';
  zIndex?: number;
}

export interface IContentPreview {
  title: string;
  url: string;
  markdown: string;
  frontmatter: string;
  content: string;
  wordCount: number;
  readingTime: number;
  extractedAt: string;
  images: string[];
  metadata: Record<string, unknown>;
}

/**
 * Bookmarklet UI overlay for user interaction
 * Creates a floating interface with progress, preview, and settings
 */
export class BookmarkletUI {
  private _options: IBookmarkletUIOptions;
  private _container: HTMLElement | null = null;
  private _isVisible: boolean = false;
  private _currentTheme: 'light' | 'dark' = 'light';

  constructor(options: Partial<IBookmarkletUIOptions> = {}) {
    this._options = {
      theme: options.theme || 'auto',
      showPreview: options.showPreview !== false,
      position: options.position || 'top-right',
      zIndex: options.zIndex || 999999,
    };
  }

  /**
   * Initialize the UI system
   */
  async initialize(): Promise<void> {
    try {
      this.detectTheme();
      this.createContainer();
      this.injectStyles();
      console.log('Bookmarklet UI initialized');
    } catch (error) {
      console.error('Failed to initialize bookmarklet UI:', error);
      throw error;
    }
  }

  /**
   * Show the bookmarklet UI
   */
  async show(): Promise<void> {
    if (!this._container) {
      await this.initialize();
    }

    this._container!.style.display = 'block';
    this._isVisible = true;

    // Add show animation
    requestAnimationFrame(() => {
      this._container!.classList.add('pw-bookmarklet-show');
    });
  }

  /**
   * Hide the bookmarklet UI
   */
  async hide(): Promise<void> {
    if (!this._container || !this._isVisible) {
      return;
    }

    this._container.classList.remove('pw-bookmarklet-show');

    // Wait for animation to complete
    setTimeout(() => {
      if (this._container) {
        this._container.style.display = 'none';
        this._isVisible = false;
      }
    }, 300);
  }

  /**
   * Show progress indicator
   */
  async showProgress(message: string, percentage: number): Promise<void> {
    if (!this._container) {
      return;
    }

    const content = `
      <div class="pw-bookmarklet-progress">
        <div class="pw-bookmarklet-header">
          <div class="pw-bookmarklet-logo">üåü PrismWeave</div>
          <button class="pw-bookmarklet-close" onclick="this.closest('.pw-bookmarklet-container').style.display='none'">√ó</button>
        </div>
        <div class="pw-bookmarklet-body">
          <div class="pw-bookmarklet-message">${this.escapeHtml(message)}</div>
          <div class="pw-bookmarklet-progress-bar">
            <div class="pw-bookmarklet-progress-fill" style="width: ${Math.max(0, Math.min(100, percentage))}%"></div>
          </div>
          <div class="pw-bookmarklet-percentage">${Math.round(percentage)}%</div>
        </div>
      </div>
    `;

    this._container.innerHTML = content;
  }

  /**
   * Show content preview with save/cancel options
   */
  async showPreview(content: IContentPreview): Promise<boolean> {
    if (!this._container) {
      return false;
    }

    return new Promise<boolean>(resolve => {
      const truncatedMarkdown =
        content.markdown.length > 500
          ? content.markdown.substring(0, 500) + '...'
          : content.markdown;

      const previewContent = `
        <div class="pw-bookmarklet-preview">
          <div class="pw-bookmarklet-header">
            <div class="pw-bookmarklet-logo">üåü PrismWeave</div>
            <button class="pw-bookmarklet-close" onclick="this.closest('.pw-bookmarklet-container').style.display='none'; arguments[0].resolve(false);">√ó</button>
          </div>
          <div class="pw-bookmarklet-body">
            <div class="pw-bookmarklet-preview-header">
              <h3>${this.escapeHtml(content.title)}</h3>
              <div class="pw-bookmarklet-meta">
                <span>üìÑ ${content.wordCount} words</span>
                <span>‚è±Ô∏è ${content.readingTime} min read</span>
                ${content.images.length > 0 ? `<span>üñºÔ∏è ${content.images.length} images</span>` : ''}
              </div>
            </div>
            <div class="pw-bookmarklet-preview-content">
              <textarea readonly class="pw-bookmarklet-preview-text">${this.escapeHtml(truncatedMarkdown)}</textarea>
            </div>
            <div class="pw-bookmarklet-preview-actions">
              <button class="pw-bookmarklet-btn pw-bookmarklet-btn-secondary" onclick="arguments[0].resolve(false);">Cancel</button>
              <button class="pw-bookmarklet-btn pw-bookmarklet-btn-primary" onclick="arguments[0].resolve(true);">Save to GitHub</button>
            </div>
          </div>
        </div>
      `;

      this._container!.innerHTML = previewContent;

      // Add event handlers
      const cancelBtn = this._container!.querySelector(
        '.pw-bookmarklet-btn-secondary'
      ) as HTMLButtonElement;
      const saveBtn = this._container!.querySelector(
        '.pw-bookmarklet-btn-primary'
      ) as HTMLButtonElement;
      const closeBtn = this._container!.querySelector('.pw-bookmarklet-close') as HTMLButtonElement;

      if (cancelBtn) {
        cancelBtn.onclick = () => resolve(false);
      }
      if (saveBtn) {
        saveBtn.onclick = () => resolve(true);
      }
      if (closeBtn) {
        closeBtn.onclick = () => resolve(false);
      }
    });
  }

  /**
   * Show success message
   */
  async showSuccess(title: string, message: string, link?: string): Promise<void> {
    if (!this._container) {
      return;
    }

    const linkHtml = link
      ? `<a href="${this.escapeHtml(link)}" target="_blank" class="pw-bookmarklet-link">View on GitHub ‚Üí</a>`
      : '';

    const content = `
      <div class="pw-bookmarklet-success">
        <div class="pw-bookmarklet-header">
          <div class="pw-bookmarklet-logo">üåü PrismWeave</div>
          <button class="pw-bookmarklet-close" onclick="this.closest('.pw-bookmarklet-container').style.display='none'">√ó</button>
        </div>
        <div class="pw-bookmarklet-body">
          <div class="pw-bookmarklet-success-icon">‚úÖ</div>
          <h3>${this.escapeHtml(title)}</h3>
          <p class="pw-bookmarklet-success-message">${this.escapeHtml(message)}</p>
          ${linkHtml}
        </div>
      </div>
    `;

    this._container.innerHTML = content;
  }

  /**
   * Show error message
   */
  async showError(message: string): Promise<void> {
    if (!this._container) {
      return;
    }

    const content = `
      <div class="pw-bookmarklet-error">
        <div class="pw-bookmarklet-header">
          <div class="pw-bookmarklet-logo">üåü PrismWeave</div>
          <button class="pw-bookmarklet-close" onclick="this.closest('.pw-bookmarklet-container').style.display='none'">√ó</button>
        </div>
        <div class="pw-bookmarklet-body">
          <div class="pw-bookmarklet-error-icon">‚ùå</div>
          <h3>Error</h3>
          <p class="pw-bookmarklet-error-message">${this.escapeHtml(message)}</p>
          <button class="pw-bookmarklet-btn pw-bookmarklet-btn-secondary" onclick="this.closest('.pw-bookmarklet-container').style.display='none'">Close</button>
        </div>
      </div>
    `;

    this._container.innerHTML = content;
  }

  /**
   * Show warning message
   */
  async showWarning(message: string): Promise<void> {
    if (!this._container) {
      return;
    }

    // Show warning as a temporary toast
    const warning = document.createElement('div');
    warning.className = `pw-bookmarklet-toast pw-bookmarklet-warning pw-bookmarklet-theme-${this._currentTheme}`;
    warning.innerHTML = `
      <div class="pw-bookmarklet-toast-content">
        <span class="pw-bookmarklet-toast-icon">‚ö†Ô∏è</span>
        <span class="pw-bookmarklet-toast-message">${this.escapeHtml(message)}</span>
      </div>
    `;

    document.body.appendChild(warning);

    // Auto-remove after 4 seconds
    setTimeout(() => {
      if (warning.parentNode) {
        warning.parentNode.removeChild(warning);
      }
    }, 4000);
  }

  /**
   * Show confirmation dialog
   */
  async showConfirm(title: string, message: string): Promise<boolean> {
    if (!this._container) {
      return false;
    }

    return new Promise<boolean>(resolve => {
      const content = `
        <div class="pw-bookmarklet-confirm">
          <div class="pw-bookmarklet-header">
            <div class="pw-bookmarklet-logo">üåü PrismWeave</div>
          </div>
          <div class="pw-bookmarklet-body">
            <h3>${this.escapeHtml(title)}</h3>
            <p class="pw-bookmarklet-confirm-message">${this.escapeHtml(message)}</p>
            <div class="pw-bookmarklet-confirm-actions">
              <button class="pw-bookmarklet-btn pw-bookmarklet-btn-secondary" onclick="arguments[0].resolve(false);">Cancel</button>
              <button class="pw-bookmarklet-btn pw-bookmarklet-btn-primary" onclick="arguments[0].resolve(true);">Continue</button>
            </div>
          </div>
        </div>
      `;

      this._container!.innerHTML = content;

      // Add event handlers
      const cancelBtn = this._container!.querySelector(
        '.pw-bookmarklet-btn-secondary'
      ) as HTMLButtonElement;
      const continueBtn = this._container!.querySelector(
        '.pw-bookmarklet-btn-primary'
      ) as HTMLButtonElement;

      if (cancelBtn) {
        cancelBtn.onclick = () => resolve(false);
      }
      if (continueBtn) {
        continueBtn.onclick = () => resolve(true);
      }
    });
  }

  /**
   * Update UI theme
   */
  async updateTheme(theme: 'light' | 'dark' | 'auto'): Promise<void> {
    this._options.theme = theme;
    this.detectTheme();

    if (this._container) {
      this._container.className = `pw-bookmarklet-container pw-bookmarklet-theme-${this._currentTheme} pw-bookmarklet-position-${this._options.position}`;
    }
  }

  /**
   * Cleanup UI resources
   */
  async cleanup(): Promise<void> {
    if (this._container && this._container.parentNode) {
      this._container.parentNode.removeChild(this._container);
    }

    // Remove injected styles
    const existingStyles = document.getElementById('pw-bookmarklet-styles');
    if (existingStyles && existingStyles.parentNode) {
      existingStyles.parentNode.removeChild(existingStyles);
    }

    // Remove any toast notifications
    const toasts = document.querySelectorAll('.pw-bookmarklet-toast');
    toasts.forEach(toast => {
      if (toast.parentNode) {
        toast.parentNode.removeChild(toast);
      }
    });

    this._container = null;
    this._isVisible = false;
  }

  // Private methods

  private createContainer(): void {
    if (this._container) {
      return;
    }

    this._container = document.createElement('div');
    this._container.className = `pw-bookmarklet-container pw-bookmarklet-theme-${this._currentTheme} pw-bookmarklet-position-${this._options.position}`;
    this._container.style.display = 'none';
    this._container.style.zIndex = this._options.zIndex!.toString();

    document.body.appendChild(this._container);
  }

  private detectTheme(): void {
    if (this._options.theme === 'auto') {
      // Detect system preference
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        this._currentTheme = 'dark';
      } else {
        this._currentTheme = 'light';
      }
    } else {
      this._currentTheme = this._options.theme;
    }
  }

  private injectStyles(): void {
    // Check if styles already injected
    if (document.getElementById('pw-bookmarklet-styles')) {
      return;
    }

    const styles = document.createElement('style');
    styles.id = 'pw-bookmarklet-styles';
    styles.textContent = `
      .pw-bookmarklet-container {
        position: fixed;
        width: 350px;
        max-height: 500px;
        background: #ffffff;
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        font-size: 14px;
        line-height: 1.4;
        overflow: hidden;
        transform: translateY(-10px);
        opacity: 0;
        transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        border: 1px solid #e1e5e9;
      }

      .pw-bookmarklet-container.pw-bookmarklet-show {
        transform: translateY(0);
        opacity: 1;
      }

      .pw-bookmarklet-container.pw-bookmarklet-theme-dark {
        background: #1a1a1a;
        border-color: #333333;
        color: #ffffff;
      }

      .pw-bookmarklet-position-top-right {
        top: 20px;
        right: 20px;
      }

      .pw-bookmarklet-position-top-left {
        top: 20px;
        left: 20px;
      }

      .pw-bookmarklet-position-bottom-right {
        bottom: 20px;
        right: 20px;
      }

      .pw-bookmarklet-position-bottom-left {
        bottom: 20px;
        left: 20px;
      }

      .pw-bookmarklet-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 16px 20px;
        border-bottom: 1px solid #e1e5e9;
        background: #f8f9fa;
      }

      .pw-bookmarklet-theme-dark .pw-bookmarklet-header {
        border-color: #333333;
        background: #2a2a2a;
      }

      .pw-bookmarklet-logo {
        font-weight: 600;
        font-size: 16px;
        color: #6366f1;
      }

      .pw-bookmarklet-close {
        background: none;
        border: none;
        font-size: 20px;
        cursor: pointer;
        padding: 4px;
        line-height: 1;
        color: #6b7280;
        border-radius: 4px;
        transition: all 0.2s;
      }

      .pw-bookmarklet-close:hover {
        background: #f3f4f6;
        color: #374151;
      }

      .pw-bookmarklet-theme-dark .pw-bookmarklet-close {
        color: #9ca3af;
      }

      .pw-bookmarklet-theme-dark .pw-bookmarklet-close:hover {
        background: #374151;
        color: #d1d5db;
      }

      .pw-bookmarklet-body {
        padding: 20px;
      }

      .pw-bookmarklet-message {
        margin-bottom: 16px;
        color: #374151;
        font-weight: 500;
      }

      .pw-bookmarklet-theme-dark .pw-bookmarklet-message {
        color: #d1d5db;
      }

      .pw-bookmarklet-progress-bar {
        width: 100%;
        height: 8px;
        background: #e5e7eb;
        border-radius: 4px;
        overflow: hidden;
        margin-bottom: 12px;
      }

      .pw-bookmarklet-theme-dark .pw-bookmarklet-progress-bar {
        background: #374151;
      }

      .pw-bookmarklet-progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #6366f1, #8b5cf6);
        border-radius: 4px;
        transition: width 0.3s ease;
      }

      .pw-bookmarklet-percentage {
        text-align: center;
        font-weight: 600;
        color: #6366f1;
      }

      .pw-bookmarklet-preview-header h3 {
        margin: 0 0 8px 0;
        font-size: 16px;
        font-weight: 600;
        line-height: 1.3;
        color: #111827;
      }

      .pw-bookmarklet-theme-dark .pw-bookmarklet-preview-header h3 {
        color: #f9fafb;
      }

      .pw-bookmarklet-meta {
        display: flex;
        gap: 12px;
        margin-bottom: 16px;
        font-size: 12px;
        color: #6b7280;
      }

      .pw-bookmarklet-theme-dark .pw-bookmarklet-meta {
        color: #9ca3af;
      }

      .pw-bookmarklet-preview-text {
        width: 100%;
        height: 120px;
        border: 1px solid #d1d5db;
        border-radius: 6px;
        padding: 12px;
        font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
        font-size: 12px;
        line-height: 1.4;
        resize: none;
        background: #f9fafb;
        color: #374151;
        margin-bottom: 16px;
      }

      .pw-bookmarklet-theme-dark .pw-bookmarklet-preview-text {
        border-color: #4b5563;
        background: #1f2937;
        color: #d1d5db;
      }

      .pw-bookmarklet-preview-actions,
      .pw-bookmarklet-confirm-actions {
        display: flex;
        gap: 12px;
        justify-content: flex-end;
      }

      .pw-bookmarklet-btn {
        padding: 8px 16px;
        border-radius: 6px;
        border: none;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        min-width: 80px;
      }

      .pw-bookmarklet-btn-primary {
        background: #6366f1;
        color: white;
      }

      .pw-bookmarklet-btn-primary:hover {
        background: #5b21b6;
      }

      .pw-bookmarklet-btn-secondary {
        background: #f3f4f6;
        color: #374151;
        border: 1px solid #d1d5db;
      }

      .pw-bookmarklet-btn-secondary:hover {
        background: #e5e7eb;
      }

      .pw-bookmarklet-theme-dark .pw-bookmarklet-btn-secondary {
        background: #374151;
        color: #d1d5db;
        border-color: #4b5563;
      }

      .pw-bookmarklet-theme-dark .pw-bookmarklet-btn-secondary:hover {
        background: #4b5563;
      }

      .pw-bookmarklet-success-icon,
      .pw-bookmarklet-error-icon {
        font-size: 48px;
        text-align: center;
        margin-bottom: 16px;
      }

      .pw-bookmarklet-success h3,
      .pw-bookmarklet-error h3,
      .pw-bookmarklet-confirm h3 {
        margin: 0 0 12px 0;
        font-size: 18px;
        font-weight: 600;
        text-align: center;
        color: #111827;
      }

      .pw-bookmarklet-theme-dark .pw-bookmarklet-success h3,
      .pw-bookmarklet-theme-dark .pw-bookmarklet-error h3,
      .pw-bookmarklet-theme-dark .pw-bookmarklet-confirm h3 {
        color: #f9fafb;
      }

      .pw-bookmarklet-success-message,
      .pw-bookmarklet-error-message,
      .pw-bookmarklet-confirm-message {
        text-align: center;
        margin-bottom: 16px;
        color: #6b7280;
        line-height: 1.5;
      }

      .pw-bookmarklet-theme-dark .pw-bookmarklet-success-message,
      .pw-bookmarklet-theme-dark .pw-bookmarklet-error-message,
      .pw-bookmarklet-theme-dark .pw-bookmarklet-confirm-message {
        color: #9ca3af;
      }

      .pw-bookmarklet-link {
        display: inline-block;
        color: #6366f1;
        text-decoration: none;
        font-weight: 500;
        margin-top: 8px;
        text-align: center;
        width: 100%;
      }

      .pw-bookmarklet-link:hover {
        text-decoration: underline;
      }

      .pw-bookmarklet-toast {
        position: fixed;
        top: 20px;
        right: 20px;
        background: #fbbf24;
        color: #92400e;
        padding: 12px 16px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        font-size: 14px;
        z-index: 1000000;
        animation: pw-bookmarklet-slide-in 0.3s ease;
      }

      .pw-bookmarklet-toast.pw-bookmarklet-theme-dark {
        background: #d97706;
        color: #fbbf24;
      }

      .pw-bookmarklet-toast-content {
        display: flex;
        align-items: center;
        gap: 8px;
      }

      @keyframes pw-bookmarklet-slide-in {
        from {
          transform: translateX(100%);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }
    `;

    document.head.appendChild(styles);
  }

  private escapeHtml(text: string): string {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }
}
