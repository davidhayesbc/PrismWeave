// Generated by Copilot
// Tab provider interface for abstracting Chrome tabs API vs direct DOM access

export interface IPageInfo {
  id?: number;
  url: string;
  title: string;
  favIconUrl?: string;
  status?: 'loading' | 'complete';
  isActive?: boolean;
}

export interface ITabProvider {
  getCurrentTab(): Promise<IPageInfo>;
  getTabById(tabId: number): Promise<IPageInfo>;
  getAllTabs(): Promise<IPageInfo[]>;
  sendMessage<TRequest, TResponse>(tabId: number, message: TRequest): Promise<TResponse>;
  executeScript<TResult>(tabId: number, script: string | (() => TResult)): Promise<TResult[]>;
  onUpdated(callback: (tabId: number, changeInfo: Record<string, unknown>, tab: IPageInfo) => void): void;
}

export abstract class BaseTabProvider implements ITabProvider {
  protected updateCallbacks: Array<(tabId: number, changeInfo: Record<string, unknown>, tab: IPageInfo) => void> = [];

  abstract getCurrentTab(): Promise<IPageInfo>;
  abstract getTabById(tabId: number): Promise<IPageInfo>;
  abstract getAllTabs(): Promise<IPageInfo[]>;
  abstract sendMessage<TRequest, TResponse>(tabId: number, message: TRequest): Promise<TResponse>;
  abstract executeScript<TResult>(tabId: number, script: string | (() => TResult)): Promise<TResult[]>;

  onUpdated(callback: (tabId: number, changeInfo: Record<string, unknown>, tab: IPageInfo) => void): void {
    this.updateCallbacks.push(callback);
  }

  protected handleUpdate(tabId: number, changeInfo: Record<string, unknown>, tab: IPageInfo): void {
    this.updateCallbacks.forEach(callback => {
      try {
        callback(tabId, changeInfo, tab);
      } catch (error) {
        console.error('Error in tab update callback:', error);
      }
    });
  }
}
