// Generated by Copilot
// Notification provider interface for abstracting Chrome notifications vs overlay notifications

export interface INotificationOptions {
  type: 'success' | 'error' | 'info' | 'warning';
  duration?: number;
  clickUrl?: string;
  actions?: Array<{
    id: string;
    title: string;
    iconUrl?: string;
  }>;
}

export interface INotificationProvider {
  show(message: string, options?: INotificationOptions): Promise<string>;
  hide(notificationId: string): Promise<void>;
  clear(): Promise<void>;
  onClicked(callback: (notificationId: string, actionId?: string) => void): void;
  onClosed(callback: (notificationId: string) => void): void;
}

export abstract class BaseNotificationProvider implements INotificationProvider {
  protected clickCallbacks: Array<(notificationId: string, actionId?: string) => void> = [];
  protected closedCallbacks: Array<(notificationId: string) => void> = [];

  abstract show(message: string, options?: INotificationOptions): Promise<string>;
  abstract hide(notificationId: string): Promise<void>;
  abstract clear(): Promise<void>;

  onClicked(callback: (notificationId: string, actionId?: string) => void): void {
    this.clickCallbacks.push(callback);
  }

  onClosed(callback: (notificationId: string) => void): void {
    this.closedCallbacks.push(callback);
  }

  protected handleClick(notificationId: string, actionId?: string): void {
    this.clickCallbacks.forEach(callback => {
      try {
        callback(notificationId, actionId);
      } catch (error) {
        console.error('Error in notification click callback:', error);
      }
    });
  }

  protected handleClosed(notificationId: string): void {
    this.closedCallbacks.forEach(callback => {
      try {
        callback(notificationId);
      } catch (error) {
        console.error('Error in notification closed callback:', error);
      }
    });
  }
}
