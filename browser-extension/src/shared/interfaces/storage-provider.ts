// Generated by Copilot
// Storage provider interface for abstracting Chrome storage vs localStorage

export interface IStorageProvider {
  get<T>(key: string): Promise<T | null>;
  set<T>(key: string, value: T): Promise<void>;
  remove(key: string): Promise<void>;
  clear(): Promise<void>;
  getAll(): Promise<Record<string, unknown>>;
}

export interface IStorageOptions {
  useSync?: boolean;
  prefix?: string;
  encryptSensitive?: boolean;
}

export abstract class BaseStorageProvider implements IStorageProvider {
  protected options: IStorageOptions;

  constructor(options: IStorageOptions = {}) {
    this.options = {
      useSync: true,
      prefix: 'prismweave_',
      encryptSensitive: false,
      ...options
    };
  }

  abstract get<T>(key: string): Promise<T | null>;
  abstract set<T>(key: string, value: T): Promise<void>;
  abstract remove(key: string): Promise<void>;
  abstract clear(): Promise<void>;
  abstract getAll(): Promise<Record<string, unknown>>;

  protected getFullKey(key: string): string {
    return this.options.prefix + key;
  }
}
