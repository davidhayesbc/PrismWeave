// Generated by Copilot
// PrismWeave Markdown Converter - Browser Extension Adapter
//
// This class serves as the browser-specific adapter for the MarkdownConverterCore.
// It handles TurndownService initialization and provides environment-aware behavior
// for different contexts (content script, service worker, tests).
//
// Architecture:
// - MarkdownConverterCore: Contains all conversion logic (environment-agnostic)
// - MarkdownConverter: Browser-specific adapter with TurndownService integration
//
// Usage: Always use this class in browser extension contexts, not the core directly.

// Simple logger implementation for shared code
const logger = {
  info: (...args: any[]) => console.log('[INFO]', ...args),
  warn: (...args: any[]) => console.warn('[WARN]', ...args),
  error: (...args: any[]) => console.error('[ERROR]', ...args),
  debug: (...args: any[]) => console.log('[DEBUG]', ...args)
};

// Environment detection utility
const isTestEnvironment = (): boolean => {
  return typeof globalThis !== 'undefined' && 
         typeof (globalThis as any).test !== 'undefined';
};

// TurndownService type definition for optional usage
type TurndownServiceType = any;
import {
    IConversionOptions,
    IConversionResult,
    MarkdownConverterCore,
} from './markdown-converter-core.js';

/**
 * Browser Extension Markdown Converter Adapter
 *
 * This class provides browser-specific markdown conversion capabilities by extending
 * the environment-agnostic MarkdownConverterCore. It handles:
 *
 * - TurndownService initialization and configuration
 * - Context detection (service worker vs content script vs test)
 * - Browser API integration and error handling
 * - Graceful fallbacks when TurndownService is unavailable
 *
 * Usage:
 * ```typescript
 * const converter = new MarkdownConverter();
 * const result = converter.convertToMarkdown(htmlContent);
 * ```
 *
 * Context Behavior:
 * - Content Script: Full TurndownService functionality
 * - Service Worker: Limited fallback (TurndownService not available)
 * - Test Environment: Mock-compatible initialization
 */
/**
 * Shared Markdown Converter - Environment-Agnostic Implementation
 *
 * This class provides markdown conversion capabilities that work across
 * different environments (browser extension, bookmarklet, etc.)
 *
 * Key features:
 * - Dependency injection for TurndownService
 * - Environment detection and graceful fallbacks
 * - Extensible conversion rules and customization
 *
 * Usage:
 * ```typescript
 * // With TurndownService (full functionality)
 * const converter = new MarkdownConverter();
 * await converter.initialize(TurndownServiceInstance);
 * 
 * // Without TurndownService (basic fallback)
 * const converter = new MarkdownConverter();
 * await converter.initialize(); // Uses basic HTML stripping
 * ```
 */
export class MarkdownConverter extends MarkdownConverterCore {
  constructor(turndownServiceClass?: any) {
    super();
    this.initializeSync(turndownServiceClass);
  }

  /**
   * Initialize the MarkdownConverter with optional TurndownService
   * @param turndownServiceClass - Optional TurndownService constructor/instance
   */
  private initializeSync(turndownServiceClass?: any): void {
    if (this._isInitialized) {
      return;
    }

    try {
      // Service worker context check - TurndownService should never be loaded here
      const isServiceWorker =
        typeof (globalThis as any).importScripts === 'function' && typeof window === 'undefined';
      
      if (isServiceWorker) {
        if (!isTestEnvironment()) {
          logger.info('Running in service worker context, TurndownService not available');
        }
        this.turndownService = null;
        this._isInitialized = true;
        return;
      }

      // Check if document is available (content script context)
      if (typeof document === 'undefined') {
        if (!isTestEnvironment()) {
          logger.warn('Document not available, TurndownService cannot be initialized');
        }
        this.turndownService = null;
        this._isInitialized = true;
        return;
      }

      // Initialize TurndownService if provided
      if (turndownServiceClass) {
        const options = {
          headingStyle: 'atx' as const,
          bulletListMarker: '-' as const,
          codeBlockStyle: 'fenced' as const,
          emDelimiter: '*' as const,
          strongDelimiter: '**' as const,
          linkStyle: 'inlined' as const,
          linkReferenceStyle: 'full' as const,
          preformattedCode: true,
        };
        this.turndownService = new turndownServiceClass(options);
        this.setupTurndownService();
        this._isInitialized = true;
        if (!isTestEnvironment()) {
          logger.info('TurndownService initialized successfully');
        }
      } else {
        // No TurndownService provided - use fallback conversion
        if (!isTestEnvironment()) {
          logger.info('No TurndownService provided, using basic conversion');
        }
        this.turndownService = null;
        this._isInitialized = true;
      }
    } catch (error) {
      if (!isTestEnvironment()) {
        logger.warn('Failed to initialize TurndownService:', error);
      }
      this.turndownService = null;
      this._isInitialized = true;
    }
  }
}

// Re-export the interfaces for backward compatibility and convenience
// These are the main types that consumers should use
export type { IConversionOptions, IConversionResult };

// Export the core class for advanced use cases (testing, custom adapters)
// Most code should use MarkdownConverter instead of the core directly
    export { MarkdownConverterCore } from './markdown-converter-core';

