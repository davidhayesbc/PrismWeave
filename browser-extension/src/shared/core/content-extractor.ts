// Generated by Copilot
// Content Extractor with dependency injection for different environments

import type { IDocumentMetadata } from '../../types/index.js';
import { ContentExtractorCore, IContentResult, IDOMProvider, IExtractorOptions, IImageInfo, IPageStructure } from './content-extractor-core.js';

/**
 * Logger interface for dependency injection
 */
export interface ILogger {
  info: (msg: string, ...args: any[]) => void;
  debug: (msg: string, ...args: any[]) => void;
  warn: (msg: string, ...args: any[]) => void;
  error: (msg: string, ...args: any[]) => void;
}

/**
 * Content Extractor with dependency injection
 * Provides environment-agnostic content extraction with configurable DOM provider
 */
export class ContentExtractor {
  private core: ContentExtractorCore;
  private domProvider: IDOMProvider;
  private logger: ILogger | undefined;

  constructor(
    domProvider: IDOMProvider,
    logger?: ILogger
  ) {
    this.domProvider = domProvider;
    this.logger = logger;
    this.core = new ContentExtractorCore(domProvider);
  }

  /**
   * Extract content from the current page
   */
  async extractContent(options: IExtractorOptions = {}): Promise<IContentResult> {
    try {
      this.logger?.debug('Starting content extraction');
      const result = await this.core.extractContent(options);
      this.logger?.debug('Content extraction complete', {
        contentLength: result.content.length,
        wordCount: result.wordCount,
        readingTime: result.readingTime,
      });
      return result;
    } catch (error) {
      this.logger?.error('Error during extraction:', error);
      throw error;
    }
  }

  /**
   * Extract page metadata
   */
  extractMetadata(): IDocumentMetadata {
    try {
      const doc = this.domProvider.getDocument();
      const win = this.domProvider.getWindow();
      return this.core.extractMetadata(doc, win);
    } catch (error) {
      this.logger?.error('Error extracting metadata:', error);
      throw error;
    }
  }

  /**
   * Extract images from the page
   */
  extractImages(): IImageInfo[] {
    try {
      const doc = this.domProvider.getDocument();
      const win = this.domProvider.getWindow();
      return this.core.extractImages(doc, win);
    } catch (error) {
      this.logger?.error('Error extracting images:', error);
      return [];
    }
  }

  /**
   * Get page structure information
   */
  getPageStructure(): IPageStructure {
    try {
      const doc = this.domProvider.getDocument();
      return this.core.getPageStructure(doc);
    } catch (error) {
      this.logger?.error('Error getting page structure:', error);
      return { headings: [], sections: 0, paragraphs: 0 };
    }
  }

  /**
   * Calculate content quality score
   */
  getContentQualityScore(): number {
    try {
      const doc = this.domProvider.getDocument();
      return this.core.getContentQualityScore(doc);
    } catch (error) {
      this.logger?.error('Error calculating content quality score:', error);
      return 0;
    }
  }

  /**
   * Check if paywall is present
   */
  isPaywallPresent(): boolean {
    try {
      const doc = this.domProvider.getDocument();
      return this.core.isPaywallPresent(doc);
    } catch (error) {
      this.logger?.error('Error checking paywall:', error);
      return false;
    }
  }
}

// Export types and core for direct use if needed
export type {
    IContentResult, IDOMProvider, IExtractorOptions, IImageInfo, IPageStructure
};

    export { ContentExtractorCore };

