// Generated by Copilot  
// GitHub API client with dependency injection for different environments

import { GitHubAPICore, IGitHubCommitParams, IGitHubCommitResult, IGitHubConnectionTest } from './github-api-core.js';

/**
 * Logger interface for dependency injection
 */
export interface ILogger {
  info: (msg: string, ...args: any[]) => void;
  debug: (msg: string, ...args: any[]) => void;
  warn: (msg: string, ...args: any[]) => void;
  error: (msg: string, ...args: any[]) => void;
}

/**
 * HTTP provider interface for dependency injection
 * Allows different implementations (fetch, Chrome extension, CORS-enabled)
 */
export interface IHttpProvider {
  fetch(url: string, options?: RequestInit): Promise<Response>;
}

/**
 * GitHub API client with dependency injection
 * Provides environment-agnostic GitHub operations with configurable HTTP provider
 */
export class GitHubClient {
  private core: GitHubAPICore;
  private httpProvider: IHttpProvider;

  constructor(
    httpProvider: IHttpProvider,
    logger?: ILogger
  ) {
    this.httpProvider = httpProvider;
    this.core = new GitHubAPICore(logger, httpProvider);
  }

  /**
   * Commit content to GitHub repository
   */
  async commitToGitHub(params: IGitHubCommitParams): Promise<IGitHubCommitResult> {
    return this.core.commitToGitHub(params);
  }

  /**
   * Test GitHub connection and permissions
   */
  async testConnection(token: string, repo: string): Promise<IGitHubConnectionTest> {
    return this.core.testConnection(token, repo);
  }

  /**
   * Validate repository path format
   */
  validateRepositoryPath(repoPath: string) {
    return this.core.validateRepositoryPath(repoPath);
  }

  /**
   * Setup HTTP provider to override global fetch
   */
  private setupHttpProvider(): void {
    // Store original fetch for restoration if needed
    const originalFetch = globalThis.fetch;

    // Override global fetch with our provider
    globalThis.fetch = (url: string | URL | Request, options?: RequestInit): Promise<Response> => {
      const urlString = typeof url === 'string' ? url : url.toString();
      return this.httpProvider.fetch(urlString, options);
    };

    // Store reference to original for potential cleanup
    (this as any)._originalFetch = originalFetch;
  }

  /**
   * Cleanup method to restore original fetch if needed
   */
  cleanup(): void {
    if ((this as any)._originalFetch) {
      globalThis.fetch = (this as any)._originalFetch;
    }
  }
}

// Export types and core for direct use if needed
export type {
    IGitHubCommitParams,
    IGitHubCommitResult,
    IGitHubConnectionTest
};

    export { GitHubAPICore };

