// Generated by Copilot
// Settings manager with dependency injection for cross-platform compatibility

import type { IStorageProvider } from '../interfaces/storage-provider.js';
import { SettingsManagerCore, type ISettings } from './settings-manager-core.js';

/**
 * Settings manager that uses dependency injection for storage
 * Compatible with both Chrome extension storage and localStorage/other storage providers
 */
interface ILogger {
  warn: (msg: string, ...args: any[]) => void;
  error: (msg: string, ...args: any[]) => void;
}

export class SettingsManager {
  private core: SettingsManagerCore;
  private storageProvider: IStorageProvider;
  private logger: ILogger | undefined;

  constructor(
    storageProvider: IStorageProvider,
    logger?: ILogger
  ) {
    this.core = new SettingsManagerCore();
    this.storageProvider = storageProvider;
    this.logger = logger;
  }

  /**
   * Get current settings from storage
   */
  async getSettings(): Promise<Partial<ISettings>> {
    try {
      const storageKey = this.core.getStorageKey();
      const rawSettings = await this.storageProvider.get<ISettings>(storageKey);
      
      if (!rawSettings) {
        return {};
      }

      // Validate settings against schema - just log errors, don't block
      const validationResult = this.core.validateSettings(rawSettings);
      if (!validationResult.isValid) {
        this.logger?.warn('Settings validation failed:', validationResult.errors);
      }

      return rawSettings;
    } catch (error) {
      this.logger?.error('Error getting settings:', error);
      return {};
    }
  }

  /**
   * Get default settings
   */
  async getDefaults(): Promise<ISettings> {
    return this.core.getDefaults();
  }

  /**
   * Get settings merged with defaults
   */
  async getSettingsWithDefaults(): Promise<ISettings> {
    try {
      const [current, defaults] = await Promise.all([
        this.getSettings(),
        this.getDefaults()
      ]);

      return this.core.mergeWithDefaults(current);
    } catch (error) {
      this.logger?.error('Error getting settings with defaults:', error);
      return await this.getDefaults();
    }
  }

  /**
   * Update settings with validation
   */
  async updateSettings(updates: Partial<ISettings>): Promise<boolean> {
    try {
      const validationResult = this.core.validateSettings(updates);
      if (!validationResult.isValid) {
        this.logger?.error('Validation failed:', validationResult.errors);
        return false;
      }

      const current = await this.getSettings();
      const updated = { ...current, ...updates };

      const storageKey = this.core.getStorageKey();
      await this.storageProvider.set(storageKey, updated);
      return true;
    } catch (error) {
      this.logger?.error('Error updating settings:', error);
      return false;
    }
  }

  /**
   * Reset settings to defaults
   */
  async resetSettings(): Promise<boolean> {
    try {
      const defaults = await this.getDefaults();
      const storageKey = this.core.getStorageKey();
      await this.storageProvider.set(storageKey, defaults);
      return true;
    } catch (error) {
      this.logger?.error('Error resetting settings:', error);
      return false;
    }
  }

  /**
   * Validate settings
   */
  validateSettings(settings: Partial<ISettings>): { isValid: boolean; errors: string[] } {
    return this.core.validateSettings(settings);
  }

  /**
   * Check required dependencies
   */
  async checkRequiredDependencies(settings: Partial<ISettings>): Promise<string[]> {
    return this.core.checkRequiredDependencies(settings);
  }

  /**
   * Get setting definition
   */
  getSettingDefinition(key: string) {
    return this.core.getSettingDefinition(key);
  }

  /**
   * Get all setting definitions
   */
  getAllSettingDefinitions() {
    return this.core.getAllSettingDefinitions();
  }

  /**
   * Export settings as JSON string
   */
  async exportSettings(): Promise<string> {
    try {
      const settings = await this.getSettings();
      const sanitized = this.core.sanitizeForExport(settings as ISettings);
      return JSON.stringify(sanitized, null, 2);
    } catch (error) {
      this.logger?.error('Error exporting settings:', error);
      throw error;
    }
  }

  /**
   * Import settings from JSON string
   */
  async importSettings(jsonString: string): Promise<boolean> {
    try {
      const parseResult = this.core.parseImportedSettings(jsonString);
      
      if (!parseResult.success) {
        this.logger?.error('Import failed:', parseResult.error);
        return false;
      }

      return await this.updateSettings(parseResult.settings!);
    } catch (error) {
      this.logger?.error('Error importing settings:', error);
      return false;
    }
  }
}

// Export for ES6 modules
export { SettingsManagerCore };

// Export types
    export type { ISettings };

