// Generated by Copilot
// Chrome NotificationProvider adapter for PrismWeave shared utilities

import type { INotificationProvider } from '../interfaces/notification-provider.js';

import type { INotificationOptions } from '../interfaces/notification-provider.js';

export class ChromeNotificationProvider implements INotificationProvider {
  private clickCallbacks: Array<(notificationId: string, actionId?: string) => void> = [];
  private closedCallbacks: Array<(notificationId: string) => void> = [];

  async show(message: string, options?: INotificationOptions): Promise<string> {
    return new Promise<string>((resolve) => {
      if (typeof chrome !== 'undefined' && chrome.notifications) {
        const notificationOptions: chrome.notifications.NotificationCreateOptions = {
          type: 'basic',
          iconUrl: 'icon-128.png',
          title: 'PrismWeave',
          message: message || '',
        };
        // Map INotificationOptions.type to Chrome type if possible
        if (options?.type && ['basic', 'image', 'list', 'progress'].includes(options.type)) {
          notificationOptions.type = options.type as chrome.notifications.TemplateType;
        }
        const notificationId = `prismweave-${Date.now()}`;
        chrome.notifications.create(notificationId, notificationOptions, (id) => {
          resolve(id || notificationId);
        });
      } else {
        alert(message);
        resolve('alert');
      }
    });
  }

  async hide(notificationId: string): Promise<void> {
    if (typeof chrome !== 'undefined' && chrome.notifications) {
      chrome.notifications.clear(notificationId);
    }
  }

  async clear(): Promise<void> {
    if (typeof chrome !== 'undefined' && chrome.notifications) {
      chrome.notifications.getAll((notifications) => {
        Object.keys(notifications).forEach(id => {
          chrome.notifications.clear(id);
        });
      });
    }
  }

  onClicked(callback: (notificationId: string, actionId?: string) => void): void {
    this.clickCallbacks.push(callback);
    if (typeof chrome !== 'undefined' && chrome.notifications) {
      chrome.notifications.onClicked.addListener((notificationId) => {
        this.clickCallbacks.forEach(cb => cb(notificationId));
      });
      chrome.notifications.onButtonClicked?.addListener((notificationId, buttonIndex) => {
        this.clickCallbacks.forEach(cb => cb(notificationId, buttonIndex.toString()));
      });
    }
  }

  onClosed(callback: (notificationId: string) => void): void {
    this.closedCallbacks.push(callback);
    if (typeof chrome !== 'undefined' && chrome.notifications) {
      chrome.notifications.onClosed.addListener((notificationId) => {
        this.closedCallbacks.forEach(cb => cb(notificationId));
      });
    }
  }
}
