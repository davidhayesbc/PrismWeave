// Generated by Copilot
// Chrome API adapters for PrismWeave shared utilities

import type { IDOMProvider } from '../core/content-extractor-core.js';
import type { IHttpProvider } from '../core/github-client.js';
import type { IStorageProvider } from '../interfaces/storage-provider.js';

/**
 * Chrome storage adapter for sync storage
 */
export class ChromeStorageProvider implements IStorageProvider {
  async get<T>(key: string): Promise<T | null> {
    return new Promise<T | null>((resolve, reject) => {
      chrome.storage.sync.get([key], (result: Record<string, T>) => {
        if (chrome.runtime.lastError) {
          reject(new Error(chrome.runtime.lastError.message));
        } else {
          resolve(result[key] || null);
        }
      });
    });
  }

  async set<T>(key: string, value: T): Promise<void> {
    return new Promise<void>((resolve, reject) => {
      chrome.storage.sync.set({ [key]: value }, () => {
        if (chrome.runtime.lastError) {
          reject(new Error(chrome.runtime.lastError.message));
        } else {
          resolve();
        }
      });
    });
  }

  async remove(key: string): Promise<void> {
    return new Promise<void>((resolve, reject) => {
      chrome.storage.sync.remove([key], () => {
        if (chrome.runtime.lastError) {
          reject(new Error(chrome.runtime.lastError.message));
        } else {
          resolve();
        }
      });
    });
  }

  async getAll(): Promise<Record<string, unknown>> {
    return new Promise<Record<string, unknown>>((resolve, reject) => {
      chrome.storage.sync.get(null, (result: Record<string, unknown>) => {
        if (chrome.runtime.lastError) {
          reject(new Error(chrome.runtime.lastError.message));
        } else {
          resolve(result);
        }
      });
    });
  }

  async clear(): Promise<void> {
    return new Promise<void>((resolve, reject) => {
      chrome.storage.sync.clear(() => {
        if (chrome.runtime.lastError) {
          reject(new Error(chrome.runtime.lastError.message));
        } else {
          resolve();
        }
      });
    });
  }
}

/**
 * Browser DOM provider for extension/content script context
 */
export class BrowserDOMProvider implements IDOMProvider {
  getDocument(): Document {
    return document;
  }

  getWindow(): Window {
    return window;
  }
}

/**
 * Chrome extension HTTP provider with CORS bypass
 */
export class ChromeHttpProvider implements IHttpProvider {
  async fetch(url: string, options?: RequestInit): Promise<Response> {
    return fetch(url, options);
  }
}

// Export all types for use by other modules
export type { IDOMProvider, IHttpProvider, IStorageProvider };

