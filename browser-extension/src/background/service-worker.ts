// Generated by Copilot
// PrismWeave Background Service Worker
// Simplified working version

console.log('PrismWeave Service Worker starting...');

// Type definitions
interface IMessageData {
  type: string;
  data?: Record<string, unknown>;
  timestamp?: number;
}

interface IMessageResponse {
  success: boolean;
  data?: unknown;
  error?: string;
}

// Simple logger implementation
const logger = {
  info: (...args: any[]) => console.log('[INFO]', ...args),
  debug: (...args: any[]) => console.log('[DEBUG]', ...args),
  warn: (...args: any[]) => console.warn('[WARN]', ...args),
  error: (...args: any[]) => console.error('[ERROR]', ...args)
};

logger.info('PrismWeave Background Service Worker initializing...');

// Chrome extension event listeners
chrome.runtime.onInstalled.addListener(async (details: chrome.runtime.InstalledDetails) => {
  try {
    logger.info('Extension installed/updated:', details.reason);
    
    if (details.reason === 'install') {
      logger.info('First time installation');
    }
  } catch (error) {
    logger.error('Error handling installation:', error);
  }
});

chrome.runtime.onStartup.addListener(() => {
  logger.info('Extension startup event');
});

chrome.runtime.onMessage.addListener((
  message: IMessageData,
  sender: chrome.runtime.MessageSender,
  sendResponse: (response: IMessageResponse) => void
) => {
  logger.info('Received message:', message.type);
  
  // Handle message asynchronously
  handleMessage(message, sender)
    .then(result => {
      logger.debug('Message handled successfully:', message.type);
      sendResponse({ success: true, data: result });
    })
    .catch(error => {
      logger.error('Error handling message:', message.type, error);
      sendResponse({ success: false, error: error.message });
    });
  
  return true; // Keep message channel open for async response
});

// Message handler function
async function handleMessage(message: IMessageData, sender: chrome.runtime.MessageSender): Promise<unknown> {
  switch (message.type) {
    case 'TEST':
    case 'TEST_CONNECTION':
      return { message: 'Service worker is working!', timestamp: Date.now() };
    case 'CAPTURE_PAGE':
      return { success: true, message: 'Capture not yet implemented' };
    case 'GET_SETTINGS':
      return { setting1: 'value1' };
    case 'UPDATE_SETTINGS':
      return true;
    case 'RESET_SETTINGS':
      return true;
    case 'GET_STATUS':
      return {
        initialized: true,
        version: chrome.runtime.getManifest().version,
        timestamp: new Date().toISOString()
      };
    default:
      throw new Error(`Unknown message type: ${message.type}`);
  }
}

logger.info('PrismWeave Background Service Worker initialized successfully');
