// Generated by Copilot
// PrismWeave Content Script - TypeScript version
// Runs on web pages to assist with content extraction and user interactions

import { IContentScriptMessage, IMessageResponse } from '../types/index.js';
import { ContentExtractor } from '../utils/content-extractor.js';
import { MarkdownConverter } from '../utils/markdown-converter.js';

interface IContentExtractor {
  extractPageContent(): Promise<any>;
  extractSelection(): Promise<any>;
  highlightContent(selector?: string): void;
}

export class PrismWeaveContent {
  private isCapturing: boolean = false;
  private contentExtractor: ContentExtractor;
  private markdownConverter: MarkdownConverter;
  private captureIndicator: HTMLElement | null = null;

  constructor() {
    // Initialize extractors immediately
    this.contentExtractor = new ContentExtractor();
    this.markdownConverter = new MarkdownConverter();
    this.initializeContentScript();
  }

  private initializeContentScript(): void {
    // Listen for messages from background script and popup
    chrome.runtime.onMessage.addListener(
      (
        message: IContentScriptMessage,
        sender: chrome.runtime.MessageSender,
        sendResponse: (response: IMessageResponse) => void
      ) => {
        this.handleMessage(message, sender, sendResponse);
        return true; // Keep message channel open for async response
      }
    );

    // Add keyboard shortcut listener
    document.addEventListener('keydown', (event: KeyboardEvent) => {
      // Ctrl+Shift+S to capture page
      if (event.ctrlKey && event.shiftKey && event.key === 'S') {
        event.preventDefault();
        this.captureCurrentPage();
      }

      // Ctrl+Shift+H to highlight content
      if (event.ctrlKey && event.shiftKey && event.key === 'H') {
        event.preventDefault();
        this.highlightMainContent();
      }

      // Escape to cancel capture
      if (event.key === 'Escape' && this.isCapturing) {
        event.preventDefault();
        this.cancelCapture();
      }
    });

    // Add visual feedback for capturing
    this.createCaptureIndicator();

    console.log('PrismWeave content script initialized');
  }
  private async handleMessage(
    message: IContentScriptMessage,
    sender: chrome.runtime.MessageSender,
    sendResponse: (response: IMessageResponse) => void
  ): Promise<void> {
    try {
      switch (message.type) {
        case 'PING':
          // Respond to ping to indicate content script is active
          sendResponse({ success: true, data: { active: true, timestamp: Date.now() } });
          break;
        case 'EXTRACT_CONTENT':
          // Extract content for service worker
          const extractionResult = await this.extractContentForServiceWorker(message.data);
          sendResponse({ success: true, data: extractionResult });
          break;
        case 'EXTRACT_AND_CONVERT_TO_MARKDOWN':
          // Extract HTML content and convert to markdown for service worker
          const conversionResult = await this.extractAndConvertToMarkdown(message.data);

          // If the conversion was successful, return the data directly
          if (conversionResult.success) {
            sendResponse({ success: true, data: conversionResult.data });
          } else {
            sendResponse({ success: false, error: conversionResult.error });
          }
          break;

        case 'CAPTURE_PAGE':
          const pageResult = await this.captureCurrentPage();
          sendResponse({ success: true, data: pageResult });
          break;

        case 'CAPTURE_SELECTION':
          const selectionResult = await this.captureSelection();
          sendResponse({ success: true, data: selectionResult });
          break;

        case 'HIGHLIGHT_CONTENT':
          this.highlightMainContent();
          sendResponse({ success: true, data: { highlighted: true } });
          break;

        case 'GET_PAGE_INFO':
          const pageInfo = this.getPageInfo();
          sendResponse({ success: true, data: pageInfo });
          break;

        case 'INJECT_STYLES':
          this.injectStyles(message.data?.styles as string);
          sendResponse({ success: true, data: { injected: true } });
          break;

        default:
          throw new Error(`Unknown message type: ${message.type}`);
      }
    } catch (error) {
      console.error('PrismWeaveContent: Message handling error:', error);
      sendResponse({
        success: false,
        error: (error as Error).message,
      });
    }
  }
  private async captureCurrentPage(): Promise<any> {
    if (this.isCapturing) {
      console.warn('Capture already in progress');
      return { error: 'Capture already in progress' };
    }

    try {
      this.isCapturing = true;
      this.showCaptureIndicator('Capturing page...');

      // Extract page content using ContentExtractor
      const extractedContent = await this.contentExtractor.extractContent({
        preserveFormatting: true,
        removeAds: true,
        removeNavigation: true,
      }); // Convert to markdown
      const conversionResult = await this.markdownConverter.convertToMarkdown(
        extractedContent.content,
        extractedContent.metadata,
        {
          preserveFormatting: true,
          includeMetadata: true,
          generateFrontmatter: true,
        }
      );

      // Prepare result with metadata
      const result = {
        markdown: conversionResult.markdown,
        frontmatter: conversionResult.frontmatter,
        metadata: conversionResult.metadata,
        images: conversionResult.images,
        cleanedContent: extractedContent.cleanedContent,
        wordCount: conversionResult.wordCount,
        readingTime: extractedContent.readingTime,
        captureDate: new Date().toISOString(),
        url: window.location.href,
        title: document.title,
      };

      this.showCaptureIndicator('Capture completed!', 'success');
      setTimeout(() => this.hideCaptureIndicator(), 2000);

      return result;
    } catch (error) {
      console.error('Error capturing page:', error);
      this.showCaptureIndicator('Capture failed!', 'error');
      setTimeout(() => this.hideCaptureIndicator(), 3000);
      throw error;
    } finally {
      this.isCapturing = false;
    }
  }

  private async captureSelection(): Promise<any> {
    try {
      this.showCaptureIndicator('Capturing selection...');

      const selection = window.getSelection();
      if (!selection || selection.rangeCount === 0) {
        throw new Error('No content selected');
      }

      // Get the selected content as HTML
      const range = selection.getRangeAt(0);
      const container = document.createElement('div');
      container.appendChild(range.cloneContents());
      const selectedHtml = container.innerHTML;

      if (!selectedHtml.trim()) {
        throw new Error('Selected content is empty');
      } // Convert selected content to markdown
      const metadata = {
        title: `Selection from ${document.title}`,
        url: window.location.href,
        captureDate: new Date().toISOString(),
        tags: ['selection'],
        wordCount: selectedHtml.split(/\s+/).length,
        estimatedReadingTime: Math.ceil(selectedHtml.split(/\s+/).length / 200),
      };

      const conversionResult = await this.markdownConverter.convertToMarkdown(
        selectedHtml,
        metadata,
        {
          preserveFormatting: true,
          includeMetadata: false,
        }
      );

      const result = {
        markdown: conversionResult.markdown,
        metadata: conversionResult.metadata,
        selectedText: selection.toString(),
        captureDate: new Date().toISOString(),
        url: window.location.href,
        title: document.title,
      };

      this.showCaptureIndicator('Selection captured!', 'success');
      setTimeout(() => this.hideCaptureIndicator(), 2000);

      return result;
    } catch (error) {
      console.error('Error capturing selection:', error);
      this.showCaptureIndicator('Selection capture failed!', 'error');
      setTimeout(() => this.hideCaptureIndicator(), 3000);
      throw error;
    }
  }

  private highlightMainContent(): void {
    try {
      // Find main content using similar logic to ContentExtractor
      const readabilitySelectors = [
        'article',
        'main',
        '[role="main"]',
        '.content',
        '.post-content',
        '.entry-content',
        '.article-content',
      ];

      let mainElement: Element | null = null;
      for (const selector of readabilitySelectors) {
        mainElement = document.querySelector(selector);
        if (mainElement) break;
      }

      if (mainElement) {
        // Add highlight styling
        const originalStyle = (mainElement as HTMLElement).style.cssText;
        (mainElement as HTMLElement).style.cssText += `
          outline: 3px solid #667eea !important;
          background: rgba(102, 126, 234, 0.1) !important;
          transition: all 0.3s ease !important;
        `;

        // Remove highlight after 3 seconds
        setTimeout(() => {
          (mainElement as HTMLElement).style.cssText = originalStyle;
        }, 3000);

        this.showCaptureIndicator('Content highlighted', 'info');
      } else {
        this.showCaptureIndicator('Main content not found', 'error');
      }

      setTimeout(() => this.hideCaptureIndicator(), 2000);
    } catch (error) {
      console.error('Error highlighting content:', error);
    }
  }

  private cancelCapture(): void {
    this.isCapturing = false;
    this.hideCaptureIndicator();
    console.log('Capture cancelled');
  }

  private getPageInfo(): any {
    return {
      title: document.title,
      url: window.location.href,
      domain: window.location.hostname,
      timestamp: new Date().toISOString(),
      hasSelection: (window.getSelection()?.toString().length || 0) > 0,
      wordCount: this.estimateWordCount(),
      language: document.documentElement.lang || 'en',
    };
  }

  private estimateWordCount(): number {
    const textContent = document.body.textContent || '';
    return textContent
      .trim()
      .split(/\s+/)
      .filter(word => word.length > 0).length;
  }

  private injectStyles(styles: string): void {
    const styleElement = document.createElement('style');
    styleElement.textContent = styles;
    styleElement.id = 'prismweave-injected-styles';

    // Remove existing injected styles
    const existing = document.getElementById('prismweave-injected-styles');
    if (existing) {
      existing.remove();
    }

    document.head.appendChild(styleElement);
  }

  private createCaptureIndicator(): void {
    this.captureIndicator = document.createElement('div');
    this.captureIndicator.id = 'prismweave-capture-indicator';
    this.captureIndicator.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: #4A90E2;
      color: white;
      padding: 12px 20px;
      border-radius: 8px;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      font-size: 14px;
      font-weight: 500;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      z-index: 10000;
      display: none;
      transition: all 0.3s ease;
      max-width: 300px;
    `;

    document.body.appendChild(this.captureIndicator);
  }

  private showCaptureIndicator(message: string, type: 'info' | 'success' | 'error' = 'info'): void {
    if (!this.captureIndicator) return;

    const colors = {
      info: '#4A90E2',
      success: '#7ED321',
      error: '#D0021B',
    };

    this.captureIndicator.textContent = message;
    this.captureIndicator.style.backgroundColor = colors[type];
    this.captureIndicator.style.display = 'block';
  }

  private hideCaptureIndicator(): void {
    if (!this.captureIndicator) return;
    this.captureIndicator.style.display = 'none';
  }

  private async extractContentForServiceWorker(data?: any): Promise<any> {
    try {
      console.log('Extracting content for service worker');

      // Extract basic page information
      const title = document.title || 'Untitled';
      const url = window.location.href;

      // Use the existing content extractor to get content
      const extractedContent = await this.contentExtractor.extractContent({
        preserveFormatting: true,
        removeAds: true,
        removeNavigation: true,
        ...data, // Include any extraction options from the service worker
      });

      // Return the extracted content in the format expected by service worker
      return {
        html: extractedContent.content || extractedContent.cleanedContent || '',
        title,
        url,
        metadata: {
          extractedAt: new Date().toISOString(),
          method: 'content-script',
          wordCount: extractedContent.wordCount,
          readingTime: extractedContent.readingTime,
          contentLength: (extractedContent.content || '').length,
          ...extractedContent.metadata,
        },
      };
    } catch (error) {
      console.error('Error extracting content for service worker:', error);

      // Fallback to basic HTML extraction
      try {
        const title = document.title || 'Untitled';
        const url = window.location.href;

        // Try to find main content area
        const contentSelectors = data?.extractionRules || [
          'article',
          'main',
          '[role="main"]',
          '.content',
          '#content',
          '.post-content',
          '.entry-content',
          'body',
        ];

        let contentElement: Element | null = null;
        for (const selector of contentSelectors) {
          contentElement = document.querySelector(selector);
          if (
            contentElement &&
            contentElement.textContent &&
            contentElement.textContent.trim().length > 100
          ) {
            break;
          }
        }

        if (!contentElement) {
          contentElement = document.body;
        }

        const html = contentElement?.innerHTML || document.body.innerHTML;

        return {
          html,
          title,
          url,
          metadata: {
            extractedAt: new Date().toISOString(),
            method: 'content-script-fallback',
            contentLength: html.length,
          },
        };
      } catch (fallbackError) {
        throw new Error(
          `Content extraction failed: ${fallbackError instanceof Error ? fallbackError.message : 'Unknown error'}`
        );
      }
    }
  }
  private async extractAndConvertToMarkdown(data?: any): Promise<any> {
    try {
      console.log('Extracting content and converting to markdown for service worker');
      console.log('Current URL:', window.location.href);

      // Validate that extractors are available
      if (!this.contentExtractor) {
        throw new Error('ContentExtractor not initialized');
      }
      if (!this.markdownConverter) {
        throw new Error('MarkdownConverter not initialized');
      }

      // Enhanced debugging for Docker blog
      if (window.location.href.includes('docker.com')) {
        console.log('Docker blog detected - debugging DOM structure...');
        
        // Check for various potential content containers
        const potentialSelectors = [
          'article',
          'main',
          '.content',
          '.post-content',
          '.entry-content',
          '.article-content',
          '.blog-content',
          '.container',
          '.single-post',
          '.post',
          '.blog-post',
          'div[class*="content"]',
          'div[class*="post"]',
          'div[class*="article"]',
          'div[class*="blog"]',
          '[data-testid*="content"]',
          '[data-testid*="post"]',
          'section'
        ];
        
        potentialSelectors.forEach(selector => {
          const elements = document.querySelectorAll(selector);
          if (elements.length > 0) {
            console.log(`Found ${elements.length} elements for "${selector}"`);
            elements.forEach((el, index) => {
              if (index < 3) { // Only log first 3 to avoid spam
                const textLength = el.textContent?.trim().length || 0;
                console.log(`  - Element ${index}: ${el.tagName} with ${textLength} chars`);
                if (textLength > 500) {
                  console.log(`    - Likely content element:`, el.className, el.id);
                }
              }
            });
          }
        });
        
        // Check for specific patterns that might indicate Docker blog content
        const dockerSpecific = [
          '.DockerBlogPost',
          '.blog-article',
          '.article-wrapper',
          '.main-content',
          '[role="main"]',
          '.container .row',
          '.content-area'
        ];
        
        console.log('Checking Docker-specific selectors...');
        dockerSpecific.forEach(selector => {
          const elements = document.querySelectorAll(selector);
          if (elements.length > 0) {
            console.log(`Docker selector "${selector}": found ${elements.length} elements`);
          }
        });
      }

      // Extract content using the existing extractor
      let extractedContent = await this.contentExtractor.extractContent({
        preserveFormatting: true,
        removeAds: true,
        removeNavigation: true,
        ...data, // Include any extraction options from the service worker
      });
      console.log('Content extraction completed:', {
        hasContent: !!(extractedContent.content || extractedContent.cleanedContent),
        contentLength: (extractedContent.content || extractedContent.cleanedContent || '').length,
        hasMetadata: !!extractedContent.metadata,
      });

      // Validate that we have content to convert
      let htmlContent = extractedContent.content || extractedContent.cleanedContent || '';
      if (!htmlContent || htmlContent.trim().length === 0) {
        throw new Error('No HTML content extracted from page');
      }

      // If we got very little content, wait a moment for dynamic content to load
      if (htmlContent.length < 200 && window.location.href.includes('docker.com')) {
        console.log('Docker blog: Content seems short, waiting for dynamic loading...');
        await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds
        
        // Try extraction again
        const retryContent = await this.contentExtractor.extractContent({
          preserveFormatting: true,
          removeAds: true,
          removeNavigation: true,
          ...data,
        });
        
        const retryHtml = retryContent.content || retryContent.cleanedContent || '';
        if (retryHtml.length > htmlContent.length) {
          console.log('Docker blog: Retry extraction got more content:', retryHtml.length);
          htmlContent = retryHtml;
          extractedContent = retryContent;
        }
      }

      // Special handling for Docker blog if standard extraction fails
      if (htmlContent.length < 200 && window.location.href.includes('docker.com/blog')) {
        console.log('Docker blog: Standard extraction yielded little content, trying direct approach...');
        
        // Try to get content more directly
        const possibleContent = [
          document.querySelector('.post-content')?.innerHTML,
          document.querySelector('.entry-content')?.innerHTML,
          document.querySelector('.content')?.innerHTML,
          document.querySelector('main')?.innerHTML,
          document.querySelector('article')?.innerHTML,
          document.querySelector('.container')?.innerHTML,
        ].find(content => content && content.length > 500);
        
        if (possibleContent) {
          console.log('Docker blog: Found content via direct approach:', possibleContent.length);
          htmlContent = possibleContent;
          // Update extracted content as well
          extractedContent = {
            ...extractedContent,
            content: possibleContent,
            cleanedContent: possibleContent
          };
        } else {
          console.log('Docker blog: No substantial content found via direct approach either');
          // Log what we actually found
          console.log('Available content containers:');
          ['main', 'article', '.content', '.post-content', '.container'].forEach(sel => {
            const el = document.querySelector(sel);
            if (el) {
              console.log(`${sel}: ${el.textContent?.length || 0} chars`);
            }
          });
        }
      }

      // Convert to markdown using the existing converter
      const metadata = {
        ...extractedContent.metadata,
        title: document.title || 'Untitled',
        url: window.location.href,
      };
      console.log('Converting extracted content to markdown:', {
        contentLength: htmlContent.length,
        hasMarkdownConverter: !!this.markdownConverter,
        metadata: metadata,
      });

      const conversionResult = await this.markdownConverter.convertToMarkdown(
        htmlContent,
        metadata,
        {
          preserveFormatting: true,
          includeMetadata: true,
          generateFrontmatter: true,
          ...data?.conversionOptions, // Include any conversion options
        }
      );

      console.log('Markdown conversion completed:', {
        hasMarkdown: !!conversionResult.markdown,
        markdownLength: conversionResult.markdown?.length || 0,
        hasFrontmatter: !!conversionResult.frontmatter,
        hasImages: !!(conversionResult.images && conversionResult.images.length > 0),
      });

      // Return the result in the format expected by service worker
      return {
        success: true,
        data: {
          markdown: conversionResult.markdown,
          frontmatter: conversionResult.frontmatter,
          html: htmlContent,
          title: document.title || 'Untitled',
          url: window.location.href,
          metadata: {
            ...conversionResult.metadata,
            extractedAt: new Date().toISOString(),
            extractionMethod: 'content-script',
            wordCount: conversionResult.wordCount || extractedContent.wordCount,
            readingTime: extractedContent.readingTime,
          },
          images: conversionResult.images || [],
        },
        extractionMethod: 'content-script',
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      console.error('Error extracting and converting content:', error);

      // Return error result
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Content extraction and conversion failed',
        extractionMethod: 'content-script',
        timestamp: new Date().toISOString(),
      };
    }
  }
}

// Initialize content script when DOM is ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    new PrismWeaveContent();
  });
} else {
  new PrismWeaveContent();
}
