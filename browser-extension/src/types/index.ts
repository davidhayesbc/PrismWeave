// Generated by Copilot
// Common TypeScript interfaces and types for PrismWeave Browser Extension

export interface ISettings {
  // Repository Settings
  githubToken: string;
  githubRepo: string;

  // File Organization Settings
  defaultFolder: string;
  customFolder: string;
  fileNamingPattern: string;

  // Automation Settings
  autoCommit: boolean;

  // Content Processing Settings
  captureImages: boolean;
  removeAds: boolean;
  removeNavigation: boolean;
  customSelectors: string;

  // Git & Repository Settings
  commitMessageTemplate: string;

  // Debugging Settings
  debugMode: boolean;

  // UI Preferences
  showNotifications: boolean;
  enableKeyboardShortcuts: boolean;
}

export interface IMessageData {
  type: string;
  data?: Record<string, unknown>;
  timestamp?: number;
}

export interface IMessageResponse {
  success: boolean;
  data?: unknown;
  error?: string;
}

export interface IDocumentMetadata {
  title: string;
  url: string;
  captureDate: string;
  tags: string[];
  author?: string;
  wordCount?: number;
  estimatedReadingTime?: number;
}

export interface IImageAsset {
  originalUrl: string;
  localPath: string;
  filename: string;
  size: number;
  mimeType: string;
}

export interface IFileOperationResult {
  success: boolean;
  filePath?: string;
  error?: string;
  size?: number;
  sha?: string;
  url?: string;
}

export interface ICaptureResult {
  success: boolean;
  message: string;
  data?: {
    filename: string;
    filePath: string;
    title?: string;
    url?: string;
    markdownLength: number;
    markdown?: string;
    commitUrl?: string;
    status?: string;
    timestamp: string;
  };
}

// Storage type helpers - Note: SettingsManager has its own duplicate types
// These are kept for consistency but SettingsManager uses local versions
export type StorageKeys = string | string[] | Record<string, unknown> | null;
export type StorageResult<T = Record<string, unknown>> = Promise<T>;

// Content extraction data interfaces
export interface IContentExtractionData {
  html: string;
  title?: string;
  url?: string;
  metadata?: Record<string, unknown>;
  markdown?: string;
  frontmatter?: string;
  images?: string[];
}

export const MESSAGE_TYPES = {
  GET_SETTINGS: 'GET_SETTINGS',
  UPDATE_SETTINGS: 'UPDATE_SETTINGS',
  RESET_SETTINGS: 'RESET_SETTINGS',
  VALIDATE_SETTINGS: 'VALIDATE_SETTINGS',
  TEST_CONNECTION: 'TEST_CONNECTION',
  CAPTURE_PAGE: 'CAPTURE_PAGE',
  GET_STATUS: 'GET_STATUS',
  TEST: 'TEST',
};
export interface IContentExtractionResult {
  success: boolean;
  data?: IContentExtractionData;
  error?: string;
  extractionMethod?: 'content-script' | 'direct' | 'basic-fallback';
  timestamp?: string;
}
