// Generated by Copilot
// Common TypeScript interfaces and types for PrismWeave Browser Extension

export interface ISettings {
  // Core Extension Settings
  enabled: boolean;
  extractionRules: string[];
  apiEndpoint?: string;

  // Repository Settings
  repositoryPath: string;
  githubToken: string;
  githubRepo: string;

  // File Organization Settings
  defaultFolder: string;
  customFolder: string;
  fileNamingPattern: string;
  customNamingPattern: string;
  documentPath: string;
  defaultTags: string[];

  // Automation Settings
  quickCapture: boolean;
  autoCapture: boolean;
  autoCommit: boolean;
  autoPush: boolean;
  // Content Processing Settings
  captureImages: boolean;
  removeAds: boolean;
  removeNavigation: boolean;
  preserveFormatting: boolean;
  preserveLinks: boolean;
  customSelectors: string;
  imageQuality: number;
  maxImageSize: number;
  markdownFormat: 'github' | 'commonmark' | 'custom';
  customMarkdownRules: Record<string, unknown>;

  // Git & Repository Settings
  commitMessageTemplate: string;

  // Content Enhancement Settings
  generateTags: boolean;
  generateSummary: boolean;
  enhanceMetadata: boolean;
  aiProcessing: boolean;
  aiModel: string;

  // Performance & Debugging Settings
  debugMode: boolean;
  performanceMonitoring: boolean;
  logLevel: 'debug' | 'info' | 'warn' | 'error';

  // UI Preferences
  showNotifications: boolean;
  enableKeyboardShortcuts: boolean;
  darkMode: boolean;
}

export interface IMessageData {
  type: string;
  data?: Record<string, unknown>;
  timestamp?: number;
}

export interface IMessageResponse {
  success: boolean;
  data?: unknown;
  error?: string;
}

export interface IDocumentMetadata {
  title: string;
  url: string;
  captureDate: string;
  tags: string[];
  author?: string;
  wordCount?: number;
  estimatedReadingTime?: number;
}

export interface ICaptureOptions {
  includeImages: boolean;
  preserveFormatting: boolean;
  customSelectors?: string[];
  excludeSelectors?: string[];
  imageQuality?: number;
}

export interface IMarkdownContent {
  content: string;
  metadata: IDocumentMetadata;
  frontmatter: string;
  images?: IImageAsset[];
}

export interface IImageAsset {
  originalUrl: string;
  localPath: string;
  filename: string;
  size: number;
  mimeType: string;
}

export interface IGitCommitOptions {
  message: string;
  author?: string;
  email?: string;
  timestamp?: string;
}

export interface IFileOperationResult {
  success: boolean;
  filePath?: string;
  error?: string;
  size?: number;
  sha?: string;
  url?: string;
}

export interface IPerformanceMetrics {
  captureTime: number;
  conversionTime: number;
  commitTime: number;
  totalTime: number;
  memoryUsage?: number;
}

export interface IErrorInfo {
  message: string;
  stack?: string;
  context: string;
  timestamp: string;
  url?: string;
}

export interface ILogEntry {
  level: 'debug' | 'info' | 'warn' | 'error';
  message: string;
  context: string;
  timestamp: string;
  data?: Record<string, unknown>;
}

export interface IStorageData {
  [key: string]: unknown;
}

export interface IElementAttributes {
  [key: string]: string | Record<string, string>;
  className?: string;
  style?: Record<string, string>;
}

export interface IUtilityClasses {
  SettingsManager: new () => any;
  GitOperations: new () => any;
  FileManager: new () => any;
  ContentExtractor: new () => any;
  MarkdownConverter: new () => any;
  Logger: new (context: string) => any;
  ErrorHandler: new () => any;
  PerformanceMonitor: new () => any;
}

// Chrome extension specific types
export interface IExtensionContext {
  tabId?: number;
  windowId?: number;
  frameId?: number;
}

export interface IContentScriptMessage extends IMessageData {
  context: IExtensionContext;
}

// Storage type helpers
export type StorageKeys = string | string[] | Record<string, unknown> | null;
export type StorageResult<T = Record<string, unknown>> = Promise<T>;

// Utility type helpers
export type DeepPartial<T> = {
  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];
};

export type RequiredFields<T, K extends keyof T> = T & Required<Pick<T, K>>;

// Re-export utility types from each module
export type { IComponentLogConfig, ILogConfig } from '../utils/log-config';
export type { ILogStyles, LogLevel } from '../utils/logger';
export type {
  IMemoryInfo,
  IMetricsSummary,
  IOperationSummary,
  IPerformanceMetric,
} from '../utils/performance-monitor';
export type { IFileValidationResult, IPrismWeaveError } from '../utils/shared-utils';
export type {
  IEventListener,
  IModalOptions,
  IValidationRules,
  StatusType,
} from '../utils/ui-utils';
export type { ILogger, ILoggerFactory } from '../utils/utils-registry';
