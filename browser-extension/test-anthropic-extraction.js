// Generated by Copilot
// Test script for analyzing Anthropic content extraction issues

console.log('üß™ Testing Anthropic Content Extraction');
console.log('üìÑ Test URL: https://www.anthropic.com/research/project-vend-1?utm_source=tldrwebdev');

function testAnthropicSelectors() {
  console.log('\nüîç Testing Anthropic-specific selectors...');

  // Test various selector strategies for Anthropic research pages
  const anthropicSelectors = [
    // Research content specific
    'main article',
    'article',
    'main',
    '[role="main"]',
    '.research-content',
    '.article-content',
    '.post-content',
    '.content',
    '.main-content',

    // Anthropic site structure analysis
    '[data-testid="article"]',
    '[data-testid="content"]',
    '[data-component="article"]',
    '[class*="research"]',
    '[class*="article"]',
    '[class*="content"]',
    '[class*="post"]',

    // Next.js/React patterns (Anthropic likely uses Next.js)
    '[data-reactroot] main',
    '#__next main',
    '.next-wrapper main',

    // Structural selectors
    'div:has(h1):has(p)',
    'section:has(h1):has(p)',
    '.container:has(h1)',
    '.wrapper:has(h1)',

    // Content-heavy containers
    'div[class*="container"]',
    'div[class*="wrapper"]',
    'section[class*="main"]',
    'div[id*="content"]',

    // Fallback patterns
    'body > div',
    'body > main',
    'body > section',
  ];

  const results = [];

  anthropicSelectors.forEach(selector => {
    try {
      const elements = document.querySelectorAll(selector);
      elements.forEach((element, index) => {
        const text = element.textContent?.trim() || '';
        const className = element.className || '';
        const id = element.id || '';

        if (text.length > 200) {
          results.push({
            selector: `${selector}[${index}]`,
            textLength: text.length,
            wordCount: text.split(/\s+/).filter(Boolean).length,
            className,
            id,
            preview: text.substring(0, 100) + '...',
            tagName: element.tagName,
            hasHeadings: element.querySelectorAll('h1, h2, h3, h4, h5, h6').length,
            hasParagraphs: element.querySelectorAll('p').length,
            hasImages: element.querySelectorAll('img').length,
          });
        }
      });
    } catch (error) {
      console.warn(`Invalid selector: ${selector}`, error);
    }
  });

  // Sort by content quality
  results.sort((a, b) => {
    const scoreA = scoreAnthropicElement(a);
    const scoreB = scoreAnthropicElement(b);
    return scoreB - scoreA;
  });

  console.log('\nüìä Anthropic Content Analysis Results:');
  results.slice(0, 10).forEach((result, index) => {
    const score = scoreAnthropicElement(result);
    console.log(`${index + 1}. ${result.selector}`);
    console.log(`   Score: ${score}`);
    console.log(`   Text: ${result.textLength} chars, ${result.wordCount} words`);
    console.log(
      `   Structure: ${result.hasHeadings}h, ${result.hasParagraphs}p, ${result.hasImages}img`
    );
    console.log(`   Class: "${result.className}"`);
    console.log(`   Preview: ${result.preview}`);
    console.log('');
  });

  return results;
}

function scoreAnthropicElement(elementInfo) {
  let score = 0;

  // Base score from content
  score += Math.min(elementInfo.textLength / 20, 300);
  score += elementInfo.wordCount / 10;
  score += elementInfo.hasParagraphs * 30;
  score += elementInfo.hasHeadings * 40;

  // Bonus for research-related classes
  const className = elementInfo.className.toLowerCase();
  if (className.includes('research')) score += 200;
  if (className.includes('article')) score += 150;
  if (className.includes('content')) score += 100;
  if (className.includes('main')) score += 80;
  if (className.includes('post')) score += 60;

  // Bonus for good structure
  if (elementInfo.hasHeadings > 2 && elementInfo.hasParagraphs > 5) score += 100;

  // Penalty for navigation/header elements
  const navTerms = ['nav', 'header', 'footer', 'menu', 'sidebar'];
  navTerms.forEach(term => {
    if (className.includes(term)) score -= 100;
  });

  // Bonus for main semantic elements
  if (elementInfo.tagName === 'MAIN' || elementInfo.tagName === 'ARTICLE') score += 150;

  return Math.max(0, score);
}

function testAnthropicStructure() {
  console.log('\nüèóÔ∏è Testing Anthropic page structure...');

  // Analyze the page structure
  const structure = {
    title: document.title,
    headings: Array.from(document.querySelectorAll('h1, h2, h3, h4, h5, h6')).map(h => ({
      tag: h.tagName,
      text: h.textContent?.trim(),
      level: parseInt(h.tagName.charAt(1)),
    })),
    mainElements: Array.from(document.querySelectorAll('main')).length,
    articleElements: Array.from(document.querySelectorAll('article')).length,
    sectionElements: Array.from(document.querySelectorAll('section')).length,

    // Look for Next.js patterns
    hasNextRoot: !!document.querySelector('#__next'),
    hasReactRoot: !!document.querySelector('[data-reactroot]'),

    // Look for common patterns
    containerClasses: Array.from(document.querySelectorAll('[class*="container"]')).length,
    wrapperClasses: Array.from(document.querySelectorAll('[class*="wrapper"]')).length,
    contentClasses: Array.from(document.querySelectorAll('[class*="content"]')).length,

    // Check for dynamic content loading
    hasLazyImages: Array.from(document.querySelectorAll('img[loading="lazy"]')).length,
    hasDataSrc: Array.from(document.querySelectorAll('img[data-src]')).length,
  };

  console.log('üìã Page Structure Analysis:');
  console.log(JSON.stringify(structure, null, 2));

  return structure;
}

function findAnthropicMainContent() {
  console.log('\nüéØ Attempting to find main content...');

  // Strategy 1: Look for the largest text container
  const allDivs = Array.from(document.querySelectorAll('div, section, article, main'));
  const contentCandidates = allDivs
    .filter(el => {
      const text = el.textContent?.trim() || '';
      return text.length > 1000 && text.includes('Project Vend');
    })
    .map(el => ({
      element: el,
      textLength: el.textContent?.length || 0,
      wordCount: (el.textContent?.split(/\s+/) || []).filter(Boolean).length,
      className: el.className,
      tagName: el.tagName,
      score: scoreAnthropicElement({
        textLength: el.textContent?.length || 0,
        wordCount: (el.textContent?.split(/\s+/) || []).filter(Boolean).length,
        className: el.className,
        hasHeadings: el.querySelectorAll('h1, h2, h3, h4, h5, h6').length,
        hasParagraphs: el.querySelectorAll('p').length,
        hasImages: el.querySelectorAll('img').length,
        tagName: el.tagName,
      }),
    }))
    .sort((a, b) => b.score - a.score);

  console.log('üìä Content Candidates:');
  contentCandidates.slice(0, 5).forEach((candidate, index) => {
    console.log(`${index + 1}. ${candidate.tagName}.${candidate.className || '(no class)'}`);
    console.log(`   Score: ${candidate.score}`);
    console.log(`   Text: ${candidate.textLength} chars`);
    console.log(`   Words: ${candidate.wordCount}`);
    console.log('');
  });

  return contentCandidates[0]?.element || null;
}

function testCurrentExtractionStrategies() {
  console.log('\nüî¨ Testing current extraction strategies...');

  // Test the selectors that would be used by the current content extractor
  const strategies = [
    {
      name: 'General Content Strategy',
      selectors: [
        'article',
        'main',
        '[role="main"]',
        '.content',
        '.main-content',
        '.entry-content',
        '.post-content',
        '.article-content',
        '.blog-content',
      ],
    },
    {
      name: 'Documentation Strategy',
      selectors: [
        '.documentation-content',
        '.tutorial-content',
        '.guide-content',
        '.docs-content',
        '.content-wrapper',
        '.page-content',
        '.prose',
        '.rich-text',
        '.markdown-body',
        '.content-main',
        '.main-article',
      ],
    },
  ];

  strategies.forEach(strategy => {
    console.log(`\nüìã Testing ${strategy.name}:`);

    strategy.selectors.forEach(selector => {
      try {
        const elements = document.querySelectorAll(selector);
        if (elements.length > 0) {
          Array.from(elements).forEach((element, index) => {
            const text = element.textContent?.trim() || '';
            if (text.length > 200) {
              console.log(
                `  ‚úÖ ${selector}[${index}]: ${text.length} chars, ${text.split(/\s+/).filter(Boolean).length} words`
              );
              console.log(`     Preview: ${text.substring(0, 80)}...`);
            }
          });
        }
      } catch (error) {
        console.warn(`  ‚ùå Invalid selector: ${selector}`);
      }
    });
  });
}

// Export functions to window for manual testing
window.testAnthropicSelectors = testAnthropicSelectors;
window.testAnthropicStructure = testAnthropicStructure;
window.findAnthropicMainContent = findAnthropicMainContent;
window.testCurrentExtractionStrategies = testCurrentExtractionStrategies;

console.log('\nüìã Manual Testing Instructions:');
console.log(
  '1. Navigate to: https://www.anthropic.com/research/project-vend-1?utm_source=tldrwebdev'
);
console.log('2. Open browser DevTools (F12)');
console.log('3. Copy and paste this entire script into the console');
console.log('4. Run: testAnthropicSelectors()');
console.log('5. Run: testAnthropicStructure()');
console.log('6. Run: findAnthropicMainContent()');
console.log('7. Run: testCurrentExtractionStrategies()');

console.log('\nüîç What to look for:');
console.log('- Elements that capture the full article content');
console.log('- High scoring elements with proper structure');
console.log('- Missing selectors that could improve extraction');
console.log('- Dynamic content loading issues');

console.log('\nüöÄ Testing Enhanced Extraction:');
console.log('The analysis should reveal why current extraction is failing');
console.log('and provide insights for improving Anthropic content detection.');
