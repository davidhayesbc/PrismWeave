// Generated by Copilot
// Configuration Management for PrismWeave CLI

import { existsSync, mkdirSync, readFileSync, writeFileSync } from 'fs';
import { homedir } from 'os';
import { join } from 'path';

export interface ICliConfig {
  githubToken?: string;
  githubRepo?: string;
  defaultFolder?: string;
  includeImages?: boolean;
  includeLinks?: boolean;
  timeout?: number;
}

export class ConfigManager {
  private configPath: string;
  private config: ICliConfig = {};

  constructor() {
    const configDir = join(homedir(), '.prismweave');
    this.configPath = join(configDir, 'config.json');
    this.load();
  }

  load(): void {
    try {
      if (existsSync(this.configPath)) {
        const data = readFileSync(this.configPath, 'utf-8');
        this.config = JSON.parse(data);
      }
    } catch (error) {
      console.warn('Failed to load config:', (error as Error).message);
    }
  }

  save(): void {
    try {
      const configDir = join(homedir(), '.prismweave');
      if (!existsSync(configDir)) {
        mkdirSync(configDir, { recursive: true });
      }
      writeFileSync(this.configPath, JSON.stringify(this.config, null, 2));
    } catch (error) {
      console.error('Failed to save config:', (error as Error).message);
    }
  }

  get(key: keyof ICliConfig): any {
    return this.config[key];
  }

  set(key: keyof ICliConfig, value: any): void {
    this.config[key] = value;
    this.save();
  }

  getAll(): ICliConfig {
    return { ...this.config };
  }

  setAll(config: ICliConfig): void {
    this.config = { ...config };
    this.save();
  }

  has(key: keyof ICliConfig): boolean {
    return key in this.config && this.config[key] !== undefined;
  }

  validate(): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];

    if (!this.config.githubToken) {
      errors.push('GitHub token is required');
    }

    if (!this.config.githubRepo) {
      errors.push('GitHub repository is required');
    }

    if (
      this.config.githubRepo &&
      !/^[\w-]+\/[\w-]+$/.test(this.config.githubRepo)
    ) {
      errors.push('GitHub repository must be in format: owner/repo');
    }

    return {
      isValid: errors.length === 0,
      errors,
    };
  }
}
