// Generated by Copilot
// Configuration manager for PrismWeave RAG Assistant

import * as vscode from 'vscode';

export class ConfigManager {
  private _config: vscode.WorkspaceConfiguration | null = null;

  async initialize(): Promise<void> {
    this._config = vscode.workspace.getConfiguration('prismweave');
  }

  // ChromaDB configuration
  getChromaHost(): string {
    return this._config?.get('chromadb.host') ?? 'localhost';
  }

  getChromaPort(): number {
    return this._config?.get('chromadb.port') ?? 8000;
  }

  getChromaCollection(): string {
    return this._config?.get('chromadb.collection') ?? 'documents';
  }

  getChromaUrl(): string {
    return `http://${this.getChromaHost()}:${this.getChromaPort()}`;
  }

  // Model configuration
  getModelProvider(): 'onnx' | 'phi-silica' | 'custom' {
    return this._config?.get('model.provider') ?? 'onnx';
  }

  getModelName(): string {
    return this._config?.get('model.name') ?? '';
  }

  // Document configuration
  getArticlesPath(): string {
    return this._config?.get('documents.articlesPath') ?? '../PrismWeaveDocs/articles';
  }

  // Feature flags
  isWebEnabled(): boolean {
    return this._config?.get('web.enabled') ?? true;
  }

  isMCPEnabled(): boolean {
    return this._config?.get('mcp.enabled') ?? false;
  }

  // Update configuration
  async updateConfig(section: string, value: any): Promise<void> {
    if (!this._config) {
      throw new Error('Configuration not initialized');
    }
    
    await this._config.update(section, value, vscode.ConfigurationTarget.Workspace);
  }

  // Get all configuration as object
  getAllConfig(): Record<string, any> {
    if (!this._config) {
      return {};
    }

    return {
      chromadb: {
        host: this.getChromaHost(),
        port: this.getChromaPort(),
        collection: this.getChromaCollection(),
        url: this.getChromaUrl()
      },
      model: {
        provider: this.getModelProvider(),
        name: this.getModelName()
      },
      documents: {
        articlesPath: this.getArticlesPath()
      },
      features: {
        web: this.isWebEnabled(),
        mcp: this.isMCPEnabled()
      }
    };
  }
}
