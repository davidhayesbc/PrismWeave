// Generated by Copilot
// Logger utility for PrismWeave RAG Assistant

import * as vscode from 'vscode';

export class Logger {
  private static _outputChannel: vscode.OutputChannel | null = null;
  private static _context: vscode.ExtensionContext | null = null;

  static initialize(context: vscode.ExtensionContext): void {
    this._context = context;
    this._outputChannel = vscode.window.createOutputChannel('PrismWeave RAG Assistant');
    context.subscriptions.push(this._outputChannel);
  }

  static info(message: string, ...args: any[]): void {
    this._log('INFO', message, ...args);
  }

  static debug(message: string, ...args: any[]): void {
    this._log('DEBUG', message, ...args);
  }

  static warn(message: string, ...args: any[]): void {
    this._log('WARN', message, ...args);
  }

  static error(message: string, error?: any, ...args: any[]): void {
    this._log('ERROR', message, error, ...args);
  }

  private static _log(level: string, message: string, ...args: any[]): void {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] [${level}] ${message}`;
    
    if (args.length > 0) {
      const argsStr = args.map(arg => 
        typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)
      ).join(' ');
      
      this._outputChannel?.appendLine(`${logMessage} ${argsStr}`);
    } else {
      this._outputChannel?.appendLine(logMessage);
    }

    // Also log to console for development
    switch (level) {
      case 'INFO':
        console.log(logMessage, ...args);
        break;
      case 'DEBUG':
        console.debug(logMessage, ...args);
        break;
      case 'WARN':
        console.warn(logMessage, ...args);
        break;
      case 'ERROR':
        console.error(logMessage, ...args);
        break;
    }
  }

  static show(): void {
    this._outputChannel?.show();
  }

  static dispose(): void {
    this._outputChannel?.dispose();
    this._outputChannel = null;
    this._context = null;
  }
}
