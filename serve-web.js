#!/usr/bin/env node

// Generated by Copilot
// Web server for PrismWeave web deployment
// Serves built web files with proper MIME types and CORS headers

const http = require('http');
const fs = require('fs');
const path = require('path');
const url = require('url');

class PrismWeaveWebServer {
  constructor(options = {}) {
    this.port = options.port || 8080;
    this.host = options.host || 'localhost';
    this.distPath = path.join(__dirname, 'dist', 'web');
    this.mimeTypes = {
      '.html': 'text/html',
      '.js': 'application/javascript',
      '.css': 'text/css',
      '.json': 'application/json',
      '.png': 'image/png',
      '.jpg': 'image/jpeg',
      '.gif': 'image/gif',
      '.svg': 'image/svg+xml',
      '.ico': 'image/x-icon',
      '.woff': 'font/woff',
      '.woff2': 'font/woff2',
      '.ttf': 'font/ttf',
      '.eot': 'application/vnd.ms-fontobject',
    };
  }

  start() {
    // Check if web files exist
    if (!fs.existsSync(this.distPath)) {
      console.error('‚ùå Web distribution not found. Run "npm run build:web" first.');
      process.exit(1);
    }

    const server = http.createServer((req, res) => {
      this.handleRequest(req, res);
    });

    server.listen(this.port, this.host, () => {
      console.log(`üåê PrismWeave Web Server started`);
      console.log(`üìç URL: http://${this.host}:${this.port}`);
      console.log(`üìÅ Serving: ${this.distPath}`);
      console.log(`üîó Bookmarklet: http://${this.host}:${this.port}/bookmarklet/install-hybrid.html`);
      console.log('Press Ctrl+C to stop the server');
    });

    // Graceful shutdown
    process.on('SIGINT', () => {
      console.log('\nüõë Shutting down server...');
      server.close(() => {
        console.log('‚úÖ Server stopped');
        process.exit(0);
      });
    });
  }

  handleRequest(req, res) {
    const parsedUrl = url.parse(req.url);
    let pathname = parsedUrl.pathname;

    // Default to index.html for root requests
    if (pathname === '/') {
      pathname = '/index.html';
    }

    // Security: prevent directory traversal
    pathname = pathname.replace(/\.\./g, '');
    
    const filePath = path.join(this.distPath, pathname);
    const extname = path.extname(filePath).toLowerCase();

    // Check if file exists
    fs.access(filePath, fs.constants.F_OK, (err) => {
      if (err) {
        this.send404(res, pathname);
        return;
      }

      // Check if it's a directory
      fs.stat(filePath, (err, stats) => {
        if (err) {
          this.send500(res, err);
          return;
        }

        if (stats.isDirectory()) {
          // Try to serve index.html from directory
          const indexPath = path.join(filePath, 'index.html');
          fs.access(indexPath, fs.constants.F_OK, (err) => {
            if (err) {
              this.sendDirectoryListing(res, filePath, pathname);
            } else {
              this.serveFile(res, indexPath, '.html');
            }
          });
        } else {
          this.serveFile(res, filePath, extname);
        }
      });
    });
  }

  serveFile(res, filePath, extname) {
    const contentType = this.mimeTypes[extname] || 'application/octet-stream';

    fs.readFile(filePath, (err, content) => {
      if (err) {
        this.send500(res, err);
        return;
      }

      // Set CORS headers for development
      res.setHeader('Access-Control-Allow-Origin', '*');
      res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
      res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

      // Set cache headers
      if (extname === '.js' || extname === '.css') {
        res.setHeader('Cache-Control', 'public, max-age=3600'); // 1 hour for assets
      } else {
        res.setHeader('Cache-Control', 'public, max-age=300'); // 5 minutes for content
      }

      res.writeHead(200, { 'Content-Type': contentType });
      res.end(content, 'utf-8');

      console.log(`üìÑ ${new Date().toISOString()} - ${filePath.replace(this.distPath, '')}`);
    });
  }

  sendDirectoryListing(res, dirPath, urlPath) {
    fs.readdir(dirPath, (err, files) => {
      if (err) {
        this.send500(res, err);
        return;
      }

      const listing = files.map(file => {
        const filePath = path.join(dirPath, file);
        const stats = fs.statSync(filePath);
        const isDir = stats.isDirectory();
        const url = path.join(urlPath, file).replace(/\\/g, '/');
        
        return {
          name: file + (isDir ? '/' : ''),
          url: url + (isDir ? '/' : ''),
          isDirectory: isDir,
          size: isDir ? '-' : this.formatFileSize(stats.size),
          modified: stats.mtime.toISOString(),
        };
      });

      const html = this.generateDirectoryHTML(urlPath, listing);
      
      res.setHeader('Access-Control-Allow-Origin', '*');
      res.writeHead(200, { 'Content-Type': 'text/html' });
      res.end(html);

      console.log(`üìÅ ${new Date().toISOString()} - Directory listing: ${urlPath}`);
    });
  }

  generateDirectoryHTML(dirPath, files) {
    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Directory: ${dirPath}</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 40px; }
        h1 { color: #2563eb; border-bottom: 2px solid #e5e7eb; padding-bottom: 10px; }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        th, td { text-align: left; padding: 12px; border-bottom: 1px solid #e5e7eb; }
        th { background: #f8fafc; font-weight: 600; }
        a { color: #2563eb; text-decoration: none; }
        a:hover { text-decoration: underline; }
        .directory { font-weight: 600; }
        .size { text-align: right; font-family: monospace; }
        .date { font-family: monospace; font-size: 0.9em; color: #6b7280; }
        .back { margin: 20px 0; }
        .back a { background: #f3f4f6; padding: 8px 16px; border-radius: 6px; }
    </style>
</head>
<body>
    <h1>üìÅ Directory: ${dirPath}</h1>
    
    ${dirPath !== '/' ? '<div class="back"><a href="../">‚Üê Back</a></div>' : ''}
    
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Size</th>
                <th>Modified</th>
            </tr>
        </thead>
        <tbody>
            ${files.map(file => `
                <tr>
                    <td>
                        <a href="${file.url}" class="${file.isDirectory ? 'directory' : ''}">
                            ${file.isDirectory ? 'üìÅ' : 'üìÑ'} ${file.name}
                        </a>
                    </td>
                    <td class="size">${file.size}</td>
                    <td class="date">${new Date(file.modified).toLocaleString()}</td>
                </tr>
            `).join('')}
        </tbody>
    </table>
    
    <div style="margin-top: 40px; padding: 20px; background: #f8fafc; border-radius: 8px;">
        <h3>üöÄ PrismWeave Web Server</h3>
        <p>Serving files from: <code>${this.distPath}</code></p>
        <p>Server time: ${new Date().toISOString()}</p>
    </div>
</body>
</html>`;
  }

  send404(res, pathname) {
    const html = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>404 Not Found</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
               text-align: center; margin: 0; padding: 60px 20px; background: #f8fafc; }
        .container { max-width: 600px; margin: 0 auto; background: white; 
                    padding: 40px; border-radius: 12px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
        h1 { color: #dc2626; font-size: 4rem; margin-bottom: 20px; }
        h2 { color: #374151; margin-bottom: 20px; }
        p { color: #6b7280; margin-bottom: 30px; }
        a { color: #2563eb; text-decoration: none; padding: 12px 24px; 
            background: #eff6ff; border-radius: 6px; display: inline-block; }
        a:hover { background: #dbeafe; }
    </style>
</head>
<body>
    <div class="container">
        <h1>404</h1>
        <h2>Page Not Found</h2>
        <p>The requested file <code>${pathname}</code> was not found.</p>
        <a href="/">‚Üê Back to Home</a>
    </div>
</body>
</html>`;

    res.setHeader('Access-Control-Allow-Origin', '*');
    res.writeHead(404, { 'Content-Type': 'text/html' });
    res.end(html);

    console.log(`‚ùå ${new Date().toISOString()} - 404: ${pathname}`);
  }

  send500(res, error) {
    const html = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>500 Server Error</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
               text-align: center; margin: 0; padding: 60px 20px; background: #fef2f2; }
        .container { max-width: 600px; margin: 0 auto; background: white; 
                    padding: 40px; border-radius: 12px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
        h1 { color: #dc2626; font-size: 4rem; margin-bottom: 20px; }
        h2 { color: #374151; margin-bottom: 20px; }
        p { color: #6b7280; margin-bottom: 30px; }
        .error { background: #fef2f2; padding: 20px; border-radius: 6px; 
                 border-left: 4px solid #dc2626; text-align: left; margin: 20px 0; }
        a { color: #2563eb; text-decoration: none; padding: 12px 24px; 
            background: #eff6ff; border-radius: 6px; display: inline-block; }
        a:hover { background: #dbeafe; }
    </style>
</head>
<body>
    <div class="container">
        <h1>500</h1>
        <h2>Server Error</h2>
        <p>An internal server error occurred while processing your request.</p>
        <div class="error">
            <strong>Error:</strong> ${error.message}
        </div>
        <a href="/">‚Üê Back to Home</a>
    </div>
</body>
</html>`;

    res.setHeader('Access-Control-Allow-Origin', '*');
    res.writeHead(500, { 'Content-Type': 'text/html' });
    res.end(html);

    console.error(`üí• ${new Date().toISOString()} - 500: ${error.message}`);
  }

  formatFileSize(bytes) {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
  }
}

// Parse command line arguments
function parseArgs() {
  const args = process.argv.slice(2);
  const options = {};

  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    if (arg === '--port' || arg === '-p') {
      options.port = parseInt(args[++i]) || 8080;
    } else if (arg === '--host' || arg === '-h') {
      options.host = args[++i] || 'localhost';
    } else if (arg === '--help') {
      console.log(`
PrismWeave Web Server

Usage: node serve-web.js [options]

Options:
  -p, --port <port>    Port to listen on (default: 8080)
  -h, --host <host>    Host to bind to (default: localhost)
  --help               Show this help message

Examples:
  node serve-web.js
  node serve-web.js --port 3000
  node serve-web.js --host 0.0.0.0 --port 8080
      `);
      process.exit(0);
    }
  }

  return options;
}

// Main execution
if (require.main === module) {
  const options = parseArgs();
  const server = new PrismWeaveWebServer(options);
  server.start();
}

module.exports = { PrismWeaveWebServer };