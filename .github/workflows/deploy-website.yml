name: Deploy Website

on:
  push:
    branches: [ main ]
  release:
    types: [ published, created ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-website:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: npm install
          
      - name: Build extension and bookmarklet
        run: |
          echo "üî® Building extension and bookmarklet..."
          node build.js build
          
      - name: Generate website
        run: |
          echo "üöÄ Generating PrismWeave website..."
          mkdir -p dist/web
          
          # Get version from package.json and latest release
          VERSION=$(node -e "console.log(require('./package.json').version || '1.0.0')" 2>/dev/null || echo "1.0.0")
          LAST_MODIFIED=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # Try to get latest release info from GitHub API
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/davidhayesbc/PrismWeave/releases/latest || echo '{}')
          LATEST_VERSION=$(echo "$LATEST_RELEASE" | grep '"tag_name"' | cut -d'"' -f4 | sed 's/^v//' || echo "$VERSION")
          
          echo "Package version: $VERSION"
          echo "Latest release: $LATEST_VERSION" 
          echo "Last modified: $LAST_MODIFIED"
          
          # Use latest release version if available, otherwise package.json version
          DISPLAY_VERSION=$LATEST_VERSION
          if [ "$DISPLAY_VERSION" == "" ] || [ "$DISPLAY_VERSION" == "null" ]; then
            DISPLAY_VERSION=$VERSION
          fi
          
          echo "Using display version: $DISPLAY_VERSION"
          
          # Process HTML template with version substitution
          sed "s/{{VERSION}}/$DISPLAY_VERSION/g" .github/templates/index.html > dist/web/index.html
          
          # Process sitemap with last modified date  
          sed "s/{{LAST_MODIFIED}}/$LAST_MODIFIED/g" .github/templates/sitemap.xml > dist/web/sitemap.xml
          
          # Copy other static files
          cp .github/templates/404.html dist/web/404.html
          cp .github/templates/robots.txt dist/web/robots.txt
          
          # Copy bookmarklet assets to web deployment
          echo "üìÅ Copying bookmarklet assets..."
          mkdir -p dist/web/bookmarklet
          cp -r browser-extension/dist/bookmarklet/* dist/web/bookmarklet/
          
      - name: List generated files
        run: |
          echo "Generated files:"
          ls -la dist/web/
          echo ""
          echo "Index.html size:"
          wc -c dist/web/index.html
          
      - name: Setup GitHub Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist/web
          
  deploy:
    needs: build-website
    if: github.ref == 'refs/heads/main'
    
    runs-on: ubuntu-latest
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
